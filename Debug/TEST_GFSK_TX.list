
TEST_GFSK_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  0800ad28  0800ad28  0001ad28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b54c  0800b54c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b54c  0800b54c  0001b54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b554  0800b554  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b554  0800b554  0001b554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b558  0800b558  0001b558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800b55c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000060  0800b5bc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  0800b5bc  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fa2d  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004396  00000000  00000000  0003fafa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc8  00000000  00000000  00043e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016d7  00000000  00000000  00045c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e34  00000000  00000000  0004732f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e2aa  00000000  00000000  00068163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4180  00000000  00000000  0008640d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000826c  00000000  00000000  0014a590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001527fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ad10 	.word	0x0800ad10

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	0800ad10 	.word	0x0800ad10

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002c4:	f080 811b 	bcs.w	80004fe <__udivmoddi4+0x28e>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8118 	bls.w	80004fe <__udivmoddi4+0x28e>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	f080 8106 	bcs.w	8000502 <__udivmoddi4+0x292>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8103 	bls.w	8000502 <__udivmoddi4+0x292>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ec 	beq.w	80004f8 <__udivmoddi4+0x288>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f7 	bhi.w	800052c <__udivmoddi4+0x2bc>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 808f 	bne.w	800047e <__udivmoddi4+0x20e>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80ba 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa00 f901 	lsl.w	r9, r0, r1
 80003e6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fbb5 f8f0 	udiv	r8, r5, r0
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	fb00 5518 	mls	r5, r0, r8, r5
 80003f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003fc:	fb08 f50e 	mul.w	r5, r8, lr
 8000400:	42a5      	cmp	r5, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f0 	udiv	r3, r4, r0
 8000428:	fb00 4413 	mls	r4, r0, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800044e:	fba0 8302 	umull	r8, r3, r0, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	429c      	cmp	r4, r3
 8000458:	46c6      	mov	lr, r8
 800045a:	461d      	mov	r5, r3
 800045c:	d355      	bcc.n	800050a <__udivmoddi4+0x29a>
 800045e:	d052      	beq.n	8000506 <__udivmoddi4+0x296>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb9 030e 	subs.w	r3, r9, lr
 8000466:	eb64 0405 	sbc.w	r4, r4, r5
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40cb      	lsrs	r3, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	431f      	orrs	r7, r3
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	2100      	movs	r1, #0
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1c3 0120 	rsb	r1, r3, #32
 8000482:	fa02 fc03 	lsl.w	ip, r2, r3
 8000486:	fa20 f201 	lsr.w	r2, r0, r1
 800048a:	fa25 f101 	lsr.w	r1, r5, r1
 800048e:	409d      	lsls	r5, r3
 8000490:	432a      	orrs	r2, r5
 8000492:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fbb1 f0f7 	udiv	r0, r1, r7
 800049e:	fb07 1510 	mls	r5, r7, r0, r1
 80004a2:	0c11      	lsrs	r1, r2, #16
 80004a4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a8:	fb00 f50e 	mul.w	r5, r0, lr
 80004ac:	428d      	cmp	r5, r1
 80004ae:	fa04 f403 	lsl.w	r4, r4, r3
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b4:	eb1c 0101 	adds.w	r1, ip, r1
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428d      	cmp	r5, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4461      	add	r1, ip
 80004c6:	1b49      	subs	r1, r1, r5
 80004c8:	b292      	uxth	r2, r2
 80004ca:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ce:	fb07 1115 	mls	r1, r7, r5, r1
 80004d2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d6:	fb05 f10e 	mul.w	r1, r5, lr
 80004da:	4291      	cmp	r1, r2
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x280>
 80004de:	eb1c 0202 	adds.w	r2, ip, r2
 80004e2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e6:	d216      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d914      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	1a52      	subs	r2, r2, r1
 80004f2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f6:	e739      	b.n	800036c <__udivmoddi4+0xfc>
 80004f8:	4631      	mov	r1, r6
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xa2>
 80004fe:	4639      	mov	r1, r7
 8000500:	e6e7      	b.n	80002d2 <__udivmoddi4+0x62>
 8000502:	4610      	mov	r0, r2
 8000504:	e6fc      	b.n	8000300 <__udivmoddi4+0x90>
 8000506:	45c1      	cmp	r9, r8
 8000508:	d2aa      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050a:	ebb8 0e02 	subs.w	lr, r8, r2
 800050e:	eb63 050c 	sbc.w	r5, r3, ip
 8000512:	3801      	subs	r0, #1
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4645      	mov	r5, r8
 8000518:	e7ea      	b.n	80004f0 <__udivmoddi4+0x280>
 800051a:	4603      	mov	r3, r0
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4640      	mov	r0, r8
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	46d0      	mov	r8, sl
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3d02      	subs	r5, #2
 8000528:	4462      	add	r2, ip
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x124>
 800052c:	4608      	mov	r0, r1
 800052e:	e70b      	b.n	8000348 <__udivmoddi4+0xd8>
 8000530:	4464      	add	r4, ip
 8000532:	3802      	subs	r0, #2
 8000534:	e743      	b.n	80003be <__udivmoddi4+0x14e>
 8000536:	bf00      	nop

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <delay_us>:
#include "com_debug.h"
#include "stdio.h"
#include "stdarg.h"
#include "stdint.h"

void delay_us(uint32_t us) {
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <delay_us+0x30>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2200      	movs	r2, #0
 800054a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 800054c:	e002      	b.n	8000554 <delay_us+0x18>
		delay_counter_disp++;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3301      	adds	r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <delay_us+0x30>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	429a      	cmp	r2, r3
 800055e:	d8f6      	bhi.n	800054e <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	20000168 	.word	0x20000168

08000570 <myPrintf>:

void myPrintf(const char *fmt, ...) {
 8000570:	b40f      	push	{r0, r1, r2, r3}
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	2164      	movs	r1, #100	; 0x64
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <myPrintf+0x40>)
 8000586:	f009 ff33 	bl	800a3f0 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 800058a:	4809      	ldr	r0, [pc, #36]	; (80005b0 <myPrintf+0x40>)
 800058c:	f000 f814 	bl	80005b8 <bufferSize>
 8000590:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	b29a      	uxth	r2, r3
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	4905      	ldr	r1, [pc, #20]	; (80005b0 <myPrintf+0x40>)
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <myPrintf+0x44>)
 800059e:	f004 f931 	bl	8004804 <HAL_UART_Transmit>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ac:	b004      	add	sp, #16
 80005ae:	4770      	bx	lr
 80005b0:	2000007c 	.word	0x2000007c
 80005b4:	200001b4 	.word	0x200001b4

080005b8 <bufferSize>:

int bufferSize(char *buffer) {
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	int i = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80005c4:	e002      	b.n	80005cc <bufferSize+0x14>
		i++;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	3301      	adds	r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	607a      	str	r2, [r7, #4]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1f6      	bne.n	80005c6 <bufferSize+0xe>
	return i;
 80005d8:	68fb      	ldr	r3, [r7, #12]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4013      	ands	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000608:	68fb      	ldr	r3, [r7, #12]
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <HAL_TIM_PeriodElapsedCallback>:
void DioIrqHndlr(RadioIrqMasks_t radioIrq);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a2b      	ldr	r2, [pc, #172]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d14e      	bne.n	80006c2 <HAL_TIM_PeriodElapsedCallback+0xae>
		mSEC++;
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	b29a      	uxth	r2, r3
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800062e:	801a      	strh	r2, [r3, #0]

		if (mSEC > 999) {
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000638:	d308      	bcc.n	800064c <HAL_TIM_PeriodElapsedCallback+0x38>
			mSEC = 0;
 800063a:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800063c:	2200      	movs	r2, #0
 800063e:	801a      	strh	r2, [r3, #0]
			sec++;
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800064a:	701a      	strb	r2, [r3, #0]
		}

		if (sec > 0) {
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d00f      	beq.n	8000674 <HAL_TIM_PeriodElapsedCallback+0x60>
			if (sec % 5 == 0) {
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800065a:	fba3 1302 	umull	r1, r3, r3, r2
 800065e:	0899      	lsrs	r1, r3, #2
 8000660:	460b      	mov	r3, r1
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	440b      	add	r3, r1
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d102      	bne.n	8000674 <HAL_TIM_PeriodElapsedCallback+0x60>
				TX_FLAG = 1;
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
			}
		}

		if (sec > 59) {
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b3b      	cmp	r3, #59	; 0x3b
 800067a:	d908      	bls.n	800068e <HAL_TIM_PeriodElapsedCallback+0x7a>
			sec = 0;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
			min++;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800068c:	701a      	strb	r2, [r3, #0]
		}

		if (min > 59) {
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b3b      	cmp	r3, #59	; 0x3b
 8000694:	d908      	bls.n	80006a8 <HAL_TIM_PeriodElapsedCallback+0x94>
			min = 0;
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
			hour++;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80006a6:	701a      	strb	r2, [r3, #0]
		}

		if (hour > 23) {
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b17      	cmp	r3, #23
 80006ae:	d908      	bls.n	80006c2 <HAL_TIM_PeriodElapsedCallback+0xae>
			hour = 0;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
			min = 0;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
			sec = 0;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	2000011c 	.word	0x2000011c
 80006d0:	20000372 	.word	0x20000372
 80006d4:	20000374 	.word	0x20000374
 80006d8:	cccccccd 	.word	0xcccccccd
 80006dc:	20000370 	.word	0x20000370
 80006e0:	20000375 	.word	0x20000375
 80006e4:	20000376 	.word	0x20000376

080006e8 <calc_CRC>:

uint16_t calc_CRC(const uint8_t *data, uint8_t data_length) {
 80006e8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80006ec:	b08b      	sub	sp, #44	; 0x2c
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	460b      	mov	r3, r1
 80006f4:	70fb      	strb	r3, [r7, #3]
 80006f6:	466b      	mov	r3, sp
 80006f8:	4618      	mov	r0, r3

	uint16_t crcReg = 0xFFFF;	// Initialize the CRC register with 0xFFFF
 80006fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fe:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t calc = 0x8408;		// Polynomial for CRC-16
 8000700:	f248 4308 	movw	r3, #33800	; 0x8408
 8000704:	837b      	strh	r3, [r7, #26]
	uint16_t w;
	int i, j;
	uint8_t calc_data[DATA_SIZE];  // in 16 bytes, 14 are data bytes
 8000706:	4b37      	ldr	r3, [pc, #220]	; (80007e4 <calc_CRC+0xfc>)
 8000708:	7819      	ldrb	r1, [r3, #0]
 800070a:	460b      	mov	r3, r1
 800070c:	3b01      	subs	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	b2cb      	uxtb	r3, r1
 8000712:	2200      	movs	r2, #0
 8000714:	4698      	mov	r8, r3
 8000716:	4691      	mov	r9, r2
 8000718:	f04f 0200 	mov.w	r2, #0
 800071c:	f04f 0300 	mov.w	r3, #0
 8000720:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000724:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000728:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800072c:	b2cb      	uxtb	r3, r1
 800072e:	2200      	movs	r2, #0
 8000730:	461c      	mov	r4, r3
 8000732:	4615      	mov	r5, r2
 8000734:	f04f 0200 	mov.w	r2, #0
 8000738:	f04f 0300 	mov.w	r3, #0
 800073c:	00eb      	lsls	r3, r5, #3
 800073e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000742:	00e2      	lsls	r2, r4, #3
 8000744:	460b      	mov	r3, r1
 8000746:	3307      	adds	r3, #7
 8000748:	08db      	lsrs	r3, r3, #3
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	ebad 0d03 	sub.w	sp, sp, r3
 8000750:	466b      	mov	r3, sp
 8000752:	3300      	adds	r3, #0
 8000754:	613b      	str	r3, [r7, #16]

	// Copy data into calc_data
	for (i = 0; i < data_length; i++) {
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
 800075a:	e034      	b.n	80007c6 <calc_CRC+0xde>
		calc_data[i] = data[i];
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	7819      	ldrb	r1, [r3, #0]
 8000764:	693a      	ldr	r2, [r7, #16]
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	4413      	add	r3, r2
 800076a:	460a      	mov	r2, r1
 800076c:	701a      	strb	r2, [r3, #0]
		// Iterate over each byte of data
		for (j = 0; j < 8; j++) {
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
 8000772:	e022      	b.n	80007ba <calc_CRC+0xd2>
			w = (crcReg ^ calc_data[i]) & 0x0001; // XOR the LSB of crcReg with the LSB of calc_data
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	4413      	add	r3, r2
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b29a      	uxth	r2, r3
 800077e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000780:	4053      	eors	r3, r2
 8000782:	b29b      	uxth	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	81fb      	strh	r3, [r7, #14]
			crcReg = crcReg >> 1;			// Right-shift the crcReg by 1 bit
 800078a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (w == 1) {
 8000790:	89fb      	ldrh	r3, [r7, #14]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d103      	bne.n	800079e <calc_CRC+0xb6>
				crcReg = crcReg ^ calc;	// If w is 1, XOR the crcReg with the polynomial
 8000796:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000798:	8b7b      	ldrh	r3, [r7, #26]
 800079a:	4053      	eors	r3, r2
 800079c:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			calc_data[i] = calc_data[i] >> 1;// Right-shift the data byte by 1 bit
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	4413      	add	r3, r2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	085b      	lsrs	r3, r3, #1
 80007a8:	b2d9      	uxtb	r1, r3
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	4413      	add	r3, r2
 80007b0:	460a      	mov	r2, r1
 80007b2:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	3301      	adds	r3, #1
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	2b07      	cmp	r3, #7
 80007be:	ddd9      	ble.n	8000774 <calc_CRC+0x8c>
	for (i = 0; i < data_length; i++) {
 80007c0:	6a3b      	ldr	r3, [r7, #32]
 80007c2:	3301      	adds	r3, #1
 80007c4:	623b      	str	r3, [r7, #32]
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	6a3a      	ldr	r2, [r7, #32]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	dbc6      	blt.n	800075c <calc_CRC+0x74>
		}
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
 80007ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007d0:	43db      	mvns	r3, r3
 80007d2:	84fb      	strh	r3, [r7, #38]	; 0x26
	return crcReg;
 80007d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007d6:	4685      	mov	sp, r0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	372c      	adds	r7, #44	; 0x2c
 80007dc:	46bd      	mov	sp, r7
 80007de:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80007e2:	4770      	bx	lr
 80007e4:	20000001 	.word	0x20000001

080007e8 <radioTxData>:

void radioTxData() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	tx_cmd[0] = 0x42;
 80007ec:	4b22      	ldr	r3, [pc, #136]	; (8000878 <radioTxData+0x90>)
 80007ee:	2242      	movs	r2, #66	; 0x42
 80007f0:	701a      	strb	r2, [r3, #0]
	tx_cmd[1] = 0x4D;
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <radioTxData+0x90>)
 80007f4:	224d      	movs	r2, #77	; 0x4d
 80007f6:	705a      	strb	r2, [r3, #1]

	//getSoilSensorData();
	tx_cmd[2] = 0x01; 		       //gst data (GST ID)
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <radioTxData+0x90>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	709a      	strb	r2, [r3, #2]
	//tx_cmd[3] = read_soil_value >> 8 & 0xff; 	  //gst DATA (SOIL SENSOR - MSB)
	//tx_cmd[4] = read_soil_value & 0xff;     //gst data (SOIL SENSOR LSB)

	tx_cmd[3] = 0x1A; 	  //gst DATA (SOIL SENSOR - MSB)
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <radioTxData+0x90>)
 8000800:	221a      	movs	r2, #26
 8000802:	70da      	strb	r2, [r3, #3]
	tx_cmd[4] = 0x23;     //gst data (SOIL SENSOR LSB)
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <radioTxData+0x90>)
 8000806:	2223      	movs	r2, #35	; 0x23
 8000808:	711a      	strb	r2, [r3, #4]

	tx_cmd[5] = 0x33;    //gst data
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <radioTxData+0x90>)
 800080c:	2233      	movs	r2, #51	; 0x33
 800080e:	715a      	strb	r2, [r3, #5]
	tx_cmd[6] = 0x44;
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <radioTxData+0x90>)
 8000812:	2244      	movs	r2, #68	; 0x44
 8000814:	719a      	strb	r2, [r3, #6]
	tx_cmd[7] = 0x55;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <radioTxData+0x90>)
 8000818:	2255      	movs	r2, #85	; 0x55
 800081a:	71da      	strb	r2, [r3, #7]
	tx_cmd[8] = 0x66;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <radioTxData+0x90>)
 800081e:	2266      	movs	r2, #102	; 0x66
 8000820:	721a      	strb	r2, [r3, #8]
	tx_cmd[9] = 0x77;
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <radioTxData+0x90>)
 8000824:	2277      	movs	r2, #119	; 0x77
 8000826:	725a      	strb	r2, [r3, #9]
	tx_cmd[10] = 0x88;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <radioTxData+0x90>)
 800082a:	2288      	movs	r2, #136	; 0x88
 800082c:	729a      	strb	r2, [r3, #10]
	tx_cmd[11] = 0x99;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <radioTxData+0x90>)
 8000830:	2299      	movs	r2, #153	; 0x99
 8000832:	72da      	strb	r2, [r3, #11]
	tx_cmd[12] = 0x38;
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <radioTxData+0x90>)
 8000836:	2238      	movs	r2, #56	; 0x38
 8000838:	731a      	strb	r2, [r3, #12]
	tx_cmd[13] = 0xA7;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <radioTxData+0x90>)
 800083c:	22a7      	movs	r2, #167	; 0xa7
 800083e:	735a      	strb	r2, [r3, #13]
	crc = 0;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <radioTxData+0x94>)
 8000842:	2200      	movs	r2, #0
 8000844:	801a      	strh	r2, [r3, #0]
	crc = calc_CRC(tx_cmd, DATA_SIZE);
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <radioTxData+0x98>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4619      	mov	r1, r3
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <radioTxData+0x90>)
 800084e:	f7ff ff4b 	bl	80006e8 <calc_CRC>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <radioTxData+0x94>)
 8000858:	801a      	strh	r2, [r3, #0]
	tx_cmd[14] = crc >> 8;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <radioTxData+0x94>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	0a1b      	lsrs	r3, r3, #8
 8000860:	b29b      	uxth	r3, r3
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <radioTxData+0x90>)
 8000866:	739a      	strb	r2, [r3, #14]
	tx_cmd[15] = crc;
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <radioTxData+0x94>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b02      	ldr	r3, [pc, #8]	; (8000878 <radioTxData+0x90>)
 8000870:	73da      	strb	r2, [r3, #15]
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200002e4 	.word	0x200002e4
 800087c:	20000308 	.word	0x20000308
 8000880:	20000001 	.word	0x20000001

08000884 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800088a:	f000 ff29 	bl	80016e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800088e:	f000 f8e3 	bl	8000a58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000892:	f000 fa8d 	bl	8000db0 <MX_GPIO_Init>
	MX_SubGHz_Phy_Init();
 8000896:	f009 f9da 	bl	8009c4e <MX_SubGHz_Phy_Init>
	MX_TIM1_Init();
 800089a:	f000 f94f 	bl	8000b3c <MX_TIM1_Init>
	MX_TIM2_Init();
 800089e:	f000 f9a1 	bl	8000be4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80008a2:	f000 f9ed 	bl	8000c80 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80008a6:	f000 fa37 	bl	8000d18 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 80008aa:	4857      	ldr	r0, [pc, #348]	; (8000a08 <main+0x184>)
 80008ac:	f003 fb04 	bl	8003eb8 <HAL_TIM_Base_Start>

	pkt_params.PacketType = PACKET_TYPE_GFSK;
 80008b0:	4b56      	ldr	r3, [pc, #344]	; (8000a0c <main+0x188>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = PAYLOAD_LENGTH;
 80008b6:	4b55      	ldr	r3, [pc, #340]	; (8000a0c <main+0x188>)
 80008b8:	2210      	movs	r2, #16
 80008ba:	721a      	strb	r2, [r3, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 80008bc:	4b53      	ldr	r3, [pc, #332]	; (8000a0c <main+0x188>)
 80008be:	2208      	movs	r2, #8
 80008c0:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80008c2:	4b52      	ldr	r3, [pc, #328]	; (8000a0c <main+0x188>)
 80008c4:	2204      	movs	r2, #4
 80008c6:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80008c8:	4b50      	ldr	r3, [pc, #320]	; (8000a0c <main+0x188>)
 80008ca:	2218      	movs	r2, #24
 80008cc:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80008ce:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <main+0x188>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80008d4:	4b4d      	ldr	r3, [pc, #308]	; (8000a0c <main+0x188>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80008da:	4b4c      	ldr	r3, [pc, #304]	; (8000a0c <main+0x188>)
 80008dc:	22f2      	movs	r2, #242	; 0xf2
 80008de:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80008e0:	4b4a      	ldr	r3, [pc, #296]	; (8000a0c <main+0x188>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	729a      	strb	r2, [r3, #10]

	mod_params.PacketType = PACKET_TYPE_GFSK;
 80008e6:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <main+0x18c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 80008ec:	4b48      	ldr	r3, [pc, #288]	; (8000a10 <main+0x18c>)
 80008ee:	220d      	movs	r2, #13
 80008f0:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR;
 80008f2:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <main+0x18c>)
 80008f4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80008f8:	605a      	str	r2, [r3, #4]
	mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV;
 80008fa:	4b45      	ldr	r3, [pc, #276]	; (8000a10 <main+0x18c>)
 80008fc:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8000900:	609a      	str	r2, [r3, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000902:	4b43      	ldr	r3, [pc, #268]	; (8000a10 <main+0x18c>)
 8000904:	220b      	movs	r2, #11
 8000906:	731a      	strb	r2, [r3, #12]

	SUBGRF_Init(DioIrqHndlr);
 8000908:	4842      	ldr	r0, [pc, #264]	; (8000a14 <main+0x190>)
 800090a:	f007 ff57 	bl	80087bc <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800090e:	2100      	movs	r1, #0
 8000910:	2000      	movs	r0, #0
 8000912:	f008 fdbf 	bl	8009494 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(tx_cmd, PAYLOAD_LENGTH);
 8000916:	2110      	movs	r1, #16
 8000918:	483f      	ldr	r0, [pc, #252]	; (8000a18 <main+0x194>)
 800091a:	f007 ffa1 	bl	8008860 <SUBGRF_SetPayload>
	SUBGRF_SetPacketParams(&pkt_params);
 800091e:	483b      	ldr	r0, [pc, #236]	; (8000a0c <main+0x188>)
 8000920:	f008 fd1a 	bl	8009358 <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000924:	4a3d      	ldr	r2, [pc, #244]	; (8000a1c <main+0x198>)
 8000926:	463b      	mov	r3, r7
 8000928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800092c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000930:	463b      	mov	r3, r7
 8000932:	4618      	mov	r0, r3
 8000934:	f007 ffd9 	bl	80088ea <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000938:	f240 10ff 	movw	r0, #511	; 0x1ff
 800093c:	f008 f824 	bl	8008988 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 8000940:	4837      	ldr	r0, [pc, #220]	; (8000a20 <main+0x19c>)
 8000942:	f008 fafd 	bl	8008f40 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000946:	2301      	movs	r3, #1
 8000948:	2200      	movs	r2, #0
 800094a:	2102      	movs	r1, #2
 800094c:	2002      	movs	r0, #2
 800094e:	f008 fa79 	bl	8008e44 <SUBGRF_SetPaConfig>
	//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 8000952:	2206      	movs	r2, #6
 8000954:	210e      	movs	r1, #14
 8000956:	2001      	movs	r0, #1
 8000958:	f008 fb5e 	bl	8009018 <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 800095c:	482c      	ldr	r0, [pc, #176]	; (8000a10 <main+0x18c>)
 800095e:	f008 fc29 	bl	80091b4 <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 8000962:	2300      	movs	r3, #0
 8000964:	2200      	movs	r2, #0
 8000966:	f240 210f 	movw	r1, #527	; 0x20f
 800096a:	f240 200f 	movw	r0, #527	; 0x20f
 800096e:	f008 fa8b 	bl	8008e88 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	myPrintf("\n########## Test code: BEGIN ##########\r\n");
 8000972:	482c      	ldr	r0, [pc, #176]	; (8000a24 <main+0x1a0>)
 8000974:	f7ff fdfc 	bl	8000570 <myPrintf>
	myPrintf("########## UART1 (PA9_TX, PA10_RX): 		##########\r\n");
 8000978:	482b      	ldr	r0, [pc, #172]	; (8000a28 <main+0x1a4>)
 800097a:	f7ff fdf9 	bl	8000570 <myPrintf>
	myPrintf("Pin Description: Debug COM_MCU\r\n");
 800097e:	482b      	ldr	r0, [pc, #172]	; (8000a2c <main+0x1a8>)
 8000980:	f7ff fdf6 	bl	8000570 <myPrintf>
	myPrintf("If this message pop up then debug COM MCU is working!!!\r\n");
 8000984:	482a      	ldr	r0, [pc, #168]	; (8000a30 <main+0x1ac>)
 8000986:	f7ff fdf3 	bl	8000570 <myPrintf>
	myPrintf("__________________________________________________\r\n");
 800098a:	482a      	ldr	r0, [pc, #168]	; (8000a34 <main+0x1b0>)
 800098c:	f7ff fdf0 	bl	8000570 <myPrintf>
	myPrintf("________________Waiting to receive COM Command____________\r\n");
 8000990:	4829      	ldr	r0, [pc, #164]	; (8000a38 <main+0x1b4>)
 8000992:	f7ff fded 	bl	8000570 <myPrintf>
	myPrintf("SEND 'GFSKEN' to test GFSK'\r\n");
 8000996:	4829      	ldr	r0, [pc, #164]	; (8000a3c <main+0x1b8>)
 8000998:	f7ff fdea 	bl	8000570 <myPrintf>
	myPrintf("__________________________________________________\r\n");
 800099c:	4825      	ldr	r0, [pc, #148]	; (8000a34 <main+0x1b0>)
 800099e:	f7ff fde7 	bl	8000570 <myPrintf>

	HAL_UART_Receive_IT(&huart1, rxCMD, 6);
 80009a2:	2206      	movs	r2, #6
 80009a4:	4926      	ldr	r1, [pc, #152]	; (8000a40 <main+0x1bc>)
 80009a6:	4827      	ldr	r0, [pc, #156]	; (8000a44 <main+0x1c0>)
 80009a8:	f003 ffb2 	bl	8004910 <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b2:	4825      	ldr	r0, [pc, #148]	; (8000a48 <main+0x1c4>)
 80009b4:	f001 fa28 	bl	8001e08 <HAL_GPIO_WritePin>
		delay_us(1000000);
 80009b8:	4824      	ldr	r0, [pc, #144]	; (8000a4c <main+0x1c8>)
 80009ba:	f7ff fdbf 	bl	800053c <delay_us>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c4:	4820      	ldr	r0, [pc, #128]	; (8000a48 <main+0x1c4>)
 80009c6:	f001 fa1f 	bl	8001e08 <HAL_GPIO_WritePin>
		delay_us(1000000);
 80009ca:	4820      	ldr	r0, [pc, #128]	; (8000a4c <main+0x1c8>)
 80009cc:	f7ff fdb6 	bl	800053c <delay_us>

		if (TX_FLAG) {
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <main+0x1cc>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d013      	beq.n	8000a00 <main+0x17c>
			radioTxData();
 80009d8:	f7ff ff06 	bl	80007e8 <radioTxData>
			SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 80009dc:	4810      	ldr	r0, [pc, #64]	; (8000a20 <main+0x19c>)
 80009de:	f008 faaf 	bl	8008f40 <SUBGRF_SetRfFrequency>
			//SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX); /*Set RF switch*/
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 80009e2:	2101      	movs	r1, #1
 80009e4:	2001      	movs	r0, #1
 80009e6:	f008 fef3 	bl	80097d0 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_cmd, 16, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2110      	movs	r1, #16
 80009ee:	480a      	ldr	r0, [pc, #40]	; (8000a18 <main+0x194>)
 80009f0:	f007 ff68 	bl	80088c4 <SUBGRF_SendPayload>
			counter++;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <main+0x1d0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <main+0x1d0>)
 80009fe:	701a      	strb	r2, [r3, #0]
		}

		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8000a00:	f009 f92d 	bl	8009c5e <MX_SubGHz_Phy_Process>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000a04:	e7d2      	b.n	80009ac <main+0x128>
 8000a06:	bf00      	nop
 8000a08:	20000168 	.word	0x20000168
 8000a0c:	200000e0 	.word	0x200000e0
 8000a10:	200000f4 	.word	0x200000f4
 8000a14:	08000fd1 	.word	0x08000fd1
 8000a18:	200002e4 	.word	0x200002e4
 8000a1c:	0800ae80 	.word	0x0800ae80
 8000a20:	17fbc158 	.word	0x17fbc158
 8000a24:	0800ad28 	.word	0x0800ad28
 8000a28:	0800ad54 	.word	0x0800ad54
 8000a2c:	0800ad88 	.word	0x0800ad88
 8000a30:	0800adac 	.word	0x0800adac
 8000a34:	0800ade8 	.word	0x0800ade8
 8000a38:	0800ae20 	.word	0x0800ae20
 8000a3c:	0800ae60 	.word	0x0800ae60
 8000a40:	200002dc 	.word	0x200002dc
 8000a44:	200001b4 	.word	0x200001b4
 8000a48:	48000400 	.word	0x48000400
 8000a4c:	000f4240 	.word	0x000f4240
 8000a50:	20000370 	.word	0x20000370
 8000a54:	20000306 	.word	0x20000306

08000a58 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09a      	sub	sp, #104	; 0x68
 8000a5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	2248      	movs	r2, #72	; 0x48
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f009 fcd0 	bl	800a40c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7e:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <SystemClock_Config+0xbc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <SystemClock_Config+0xbc>)
 8000a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <SystemClock_Config+0xbc>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8000a9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aac:	2303      	movs	r3, #3
 8000aae:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000abc:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000abe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ac2:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ac8:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fc84 	bl	80023dc <HAL_RCC_OscConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x86>
		Error_Handler();
 8000ada:	f000 fb97 	bl	800120c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8000ade:	234f      	movs	r3, #79	; 0x4f
 8000ae0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2102      	movs	r1, #2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fff0 	bl	8002ae0 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xb2>
		Error_Handler();
 8000b06:	f000 fb81 	bl	800120c <Error_Handler>
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	3768      	adds	r7, #104	; 0x68
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	58000400 	.word	0x58000400

08000b18 <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_SUBGHZ_Init+0x20>)
 8000b1e:	2210      	movs	r2, #16
 8000b20:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_SUBGHZ_Init+0x20>)
 8000b24:	f002 fd50 	bl	80035c8 <HAL_SUBGHZ_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 8000b2e:	f000 fb6d 	bl	800120c <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000110 	.word	0x20000110

08000b3c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <MX_TIM1_Init+0xa0>)
 8000b5c:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <MX_TIM1_Init+0xa4>)
 8000b5e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48 - 1;
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <MX_TIM1_Init+0xa0>)
 8000b62:	222f      	movs	r2, #47	; 0x2f
 8000b64:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_TIM1_Init+0xa0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <MX_TIM1_Init+0xa0>)
 8000b6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b72:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_TIM1_Init+0xa0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_TIM1_Init+0xa0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_TIM1_Init+0xa0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <MX_TIM1_Init+0xa0>)
 8000b88:	f003 f93e 	bl	8003e08 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000b92:	f000 fb3b 	bl	800120c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <MX_TIM1_Init+0xa0>)
 8000ba4:	f003 fb5d 	bl	8004262 <HAL_TIM_ConfigClockSource>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM1_Init+0x76>
		Error_Handler();
 8000bae:	f000 fb2d 	bl	800120c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_TIM1_Init+0xa0>)
 8000bc4:	f003 fd34 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000bce:	f000 fb1d 	bl	800120c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000011c 	.word	0x2000011c
 8000be0:	40012c00 	.word	0x40012c00

08000be4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c08:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 48 - 1;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c0c:	222f      	movs	r2, #47	; 0x2f
 8000c0e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000001 - 1;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c18:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <MX_TIM2_Init+0x98>)
 8000c1a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000c28:	4813      	ldr	r0, [pc, #76]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c2a:	f003 f8ed 	bl	8003e08 <HAL_TIM_Base_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000c34:	f000 faea 	bl	800120c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c46:	f003 fb0c 	bl	8004262 <HAL_TIM_ConfigClockSource>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000c50:	f000 fadc 	bl	800120c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_TIM2_Init+0x94>)
 8000c62:	f003 fce5 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000c6c:	f000 face 	bl	800120c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000168 	.word	0x20000168
 8000c7c:	000f4240 	.word	0x000f4240

08000c80 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <MX_USART1_UART_Init+0x94>)
 8000c88:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000cc8:	4811      	ldr	r0, [pc, #68]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cca:	f003 fd4b 	bl	8004764 <HAL_UART_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000cd4:	f000 fa9a 	bl	800120c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cdc:	f005 fd07 	bl	80066ee <HAL_UARTEx_SetTxFifoThreshold>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000ce6:	f000 fa91 	bl	800120c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000cea:	2100      	movs	r1, #0
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cee:	f005 fd3c 	bl	800676a <HAL_UARTEx_SetRxFifoThreshold>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000cf8:	f000 fa88 	bl	800120c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cfe:	f005 fcbe 	bl	800667e <HAL_UARTEx_DisableFifoMode>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8000d08:	f000 fa80 	bl	800120c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200001b4 	.word	0x200001b4
 8000d14:	40013800 	.word	0x40013800

08000d18 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d1e:	4a23      	ldr	r2, [pc, #140]	; (8000dac <MX_USART2_UART_Init+0x94>)
 8000d20:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000d60:	4811      	ldr	r0, [pc, #68]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d62:	f003 fcff 	bl	8004764 <HAL_UART_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000d6c:	f000 fa4e 	bl	800120c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000d70:	2100      	movs	r1, #0
 8000d72:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d74:	f005 fcbb 	bl	80066ee <HAL_UARTEx_SetTxFifoThreshold>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000d7e:	f000 fa45 	bl	800120c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d86:	f005 fcf0 	bl	800676a <HAL_UARTEx_SetRxFifoThreshold>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000d90:	f000 fa3c 	bl	800120c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d96:	f005 fc72 	bl	800667e <HAL_UARTEx_DisableFifoMode>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8000da0:	f000 fa34 	bl	800120c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000248 	.word	0x20000248
 8000dac:	40004400 	.word	0x40004400

08000db0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fc0d 	bl	80005e4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f7ff fc0a 	bl	80005e4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd0:	2004      	movs	r0, #4
 8000dd2:	f7ff fc07 	bl	80005e4 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000ddc:	481f      	ldr	r0, [pc, #124]	; (8000e5c <MX_GPIO_Init+0xac>)
 8000dde:	f001 f813 	bl	8001e08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 8000de2:	2200      	movs	r2, #0
 8000de4:	2138      	movs	r1, #56	; 0x38
 8000de6:	481e      	ldr	r0, [pc, #120]	; (8000e60 <MX_GPIO_Init+0xb0>)
 8000de8:	f001 f80e 	bl	8001e08 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8000dec:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000df0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4816      	ldr	r0, [pc, #88]	; (8000e5c <MX_GPIO_Init+0xac>)
 8000e04:	f000 fea0 	bl	8001b48 <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 8000e08:	2338      	movs	r3, #56	; 0x38
 8000e0a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4810      	ldr	r0, [pc, #64]	; (8000e60 <MX_GPIO_Init+0xb0>)
 8000e1e:	f000 fe93 	bl	8001b48 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin B2_Pin */
	GPIO_InitStruct.Pin = B1_Pin | B2_Pin;
 8000e22:	2303      	movs	r3, #3
 8000e24:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e2a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f000 fe86 	bl	8001b48 <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 8000e3c:	2340      	movs	r3, #64	; 0x40
 8000e3e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e44:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_GPIO_Init+0xb0>)
 8000e50:	f000 fe7a 	bl	8001b48 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	48000400 	.word	0x48000400
 8000e60:	48000800 	.word	0x48000800

08000e64 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e64:	b5b0      	push	{r4, r5, r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af04      	add	r7, sp, #16
 8000e6a:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a3d      	ldr	r2, [pc, #244]	; (8000f64 <HAL_UART_RxCpltCallback+0x100>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d172      	bne.n	8000f5a <HAL_UART_RxCpltCallback+0xf6>
		sprintf(temp_rx, "%c%c%c%c%c%c", rxCMD[0], rxCMD[1], rxCMD[2], rxCMD[3],
 8000e74:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <HAL_UART_RxCpltCallback+0x104>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461c      	mov	r4, r3
 8000e7a:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <HAL_UART_RxCpltCallback+0x104>)
 8000e7c:	785b      	ldrb	r3, [r3, #1]
 8000e7e:	461d      	mov	r5, r3
 8000e80:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <HAL_UART_RxCpltCallback+0x104>)
 8000e82:	789b      	ldrb	r3, [r3, #2]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <HAL_UART_RxCpltCallback+0x104>)
 8000e88:	78db      	ldrb	r3, [r3, #3]
 8000e8a:	4619      	mov	r1, r3
				rxCMD[4], rxCMD[5]);
 8000e8c:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <HAL_UART_RxCpltCallback+0x104>)
 8000e8e:	791b      	ldrb	r3, [r3, #4]
		sprintf(temp_rx, "%c%c%c%c%c%c", rxCMD[0], rxCMD[1], rxCMD[2], rxCMD[3],
 8000e90:	4618      	mov	r0, r3
				rxCMD[4], rxCMD[5]);
 8000e92:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <HAL_UART_RxCpltCallback+0x104>)
 8000e94:	795b      	ldrb	r3, [r3, #5]
		sprintf(temp_rx, "%c%c%c%c%c%c", rxCMD[0], rxCMD[1], rxCMD[2], rxCMD[3],
 8000e96:	9303      	str	r3, [sp, #12]
 8000e98:	9002      	str	r0, [sp, #8]
 8000e9a:	9101      	str	r1, [sp, #4]
 8000e9c:	9200      	str	r2, [sp, #0]
 8000e9e:	462b      	mov	r3, r5
 8000ea0:	4622      	mov	r2, r4
 8000ea2:	4932      	ldr	r1, [pc, #200]	; (8000f6c <HAL_UART_RxCpltCallback+0x108>)
 8000ea4:	4832      	ldr	r0, [pc, #200]	; (8000f70 <HAL_UART_RxCpltCallback+0x10c>)
 8000ea6:	f009 fa57 	bl	800a358 <siprintf>
		if (strcmp(temp_rx, "GFSKEN") == 0) {
 8000eaa:	4932      	ldr	r1, [pc, #200]	; (8000f74 <HAL_UART_RxCpltCallback+0x110>)
 8000eac:	4830      	ldr	r0, [pc, #192]	; (8000f70 <HAL_UART_RxCpltCallback+0x10c>)
 8000eae:	f7ff f967 	bl	8000180 <strcmp>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d14b      	bne.n	8000f50 <HAL_UART_RxCpltCallback+0xec>
			ack = 3;
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <HAL_UART_RxCpltCallback+0x114>)
 8000eba:	2203      	movs	r2, #3
 8000ebc:	701a      	strb	r2, [r3, #0]
			myPrintf("\n########## Test code: BEGIN ##########\r\n");
 8000ebe:	482f      	ldr	r0, [pc, #188]	; (8000f7c <HAL_UART_RxCpltCallback+0x118>)
 8000ec0:	f7ff fb56 	bl	8000570 <myPrintf>
			myPrintf("########## Low Power Radio: 	##########\r\n");
 8000ec4:	482e      	ldr	r0, [pc, #184]	; (8000f80 <HAL_UART_RxCpltCallback+0x11c>)
 8000ec6:	f7ff fb53 	bl	8000570 <myPrintf>
			myPrintf("########## COMMUNICATION PARAMETERS: 		##########\r\n");
 8000eca:	482e      	ldr	r0, [pc, #184]	; (8000f84 <HAL_UART_RxCpltCallback+0x120>)
 8000ecc:	f7ff fb50 	bl	8000570 <myPrintf>
			myPrintf("Modulation: GFSK PACKET\r\n");
 8000ed0:	482d      	ldr	r0, [pc, #180]	; (8000f88 <HAL_UART_RxCpltCallback+0x124>)
 8000ed2:	f7ff fb4d 	bl	8000570 <myPrintf>
			myPrintf(
 8000ed6:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <HAL_UART_RxCpltCallback+0x128>)
 8000ed8:	492d      	ldr	r1, [pc, #180]	; (8000f90 <HAL_UART_RxCpltCallback+0x12c>)
 8000eda:	482e      	ldr	r0, [pc, #184]	; (8000f94 <HAL_UART_RxCpltCallback+0x130>)
 8000edc:	f7ff fb48 	bl	8000570 <myPrintf>
					"FREQUENCY MODS: UPLINK FREQ: %lu\r\n    DOWNLINK FREQ: %lu\r\n",
					FREQ_402_MHZ, FREQ_401_MHZ);
			myPrintf(
 8000ee0:	230e      	movs	r3, #14
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	2102      	movs	r1, #2
 8000eea:	482b      	ldr	r0, [pc, #172]	; (8000f98 <HAL_UART_RxCpltCallback+0x134>)
 8000eec:	f7ff fb40 	bl	8000570 <myPrintf>
					"POWER CONFIG:\r\n    PA_DUTY_CYCLE : %x,    HP_MAX: %x,\n\r    PA_SEL : %x,    POWER TX: %u dBm\n\r",
					PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_UART_RxCpltCallback+0x138>)
 8000ef2:	7b5b      	ldrb	r3, [r3, #13]
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	482a      	ldr	r0, [pc, #168]	; (8000fa0 <HAL_UART_RxCpltCallback+0x13c>)
 8000ef8:	f7ff fb3a 	bl	8000570 <myPrintf>
			myPrintf("Packet Type: 			%d\n\r", pkt_params.PacketType);
 8000efc:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <HAL_UART_RxCpltCallback+0x140>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	4829      	ldr	r0, [pc, #164]	; (8000fa8 <HAL_UART_RxCpltCallback+0x144>)
 8000f04:	f7ff fb34 	bl	8000570 <myPrintf>
			myPrintf("PayloadLength: 		%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <HAL_UART_RxCpltCallback+0x140>)
 8000f0a:	7a1b      	ldrb	r3, [r3, #8]
			myPrintf("PayloadLength: 		%d\n\r",
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4827      	ldr	r0, [pc, #156]	; (8000fac <HAL_UART_RxCpltCallback+0x148>)
 8000f10:	f7ff fb2e 	bl	8000570 <myPrintf>
			myPrintf("PreambleLength: 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <HAL_UART_RxCpltCallback+0x140>)
 8000f16:	885b      	ldrh	r3, [r3, #2]
			myPrintf("PreambleLength: 		%d\n\r",
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4825      	ldr	r0, [pc, #148]	; (8000fb0 <HAL_UART_RxCpltCallback+0x14c>)
 8000f1c:	f7ff fb28 	bl	8000570 <myPrintf>
			myPrintf("HeaderType: 			%d\n\r",
					pkt_params.Params.Gfsk.HeaderType);
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_UART_RxCpltCallback+0x140>)
 8000f22:	79db      	ldrb	r3, [r3, #7]
			myPrintf("HeaderType: 			%d\n\r",
 8000f24:	4619      	mov	r1, r3
 8000f26:	4823      	ldr	r0, [pc, #140]	; (8000fb4 <HAL_UART_RxCpltCallback+0x150>)
 8000f28:	f7ff fb22 	bl	8000570 <myPrintf>

			myPrintf(
 8000f2c:	4822      	ldr	r0, [pc, #136]	; (8000fb8 <HAL_UART_RxCpltCallback+0x154>)
 8000f2e:	f7ff fb1f 	bl	8000570 <myPrintf>
					"If this message pop up then track in other NucleoWL55JC2 Receiver\r\n");
			myPrintf("------------- Wait for Test Complete --------------\r\n");
 8000f32:	4822      	ldr	r0, [pc, #136]	; (8000fbc <HAL_UART_RxCpltCallback+0x158>)
 8000f34:	f7ff fb1c 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8000f38:	4821      	ldr	r0, [pc, #132]	; (8000fc0 <HAL_UART_RxCpltCallback+0x15c>)
 8000f3a:	f7ff fb19 	bl	8000570 <myPrintf>
			myPrintf(
 8000f3e:	4821      	ldr	r0, [pc, #132]	; (8000fc4 <HAL_UART_RxCpltCallback+0x160>)
 8000f40:	f7ff fb16 	bl	8000570 <myPrintf>
					"\n\rTo stop the testing first complete transmission and reception:  \r\n");
			myPrintf("##### The Transmitter will transmits packets now. \r\n");
 8000f44:	4820      	ldr	r0, [pc, #128]	; (8000fc8 <HAL_UART_RxCpltCallback+0x164>)
 8000f46:	f7ff fb13 	bl	8000570 <myPrintf>

			HAL_TIM_Base_Start_IT(&htim1);
 8000f4a:	4820      	ldr	r0, [pc, #128]	; (8000fcc <HAL_UART_RxCpltCallback+0x168>)
 8000f4c:	f003 f81e 	bl	8003f8c <HAL_TIM_Base_Start_IT>
		}
		HAL_UART_Receive_IT(&huart1, rxCMD, 6);
 8000f50:	2206      	movs	r2, #6
 8000f52:	4905      	ldr	r1, [pc, #20]	; (8000f68 <HAL_UART_RxCpltCallback+0x104>)
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <HAL_UART_RxCpltCallback+0x100>)
 8000f56:	f003 fcdb 	bl	8004910 <HAL_UART_Receive_IT>
	}
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bdb0      	pop	{r4, r5, r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200001b4 	.word	0x200001b4
 8000f68:	200002dc 	.word	0x200002dc
 8000f6c:	0800ae88 	.word	0x0800ae88
 8000f70:	2000030c 	.word	0x2000030c
 8000f74:	0800ae98 	.word	0x0800ae98
 8000f78:	20000304 	.word	0x20000304
 8000f7c:	0800ad28 	.word	0x0800ad28
 8000f80:	0800aea0 	.word	0x0800aea0
 8000f84:	0800aecc 	.word	0x0800aecc
 8000f88:	0800af00 	.word	0x0800af00
 8000f8c:	17ec7f18 	.word	0x17ec7f18
 8000f90:	17fbc158 	.word	0x17fbc158
 8000f94:	0800af1c 	.word	0x0800af1c
 8000f98:	0800af58 	.word	0x0800af58
 8000f9c:	200000f4 	.word	0x200000f4
 8000fa0:	0800afb8 	.word	0x0800afb8
 8000fa4:	200000e0 	.word	0x200000e0
 8000fa8:	0800afd4 	.word	0x0800afd4
 8000fac:	0800afec 	.word	0x0800afec
 8000fb0:	0800b004 	.word	0x0800b004
 8000fb4:	0800b01c 	.word	0x0800b01c
 8000fb8:	0800b030 	.word	0x0800b030
 8000fbc:	0800b074 	.word	0x0800b074
 8000fc0:	0800ade8 	.word	0x0800ade8
 8000fc4:	0800b0ac 	.word	0x0800b0ac
 8000fc8:	0800b0f4 	.word	0x0800b0f4
 8000fcc:	2000011c 	.word	0x2000011c

08000fd0 <DioIrqHndlr>:

void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
	if (radioIrq == IRQ_TX_DONE) {
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	f040 8087 	bne.w	80010f0 <DioIrqHndlr+0x120>
		TX_FLAG = 0;
 8000fe2:	4b66      	ldr	r3, [pc, #408]	; (800117c <DioIrqHndlr+0x1ac>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
		myPrintf("\n\r Test Command Transmitted Successful:  \r");
 8000fe8:	4865      	ldr	r0, [pc, #404]	; (8001180 <DioIrqHndlr+0x1b0>)
 8000fea:	f7ff fac1 	bl	8000570 <myPrintf>
		for (int i = 0; i < 16; i++) {
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e00a      	b.n	800100a <DioIrqHndlr+0x3a>
			myPrintf(" %02x", tx_cmd[i]);
 8000ff4:	4a63      	ldr	r2, [pc, #396]	; (8001184 <DioIrqHndlr+0x1b4>)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4862      	ldr	r0, [pc, #392]	; (8001188 <DioIrqHndlr+0x1b8>)
 8001000:	f7ff fab6 	bl	8000570 <myPrintf>
		for (int i = 0; i < 16; i++) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	ddf1      	ble.n	8000ff4 <DioIrqHndlr+0x24>
		}
		myPrintf("\n\n");
 8001010:	485e      	ldr	r0, [pc, #376]	; (800118c <DioIrqHndlr+0x1bc>)
 8001012:	f7ff faad 	bl	8000570 <myPrintf>
		pkt_id++;
 8001016:	4b5e      	ldr	r3, [pc, #376]	; (8001190 <DioIrqHndlr+0x1c0>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <DioIrqHndlr+0x1c0>)
 8001020:	701a      	strb	r2, [r3, #0]
		if (pkt_id > 5) {
 8001022:	4b5b      	ldr	r3, [pc, #364]	; (8001190 <DioIrqHndlr+0x1c0>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b05      	cmp	r3, #5
 8001028:	d962      	bls.n	80010f0 <DioIrqHndlr+0x120>
			pkt_id = 0;
 800102a:	4b59      	ldr	r3, [pc, #356]	; (8001190 <DioIrqHndlr+0x1c0>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim1);
 8001030:	4858      	ldr	r0, [pc, #352]	; (8001194 <DioIrqHndlr+0x1c4>)
 8001032:	f002 ff85 	bl	8003f40 <HAL_TIM_Base_Stop>
			myPrintf("\n\r Testing, Wait to receive:  \r\n");
 8001036:	4858      	ldr	r0, [pc, #352]	; (8001198 <DioIrqHndlr+0x1c8>)
 8001038:	f7ff fa9a 	bl	8000570 <myPrintf>

			myPrintf("\n########## Receive and Transmits ##########\r\n");
 800103c:	4857      	ldr	r0, [pc, #348]	; (800119c <DioIrqHndlr+0x1cc>)
 800103e:	f7ff fa97 	bl	8000570 <myPrintf>
			myPrintf("########## Low Power Radio Receiver: 	##########\r\n");
 8001042:	4857      	ldr	r0, [pc, #348]	; (80011a0 <DioIrqHndlr+0x1d0>)
 8001044:	f7ff fa94 	bl	8000570 <myPrintf>
			myPrintf("########## COMMUNICATION PARAMETERS: 		##########\r\n");
 8001048:	4856      	ldr	r0, [pc, #344]	; (80011a4 <DioIrqHndlr+0x1d4>)
 800104a:	f7ff fa91 	bl	8000570 <myPrintf>
			myPrintf("Modulation: GFSK PACKET\r\n");
 800104e:	4856      	ldr	r0, [pc, #344]	; (80011a8 <DioIrqHndlr+0x1d8>)
 8001050:	f7ff fa8e 	bl	8000570 <myPrintf>
			myPrintf(
 8001054:	4a55      	ldr	r2, [pc, #340]	; (80011ac <DioIrqHndlr+0x1dc>)
 8001056:	4956      	ldr	r1, [pc, #344]	; (80011b0 <DioIrqHndlr+0x1e0>)
 8001058:	4856      	ldr	r0, [pc, #344]	; (80011b4 <DioIrqHndlr+0x1e4>)
 800105a:	f7ff fa89 	bl	8000570 <myPrintf>
					"FREQUENCY MODS: UPLINK FREQ: %lu\r\n    DOWNLINK FREQ: %lu\r\n",
					FREQ_402_MHZ, FREQ_401_MHZ);
			myPrintf(
 800105e:	230e      	movs	r3, #14
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2300      	movs	r3, #0
 8001064:	2202      	movs	r2, #2
 8001066:	2102      	movs	r1, #2
 8001068:	4853      	ldr	r0, [pc, #332]	; (80011b8 <DioIrqHndlr+0x1e8>)
 800106a:	f7ff fa81 	bl	8000570 <myPrintf>
					"POWER CONFIG:\r\n    PA_DUTY_CYCLE : %x,    HP_MAX: %x,\n\r    PA_SEL : %x,    POWER TX: %u dBm\n\r",
					PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <DioIrqHndlr+0x1ec>)
 8001070:	7b5b      	ldrb	r3, [r3, #13]
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
 8001072:	4619      	mov	r1, r3
 8001074:	4852      	ldr	r0, [pc, #328]	; (80011c0 <DioIrqHndlr+0x1f0>)
 8001076:	f7ff fa7b 	bl	8000570 <myPrintf>
			myPrintf("Packet Type: 			%d\n\r", pkt_params.PacketType);
 800107a:	4b52      	ldr	r3, [pc, #328]	; (80011c4 <DioIrqHndlr+0x1f4>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	4851      	ldr	r0, [pc, #324]	; (80011c8 <DioIrqHndlr+0x1f8>)
 8001082:	f7ff fa75 	bl	8000570 <myPrintf>
			myPrintf("PayloadLength: 		%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8001086:	4b4f      	ldr	r3, [pc, #316]	; (80011c4 <DioIrqHndlr+0x1f4>)
 8001088:	7a1b      	ldrb	r3, [r3, #8]
			myPrintf("PayloadLength: 		%d\n\r",
 800108a:	4619      	mov	r1, r3
 800108c:	484f      	ldr	r0, [pc, #316]	; (80011cc <DioIrqHndlr+0x1fc>)
 800108e:	f7ff fa6f 	bl	8000570 <myPrintf>
			myPrintf("PreambleLength: 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8001092:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <DioIrqHndlr+0x1f4>)
 8001094:	885b      	ldrh	r3, [r3, #2]
			myPrintf("PreambleLength: 		%d\n\r",
 8001096:	4619      	mov	r1, r3
 8001098:	484d      	ldr	r0, [pc, #308]	; (80011d0 <DioIrqHndlr+0x200>)
 800109a:	f7ff fa69 	bl	8000570 <myPrintf>
			myPrintf("HeaderType: 			%d\n\r",
					pkt_params.Params.Gfsk.HeaderType);
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <DioIrqHndlr+0x1f4>)
 80010a0:	79db      	ldrb	r3, [r3, #7]
			myPrintf("HeaderType: 			%d\n\r",
 80010a2:	4619      	mov	r1, r3
 80010a4:	484b      	ldr	r0, [pc, #300]	; (80011d4 <DioIrqHndlr+0x204>)
 80010a6:	f7ff fa63 	bl	8000570 <myPrintf>
			myPrintf(
 80010aa:	484b      	ldr	r0, [pc, #300]	; (80011d8 <DioIrqHndlr+0x208>)
 80010ac:	f7ff fa60 	bl	8000570 <myPrintf>
					"--------   If this message pop up then wait to receive   --------\r\n");
			myPrintf("__________________________________________________\r\n");
 80010b0:	484a      	ldr	r0, [pc, #296]	; (80011dc <DioIrqHndlr+0x20c>)
 80010b2:	f7ff fa5d 	bl	8000570 <myPrintf>
			SUBGRF_SetRfFrequency(FREQ_401_MHZ);
 80010b6:	483d      	ldr	r0, [pc, #244]	; (80011ac <DioIrqHndlr+0x1dc>)
 80010b8:	f007 ff42 	bl	8008f40 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80010bc:	2100      	movs	r1, #0
 80010be:	2001      	movs	r0, #1
 80010c0:	f008 fb86 	bl	80097d0 <SUBGRF_SetSwitch>
			SUBGRF_SetRxBoosted(0xFFFFFF);
 80010c4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80010c8:	f007 fd66 	bl	8008b98 <SUBGRF_SetRxBoosted>

			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d2:	4843      	ldr	r0, [pc, #268]	; (80011e0 <DioIrqHndlr+0x210>)
 80010d4:	f000 fe98 	bl	8001e08 <HAL_GPIO_WritePin>
			delay_us(1000000);  // 500ms delay
 80010d8:	4842      	ldr	r0, [pc, #264]	; (80011e4 <DioIrqHndlr+0x214>)
 80010da:	f7ff fa2f 	bl	800053c <delay_us>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e4:	483e      	ldr	r0, [pc, #248]	; (80011e0 <DioIrqHndlr+0x210>)
 80010e6:	f000 fe8f 	bl	8001e08 <HAL_GPIO_WritePin>
			delay_us(1000000);
 80010ea:	483e      	ldr	r0, [pc, #248]	; (80011e4 <DioIrqHndlr+0x214>)
 80010ec:	f7ff fa26 	bl	800053c <delay_us>
		}
	}
	if (radioIrq == IRQ_RX_DONE) {
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d13d      	bne.n	8001172 <DioIrqHndlr+0x1a2>
		pkt_id++;
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <DioIrqHndlr+0x1c0>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <DioIrqHndlr+0x1c0>)
 8001100:	701a      	strb	r2, [r3, #0]
		SUBGRF_GetPayload(rx_cmd, &p_len, PAYLOAD_LENGTH);
 8001102:	2210      	movs	r2, #16
 8001104:	4938      	ldr	r1, [pc, #224]	; (80011e8 <DioIrqHndlr+0x218>)
 8001106:	4839      	ldr	r0, [pc, #228]	; (80011ec <DioIrqHndlr+0x21c>)
 8001108:	f007 fbba 	bl	8008880 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 800110c:	f008 f9d9 	bl	80094c2 <SUBGRF_GetRssiInst>
 8001110:	4603      	mov	r3, r0
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <DioIrqHndlr+0x220>)
 8001116:	701a      	strb	r2, [r3, #0]
		myPrintf("\nGFSK Received\r\n");
 8001118:	4836      	ldr	r0, [pc, #216]	; (80011f4 <DioIrqHndlr+0x224>)
 800111a:	f7ff fa29 	bl	8000570 <myPrintf>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	e00a      	b.n	800113a <DioIrqHndlr+0x16a>
			myPrintf(" %x", rx_cmd[i]);
 8001124:	4a31      	ldr	r2, [pc, #196]	; (80011ec <DioIrqHndlr+0x21c>)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	4832      	ldr	r0, [pc, #200]	; (80011f8 <DioIrqHndlr+0x228>)
 8001130:	f7ff fa1e 	bl	8000570 <myPrintf>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	3301      	adds	r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d9f1      	bls.n	8001124 <DioIrqHndlr+0x154>
		}
		myPrintf("\r\n");
 8001140:	482e      	ldr	r0, [pc, #184]	; (80011fc <DioIrqHndlr+0x22c>)
 8001142:	f7ff fa15 	bl	8000570 <myPrintf>
		if (pkt_id > 5) {
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <DioIrqHndlr+0x1c0>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d911      	bls.n	8001172 <DioIrqHndlr+0x1a2>
			myPrintf("\n\rTesting complete, Receive and Transmit done.  \r\n");
 800114e:	482c      	ldr	r0, [pc, #176]	; (8001200 <DioIrqHndlr+0x230>)
 8001150:	f7ff fa0e 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8001154:	4821      	ldr	r0, [pc, #132]	; (80011dc <DioIrqHndlr+0x20c>)
 8001156:	f7ff fa0b 	bl	8000570 <myPrintf>
			myPrintf(
 800115a:	482a      	ldr	r0, [pc, #168]	; (8001204 <DioIrqHndlr+0x234>)
 800115c:	f7ff fa08 	bl	8000570 <myPrintf>
					"________________Waiting to receive COM Command____________\r\n");
			myPrintf("SEND 'GFSKEN' to test UART2 OBC'\r\n");
 8001160:	4829      	ldr	r0, [pc, #164]	; (8001208 <DioIrqHndlr+0x238>)
 8001162:	f7ff fa05 	bl	8000570 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8001166:	481d      	ldr	r0, [pc, #116]	; (80011dc <DioIrqHndlr+0x20c>)
 8001168:	f7ff fa02 	bl	8000570 <myPrintf>
			pkt_id = 0;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <DioIrqHndlr+0x1c0>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000370 	.word	0x20000370
 8001180:	0800b12c 	.word	0x0800b12c
 8001184:	200002e4 	.word	0x200002e4
 8001188:	0800b158 	.word	0x0800b158
 800118c:	0800b160 	.word	0x0800b160
 8001190:	20000305 	.word	0x20000305
 8001194:	2000011c 	.word	0x2000011c
 8001198:	0800b164 	.word	0x0800b164
 800119c:	0800b188 	.word	0x0800b188
 80011a0:	0800b1b8 	.word	0x0800b1b8
 80011a4:	0800aecc 	.word	0x0800aecc
 80011a8:	0800af00 	.word	0x0800af00
 80011ac:	17ec7f18 	.word	0x17ec7f18
 80011b0:	17fbc158 	.word	0x17fbc158
 80011b4:	0800af1c 	.word	0x0800af1c
 80011b8:	0800af58 	.word	0x0800af58
 80011bc:	200000f4 	.word	0x200000f4
 80011c0:	0800afb8 	.word	0x0800afb8
 80011c4:	200000e0 	.word	0x200000e0
 80011c8:	0800afd4 	.word	0x0800afd4
 80011cc:	0800afec 	.word	0x0800afec
 80011d0:	0800b004 	.word	0x0800b004
 80011d4:	0800b01c 	.word	0x0800b01c
 80011d8:	0800b1ec 	.word	0x0800b1ec
 80011dc:	0800ade8 	.word	0x0800ade8
 80011e0:	48000400 	.word	0x48000400
 80011e4:	000f4240 	.word	0x000f4240
 80011e8:	20000000 	.word	0x20000000
 80011ec:	200002f4 	.word	0x200002f4
 80011f0:	2000030a 	.word	0x2000030a
 80011f4:	0800b230 	.word	0x0800b230
 80011f8:	0800b244 	.word	0x0800b244
 80011fc:	0800b248 	.word	0x0800b248
 8001200:	0800b24c 	.word	0x0800b24c
 8001204:	0800ae20 	.word	0x0800ae20
 8001208:	0800b280 	.word	0x0800b280

0800120c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>

08001216 <LL_AHB2_GRP1_EnableClock>:
{
 8001216:	b480      	push	{r7}
 8001218:	b085      	sub	sp, #20
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4313      	orrs	r3, r2
 800122c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800122e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4013      	ands	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001246:	b480      	push	{r7}
 8001248:	b085      	sub	sp, #20
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4313      	orrs	r3, r2
 800125c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800125e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001262:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4013      	ands	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800126a:	68fb      	ldr	r3, [r7, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001276:	b480      	push	{r7}
 8001278:	b085      	sub	sp, #20
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800127e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001282:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4313      	orrs	r3, r2
 800128c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800128e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001292:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4013      	ands	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80012ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4013      	ands	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80012ea:	2001      	movs	r0, #1
 80012ec:	f7ff ffdb 	bl	80012a6 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2032      	movs	r0, #50	; 0x32
 80012f6:	f000 fb36 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80012fa:	2032      	movs	r0, #50	; 0x32
 80012fc:	f000 fb4d 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <HAL_TIM_Base_MspInit+0x44>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10c      	bne.n	8001334 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800131e:	f7ff ffaa 	bl	8001276 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2018      	movs	r0, #24
 8001328:	f000 fb1d 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800132c:	2018      	movs	r0, #24
 800132e:	f000 fb34 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001332:	e007      	b.n	8001344 <HAL_TIM_Base_MspInit+0x3c>
  else if(htim_base->Instance==TIM2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800133c:	d102      	bne.n	8001344 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff ff81 	bl	8001246 <LL_APB1_GRP1_EnableClock>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40012c00 	.word	0x40012c00

08001350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b096      	sub	sp, #88	; 0x58
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2238      	movs	r2, #56	; 0x38
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f009 f84b 	bl	800a40c <memset>
  if(huart->Instance==USART1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a32      	ldr	r2, [pc, #200]	; (8001444 <HAL_UART_MspInit+0xf4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d130      	bne.n	80013e2 <HAL_UART_MspInit+0x92>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001380:	2301      	movs	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001384:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001388:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4618      	mov	r0, r3
 8001390:	f001 ff66 	bl	8003260 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800139a:	f7ff ff37 	bl	800120c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800139e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013a2:	f7ff ff68 	bl	8001276 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff ff35 	bl	8001216 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80013ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013b0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013be:	2307      	movs	r3, #7
 80013c0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f000 fbbc 	bl	8001b48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	2024      	movs	r0, #36	; 0x24
 80013d6:	f000 fac6 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013da:	2024      	movs	r0, #36	; 0x24
 80013dc:	f000 fadd 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013e0:	e02b      	b.n	800143a <HAL_UART_MspInit+0xea>
  else if(huart->Instance==USART2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a18      	ldr	r2, [pc, #96]	; (8001448 <HAL_UART_MspInit+0xf8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d126      	bne.n	800143a <HAL_UART_MspInit+0xea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013f0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80013f4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 ff30 	bl	8003260 <HAL_RCCEx_PeriphCLKConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_UART_MspInit+0xba>
      Error_Handler();
 8001406:	f7ff ff01 	bl	800120c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800140a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800140e:	f7ff ff1a 	bl	8001246 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff feff 	bl	8001216 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001418:	230c      	movs	r3, #12
 800141a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001428:	2307      	movs	r3, #7
 800142a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001430:	4619      	mov	r1, r3
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f000 fb87 	bl	8001b48 <HAL_GPIO_Init>
}
 800143a:	bf00      	nop
 800143c:	3758      	adds	r7, #88	; 0x58
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40013800 	.word	0x40013800
 8001448:	40004400 	.word	0x40004400

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <NMI_Handler+0x4>

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler+0x4>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler+0x4>

0800146a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001492:	f000 f97f 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <TIM1_UP_IRQHandler+0x10>)
 80014a2:	f002 fdbf 	bl	8004024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000011c 	.word	0x2000011c

080014b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <USART1_IRQHandler+0x10>)
 80014b6:	f003 fa77 	bl	80049a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200001b4 	.word	0x200001b4

080014c4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <SUBGHZ_Radio_IRQHandler+0x10>)
 80014ca:	f002 faff 	bl	8003acc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000110 	.word	0x20000110

080014d8 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_GetTick+0x24>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80014f6:	f000 f892 	bl	800161e <TIMER_IF_GetTimerValue>
 80014fa:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80014fc:	687b      	ldr	r3, [r7, #4]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000377 	.word	0x20000377

0800150c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f8af 	bl	800167a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f008 ff62 	bl	800a41c <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20010000 	.word	0x20010000
 8001584:	00000400 	.word	0x00000400
 8001588:	20000378 	.word	0x20000378
 800158c:	20000690 	.word	0x20000690

08001590 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 80015a6:	79fb      	ldrb	r3, [r7, #7]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 80015d4:	79fb      	ldrb	r3, [r7, #7]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80015e4:	4b02      	ldr	r3, [pc, #8]	; (80015f0 <TIMER_IF_SetTimerContext+0x10>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	2000037c 	.word	0x2000037c

080015f4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80015f8:	4b02      	ldr	r3, [pc, #8]	; (8001604 <TIMER_IF_GetTimerContext+0x10>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	2000037c 	.word	0x2000037c

08001608 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8001612:	687b      	ldr	r3, [r7, #4]
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001628:	687b      	ldr	r3, [r7, #4]
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 800163e:	687b      	ldr	r3, [r7, #4]
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001662:	b480      	push	{r7}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800168e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001690:	f7ff ff7e 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	; (80016cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <LoopForever+0xe>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	; (80016d8 <LoopForever+0x16>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016ba:	f008 feb5 	bl	800a428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016be:	f7ff f8e1 	bl	8000884 <main>

080016c2 <LoopForever>:

LoopForever:
    b LoopForever
 80016c2:	e7fe      	b.n	80016c2 <LoopForever>
  ldr   r0, =_estack
 80016c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80016d0:	0800b55c 	.word	0x0800b55c
  ldr r2, =_sbss
 80016d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80016d8:	2000068c 	.word	0x2000068c

080016dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ea:	2003      	movs	r0, #3
 80016ec:	f000 f930 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80016f0:	f001 fbd8 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_Init+0x3c>)
 80016f8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 f810 	bl	8001720 <HAL_InitTick>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	71fb      	strb	r3, [r7, #7]
 800170a:	e001      	b.n	8001710 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800170c:	f7ff fde3 	bl	80012d6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001710:	79fb      	ldrb	r3, [r7, #7]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_InitTick+0x6c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d024      	beq.n	800177e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001734:	f001 fbb6 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8001738:	4602      	mov	r2, r0
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_InitTick+0x6c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4619      	mov	r1, r3
 8001740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001744:	fbb3 f3f1 	udiv	r3, r3, r1
 8001748:	fbb2 f3f3 	udiv	r3, r2, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f932 	bl	80019b6 <HAL_SYSTICK_Config>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10f      	bne.n	8001778 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b0f      	cmp	r3, #15
 800175c:	d809      	bhi.n	8001772 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175e:	2200      	movs	r2, #0
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001766:	f000 f8fe 	bl	8001966 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <HAL_InitTick+0x70>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e007      	b.n	8001782 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	e004      	b.n	8001782 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e001      	b.n	8001782 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	2000000c 	.word	0x2000000c
 8001790:	20000008 	.word	0x20000008

08001794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_IncTick+0x1c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_IncTick+0x20>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a03      	ldr	r2, [pc, #12]	; (80017b4 <HAL_IncTick+0x20>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	2000000c 	.word	0x2000000c
 80017b4:	20000380 	.word	0x20000380

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4906      	ldr	r1, [pc, #24]	; (8001850 <__NVIC_EnableIRQ+0x34>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	; (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	; (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
         );
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	; 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001930:	f7ff ff90 	bl	8001854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff2d 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff44 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff92 	bl	80018a8 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff61 	bl	8001854 <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff37 	bl	800181c <__NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffa4 	bl	800190c <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e04f      	b.n	8001a80 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d008      	beq.n	80019fe <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2204      	movs	r2, #4
 80019f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e040      	b.n	8001a80 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 020e 	bic.w	r2, r2, #14
 8001a0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f003 021c 	and.w	r2, r3, #28
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a4a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00c      	beq.n	8001a6e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a6c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d005      	beq.n	8001aae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e047      	b.n	8001b3e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 020e 	bic.w	r2, r2, #14
 8001abc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0201 	bic.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001adc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f003 021c 	and.w	r2, r3, #28
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f202 	lsl.w	r2, r1, r2
 8001af0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001afa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00c      	beq.n	8001b1e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4798      	blx	r3
    }
  }
  return status;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b56:	e140      	b.n	8001dda <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8132 	beq.w	8001dd4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d005      	beq.n	8001b88 <HAL_GPIO_Init+0x40>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d130      	bne.n	8001bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	f003 0201 	and.w	r2, r3, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d017      	beq.n	8001c26 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d123      	bne.n	8001c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	6939      	ldr	r1, [r7, #16]
 8001c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0203 	and.w	r2, r3, #3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 808c 	beq.w	8001dd4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ce6:	d00d      	beq.n	8001d04 <HAL_GPIO_Init+0x1bc>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a44      	ldr	r2, [pc, #272]	; (8001dfc <HAL_GPIO_Init+0x2b4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d007      	beq.n	8001d00 <HAL_GPIO_Init+0x1b8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a43      	ldr	r2, [pc, #268]	; (8001e00 <HAL_GPIO_Init+0x2b8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d101      	bne.n	8001cfc <HAL_GPIO_Init+0x1b4>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e004      	b.n	8001d06 <HAL_GPIO_Init+0x1be>
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	e002      	b.n	8001d06 <HAL_GPIO_Init+0x1be>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_GPIO_Init+0x1be>
 8001d04:	2300      	movs	r3, #0
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	f002 0203 	and.w	r2, r2, #3
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	4093      	lsls	r3, r2
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d16:	4938      	ldr	r1, [pc, #224]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d24:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <HAL_GPIO_Init+0x2bc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d48:	4a2e      	ldr	r2, [pc, #184]	; (8001e04 <HAL_GPIO_Init+0x2bc>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_GPIO_Init+0x2bc>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d72:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <HAL_GPIO_Init+0x2bc>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <HAL_GPIO_Init+0x2bc>)
 8001d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d7e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001d9e:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <HAL_GPIO_Init+0x2bc>)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_GPIO_Init+0x2bc>)
 8001da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dac:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <HAL_GPIO_Init+0x2bc>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f47f aeb7 	bne.w	8001b58 <HAL_GPIO_Init+0x10>
  }
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	48000400 	.word	0x48000400
 8001e00:	48000800 	.word	0x48000800
 8001e04:	58000800 	.word	0x58000800

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	58000400 	.word	0x58000400

08001e54 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_PWREx_GetVoltageRange+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	58000400 	.word	0x58000400

08001e6c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e7c:	d101      	bne.n	8001e82 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	58000400 	.word	0x58000400

08001e90 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eda:	d101      	bne.n	8001ee0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f34:	d101      	bne.n	8001f3a <LL_RCC_HSE_IsReady+0x18>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_RCC_HSE_IsReady+0x1a>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8e:	d101      	bne.n	8001f94 <LL_RCC_HSI_IsReady+0x18>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <LL_RCC_HSI_IsReady+0x1a>
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	061b      	lsls	r3, r3, #24
 8001fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d101      	bne.n	8001fde <LL_RCC_LSE_IsReady+0x18>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <LL_RCC_LSE_IsReady+0x1a>
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b02      	cmp	r3, #2
 800203a:	d101      	bne.n	8002040 <LL_RCC_LSI_IsReady+0x18>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <LL_RCC_LSI_IsReady+0x1a>
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800204e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6013      	str	r3, [r2, #0]
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6013      	str	r3, [r2, #0]
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b02      	cmp	r3, #2
 8002092:	d101      	bne.n	8002098 <LL_RCC_MSI_IsReady+0x16>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <LL_RCC_MSI_IsReady+0x18>
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d101      	bne.n	80020b8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80020c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 030c 	and.w	r3, r3, #12
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800218a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021b4:	f023 020f 	bic.w	r2, r3, #15
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	608b      	str	r3, [r1, #8]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80022b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022c2:	d101      	bne.n	80022c8 <LL_RCC_PLL_IsReady+0x18>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <LL_RCC_PLL_IsReady+0x1a>
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80022ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800231a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0303 	and.w	r3, r3, #3
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233e:	d101      	bne.n	8002344 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002362:	d101      	bne.n	8002368 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr

08002372 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800237e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002386:	d101      	bne.n	800238c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023a8:	d101      	bne.n	80023ae <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80023bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023ca:	d101      	bne.n	80023d0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e36f      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ee:	f7ff fea6 	bl	800213e <LL_RCC_GetSysClkSource>
 80023f2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f4:	f7ff ff8f 	bl	8002316 <LL_RCC_PLL_GetMainSource>
 80023f8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80c4 	beq.w	8002590 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x3e>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	2b0c      	cmp	r3, #12
 8002412:	d176      	bne.n	8002502 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d173      	bne.n	8002502 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e353      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800242a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_OscConfig+0x68>
 8002438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002442:	e006      	b.n	8002452 <HAL_RCC_OscConfig+0x76>
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002452:	4293      	cmp	r3, r2
 8002454:	d222      	bcs.n	800249c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fd5a 	bl	8002f14 <RCC_SetFlashLatencyFromMSIRange>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e331      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800246a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fe2b 	bl	80020f0 <LL_RCC_MSI_SetCalibTrimming>
 800249a:	e021      	b.n	80024e0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a6:	f043 0308 	orr.w	r3, r3, #8
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fe12 	bl	80020f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 fd1f 	bl	8002f14 <RCC_SetFlashLatencyFromMSIRange>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e2f6      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024e0:	f000 fce0 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4aa7      	ldr	r2, [pc, #668]	; (8002784 <HAL_RCC_OscConfig+0x3a8>)
 80024e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80024ea:	4ba7      	ldr	r3, [pc, #668]	; (8002788 <HAL_RCC_OscConfig+0x3ac>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff f916 	bl	8001720 <HAL_InitTick>
 80024f4:	4603      	mov	r3, r0
 80024f6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d047      	beq.n	800258e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80024fe:	7cfb      	ldrb	r3, [r7, #19]
 8002500:	e2e5      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d02c      	beq.n	8002564 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800250a:	f7ff fd9e 	bl	800204a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800250e:	f7fe ffe9 	bl	80014e4 <HAL_GetTick>
 8002512:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002516:	f7fe ffe5 	bl	80014e4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e2d2      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002528:	f7ff fdab 	bl	8002082 <LL_RCC_MSI_IsReady>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f1      	beq.n	8002516 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800253c:	f043 0308 	orr.w	r3, r3, #8
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fdc7 	bl	80020f0 <LL_RCC_MSI_SetCalibTrimming>
 8002562:	e015      	b.n	8002590 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002564:	f7ff fd7f 	bl	8002066 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002568:	f7fe ffbc 	bl	80014e4 <HAL_GetTick>
 800256c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002570:	f7fe ffb8 	bl	80014e4 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e2a5      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002582:	f7ff fd7e 	bl	8002082 <LL_RCC_MSI_IsReady>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f1      	bne.n	8002570 <HAL_RCC_OscConfig+0x194>
 800258c:	e000      	b.n	8002590 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800258e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d058      	beq.n	800264e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d005      	beq.n	80025ae <HAL_RCC_OscConfig+0x1d2>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	2b0c      	cmp	r3, #12
 80025a6:	d108      	bne.n	80025ba <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d105      	bne.n	80025ba <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d14b      	bne.n	800264e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e289      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d8:	d102      	bne.n	80025e0 <HAL_RCC_OscConfig+0x204>
 80025da:	f7ff fc86 	bl	8001eea <LL_RCC_HSE_Enable>
 80025de:	e00d      	b.n	80025fc <HAL_RCC_OscConfig+0x220>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80025e8:	d104      	bne.n	80025f4 <HAL_RCC_OscConfig+0x218>
 80025ea:	f7ff fc51 	bl	8001e90 <LL_RCC_HSE_EnableTcxo>
 80025ee:	f7ff fc7c 	bl	8001eea <LL_RCC_HSE_Enable>
 80025f2:	e003      	b.n	80025fc <HAL_RCC_OscConfig+0x220>
 80025f4:	f7ff fc87 	bl	8001f06 <LL_RCC_HSE_Disable>
 80025f8:	f7ff fc58 	bl	8001eac <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d012      	beq.n	800262a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7fe ff6e 	bl	80014e4 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260c:	f7fe ff6a 	bl	80014e4 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e257      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800261e:	f7ff fc80 	bl	8001f22 <LL_RCC_HSE_IsReady>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f1      	beq.n	800260c <HAL_RCC_OscConfig+0x230>
 8002628:	e011      	b.n	800264e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7fe ff5b 	bl	80014e4 <HAL_GetTick>
 800262e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002632:	f7fe ff57 	bl	80014e4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	; 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e244      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002644:	f7ff fc6d 	bl	8001f22 <LL_RCC_HSE_IsReady>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f1      	bne.n	8002632 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d046      	beq.n	80026e8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	2b04      	cmp	r3, #4
 800265e:	d005      	beq.n	800266c <HAL_RCC_OscConfig+0x290>
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d10e      	bne.n	8002684 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d10b      	bne.n	8002684 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e22a      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fc8e 	bl	8001f9e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002682:	e031      	b.n	80026e8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d019      	beq.n	80026c0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268c:	f7ff fc5a 	bl	8001f44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7fe ff28 	bl	80014e4 <HAL_GetTick>
 8002694:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002698:	f7fe ff24 	bl	80014e4 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e211      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80026aa:	f7ff fc67 	bl	8001f7c <LL_RCC_HSI_IsReady>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f1      	beq.n	8002698 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fc70 	bl	8001f9e <LL_RCC_HSI_SetCalibTrimming>
 80026be:	e013      	b.n	80026e8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c0:	f7ff fc4e 	bl	8001f60 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe ff0e 	bl	80014e4 <HAL_GetTick>
 80026c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026cc:	f7fe ff0a 	bl	80014e4 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e1f7      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80026de:	f7ff fc4d 	bl	8001f7c <LL_RCC_HSI_IsReady>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f1      	bne.n	80026cc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d06e      	beq.n	80027d2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d056      	beq.n	80027aa <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80026fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002704:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	429a      	cmp	r2, r3
 8002712:	d031      	beq.n	8002778 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e1d0      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d013      	beq.n	800275e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002736:	f7ff fc67 	bl	8002008 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800273a:	f7fe fed3 	bl	80014e4 <HAL_GetTick>
 800273e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002742:	f7fe fecf 	bl	80014e4 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b11      	cmp	r3, #17
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1bc      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002754:	f7ff fc68 	bl	8002028 <LL_RCC_LSI_IsReady>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f1      	bne.n	8002742 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800275e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002766:	f023 0210 	bic.w	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002778:	f7ff fc36 	bl	8001fe8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7fe feb2 	bl	80014e4 <HAL_GetTick>
 8002780:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002782:	e00c      	b.n	800279e <HAL_RCC_OscConfig+0x3c2>
 8002784:	20000004 	.word	0x20000004
 8002788:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe feaa 	bl	80014e4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b11      	cmp	r3, #17
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e197      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800279e:	f7ff fc43 	bl	8002028 <LL_RCC_LSI_IsReady>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f1      	beq.n	800278c <HAL_RCC_OscConfig+0x3b0>
 80027a8:	e013      	b.n	80027d2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027aa:	f7ff fc2d 	bl	8002008 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7fe fe99 	bl	80014e4 <HAL_GetTick>
 80027b2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b6:	f7fe fe95 	bl	80014e4 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b11      	cmp	r3, #17
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e182      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80027c8:	f7ff fc2e 	bl	8002028 <LL_RCC_LSI_IsReady>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f1      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80d8 	beq.w	8002990 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80027e0:	f7ff fb44 	bl	8001e6c <LL_PWR_IsEnabledBkUpAccess>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d113      	bne.n	8002812 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80027ea:	f7ff fb25 	bl	8001e38 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fe79 	bl	80014e4 <HAL_GetTick>
 80027f2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f6:	f7fe fe75 	bl	80014e4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e162      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002808:	f7ff fb30 	bl	8001e6c <LL_PWR_IsEnabledBkUpAccess>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f1      	beq.n	80027f6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d07b      	beq.n	8002912 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b85      	cmp	r3, #133	; 0x85
 8002820:	d003      	beq.n	800282a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b05      	cmp	r3, #5
 8002828:	d109      	bne.n	800283e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800282a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7fe fe51 	bl	80014e4 <HAL_GetTick>
 8002842:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fe fe43 	bl	80014e4 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e12e      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002870:	f7ff fba9 	bl	8001fc6 <LL_RCC_LSE_IsReady>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0ef      	beq.n	800285a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b81      	cmp	r3, #129	; 0x81
 8002880:	d003      	beq.n	800288a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b85      	cmp	r3, #133	; 0x85
 8002888:	d121      	bne.n	80028ce <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288a:	f7fe fe2b 	bl	80014e4 <HAL_GetTick>
 800288e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800289c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80028a4:	e00a      	b.n	80028bc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f7fe fe1d 	bl	80014e4 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e108      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ec      	beq.n	80028a6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80028cc:	e060      	b.n	8002990 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7fe fe09 	bl	80014e4 <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80028d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe fdfb 	bl	80014e4 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e0e6      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ec      	bne.n	80028ea <HAL_RCC_OscConfig+0x50e>
 8002910:	e03e      	b.n	8002990 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002912:	f7fe fde7 	bl	80014e4 <HAL_GetTick>
 8002916:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800292c:	e00a      	b.n	8002944 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe fdd9 	bl	80014e4 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	; 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e0c4      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1ec      	bne.n	800292e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002954:	f7fe fdc6 	bl	80014e4 <HAL_GetTick>
 8002958:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7fe fdb8 	bl	80014e4 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0a3      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002986:	f7ff fb1e 	bl	8001fc6 <LL_RCC_LSE_IsReady>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1ef      	bne.n	8002970 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8099 	beq.w	8002acc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	2b0c      	cmp	r3, #12
 800299e:	d06c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d14b      	bne.n	8002a40 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a8:	f7ff fc74 	bl	8002294 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fd9a 	bl	80014e4 <HAL_GetTick>
 80029b0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe fd96 	bl	80014e4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b0a      	cmp	r3, #10
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e083      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80029c6:	f7ff fc73 	bl	80022b0 <LL_RCC_PLL_IsReady>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f1      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <HAL_RCC_OscConfig+0x6fc>)
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029e2:	4311      	orrs	r1, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029e8:	0212      	lsls	r2, r2, #8
 80029ea:	4311      	orrs	r1, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029f0:	4311      	orrs	r1, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029f6:	4311      	orrs	r1, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029fc:	430a      	orrs	r2, r1
 80029fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a06:	f7ff fc37 	bl	8002278 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fd63 	bl	80014e4 <HAL_GetTick>
 8002a1e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe fd5f 	bl	80014e4 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b0a      	cmp	r3, #10
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e04c      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002a34:	f7ff fc3c 	bl	80022b0 <LL_RCC_PLL_IsReady>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f1      	beq.n	8002a22 <HAL_RCC_OscConfig+0x646>
 8002a3e:	e045      	b.n	8002acc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a40:	f7ff fc28 	bl	8002294 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fd4e 	bl	80014e4 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fd4a 	bl	80014e4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b0a      	cmp	r3, #10
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e037      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002a5e:	f7ff fc27 	bl	80022b0 <LL_RCC_PLL_IsReady>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f1      	bne.n	8002a4c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a72:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <HAL_RCC_OscConfig+0x700>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	60cb      	str	r3, [r1, #12]
 8002a78:	e028      	b.n	8002acc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e023      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f003 0203 	and.w	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d115      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d10e      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d106      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3720      	adds	r7, #32
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	11c1808c 	.word	0x11c1808c
 8002adc:	eefefffc 	.word	0xeefefffc

08002ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e12c      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b98      	ldr	r3, [pc, #608]	; (8002d58 <HAL_RCC_ClockConfig+0x278>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d91b      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b95      	ldr	r3, [pc, #596]	; (8002d58 <HAL_RCC_ClockConfig+0x278>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0207 	bic.w	r2, r3, #7
 8002b0a:	4993      	ldr	r1, [pc, #588]	; (8002d58 <HAL_RCC_ClockConfig+0x278>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b12:	f7fe fce7 	bl	80014e4 <HAL_GetTick>
 8002b16:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b1a:	f7fe fce3 	bl	80014e4 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e110      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2c:	4b8a      	ldr	r3, [pc, #552]	; (8002d58 <HAL_RCC_ClockConfig+0x278>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d1ef      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d016      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fb02 	bl	8002154 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b50:	f7fe fcc8 	bl	80014e4 <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b58:	f7fe fcc4 	bl	80014e4 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e0f1      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002b6a:	f7ff fbdf 	bl	800232c <LL_RCC_IsActiveFlag_HPRE>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f1      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d016      	beq.n	8002bae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff faf8 	bl	800217a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b8a:	f7fe fcab 	bl	80014e4 <HAL_GetTick>
 8002b8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b92:	f7fe fca7 	bl	80014e4 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e0d4      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ba4:	f7ff fbd3 	bl	800234e <LL_RCC_IsActiveFlag_C2HPRE>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f1      	beq.n	8002b92 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d016      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff faf0 	bl	80021a4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002bc4:	f7fe fc8e 	bl	80014e4 <HAL_GetTick>
 8002bc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002bcc:	f7fe fc8a 	bl	80014e4 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0b7      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002bde:	f7ff fbc8 	bl	8002372 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f1      	beq.n	8002bcc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d016      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fae9 	bl	80021d0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002bfe:	f7fe fc71 	bl	80014e4 <HAL_GetTick>
 8002c02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c06:	f7fe fc6d 	bl	80014e4 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e09a      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002c18:	f7ff fbbd 	bl	8002396 <LL_RCC_IsActiveFlag_PPRE1>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f1      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d017      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fade 	bl	80021f6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c3a:	f7fe fc53 	bl	80014e4 <HAL_GetTick>
 8002c3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c42:	f7fe fc4f 	bl	80014e4 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e07c      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c54:	f7ff fbb0 	bl	80023b8 <LL_RCC_IsActiveFlag_PPRE2>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f1      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d043      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d106      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002c72:	f7ff f956 	bl	8001f22 <LL_RCC_HSE_IsReady>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d11e      	bne.n	8002cba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e066      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002c88:	f7ff fb12 	bl	80022b0 <LL_RCC_PLL_IsReady>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d113      	bne.n	8002cba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e05b      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002c9e:	f7ff f9f0 	bl	8002082 <LL_RCC_MSI_IsReady>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d108      	bne.n	8002cba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e050      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002cac:	f7ff f966 	bl	8001f7c <LL_RCC_HSI_IsReady>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e049      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fa2a 	bl	8002118 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7fe fc0e 	bl	80014e4 <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ccc:	f7fe fc0a 	bl	80014e4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e035      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	f7ff fa2c 	bl	800213e <LL_RCC_GetSysClkSource>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d1ec      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf2:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_RCC_ClockConfig+0x278>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d21b      	bcs.n	8002d38 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d00:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_RCC_ClockConfig+0x278>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 0207 	bic.w	r2, r3, #7
 8002d08:	4913      	ldr	r1, [pc, #76]	; (8002d58 <HAL_RCC_ClockConfig+0x278>)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d10:	f7fe fbe8 	bl	80014e4 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d18:	f7fe fbe4 	bl	80014e4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e011      	b.n	8002d4e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_RCC_ClockConfig+0x278>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1ef      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d38:	f000 f8b4 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <HAL_RCC_ClockConfig+0x27c>)
 8002d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_RCC_ClockConfig+0x280>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fcea 	bl	8001720 <HAL_InitTick>
 8002d4c:	4603      	mov	r3, r0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	58004000 	.word	0x58004000
 8002d5c:	20000004 	.word	0x20000004
 8002d60:	20000008 	.word	0x20000008

08002d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d72:	f7ff f9e4 	bl	800213e <LL_RCC_GetSysClkSource>
 8002d76:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d78:	f7ff facd 	bl	8002316 <LL_RCC_PLL_GetMainSource>
 8002d7c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0x2c>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b0c      	cmp	r3, #12
 8002d88:	d139      	bne.n	8002dfe <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d136      	bne.n	8002dfe <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002d90:	f7ff f987 	bl	80020a2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d115      	bne.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x62>
 8002d9a:	f7ff f982 	bl	80020a2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_GetSysClockFreq+0x4e>
 8002da4:	f7ff f98d 	bl	80020c2 <LL_RCC_MSI_GetRange>
 8002da8:	4603      	mov	r3, r0
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	e005      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x5a>
 8002db2:	f7ff f991 	bl	80020d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002db6:	4603      	mov	r3, r0
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	4a36      	ldr	r2, [pc, #216]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x134>)
 8002dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc4:	e014      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0x8c>
 8002dc6:	f7ff f96c 	bl	80020a2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d106      	bne.n	8002dde <HAL_RCC_GetSysClockFreq+0x7a>
 8002dd0:	f7ff f977 	bl	80020c2 <LL_RCC_MSI_GetRange>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	e005      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x86>
 8002dde:	f7ff f97b 	bl	80020d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002de2:	4603      	mov	r3, r0
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	4a2b      	ldr	r2, [pc, #172]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x134>)
 8002dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d115      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002dfc:	e012      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e00c      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d109      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002e10:	f7ff f85a 	bl	8001ec8 <LL_RCC_HSE_IsEnabledDiv2>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e001      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002e20:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e22:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e24:	f7ff f98b 	bl	800213e <LL_RCC_GetSysClkSource>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b0c      	cmp	r3, #12
 8002e2c:	d12f      	bne.n	8002e8e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002e2e:	f7ff fa72 	bl	8002316 <LL_RCC_PLL_GetMainSource>
 8002e32:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0xde>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d003      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0xe4>
 8002e40:	e00d      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002e44:	60fb      	str	r3, [r7, #12]
        break;
 8002e46:	e00d      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002e48:	f7ff f83e 	bl	8001ec8 <LL_RCC_HSE_IsEnabledDiv2>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d102      	bne.n	8002e58 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002e54:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002e56:	e005      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e5a:	60fb      	str	r3, [r7, #12]
        break;
 8002e5c:	e002      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	60fb      	str	r3, [r7, #12]
        break;
 8002e62:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002e64:	f7ff fa35 	bl	80022d2 <LL_RCC_PLL_GetN>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	fb03 f402 	mul.w	r4, r3, r2
 8002e70:	f7ff fa46 	bl	8002300 <LL_RCC_PLL_GetDivider>
 8002e74:	4603      	mov	r3, r0
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	3301      	adds	r3, #1
 8002e7a:	fbb4 f4f3 	udiv	r4, r4, r3
 8002e7e:	f7ff fa34 	bl	80022ea <LL_RCC_PLL_GetR>
 8002e82:	4603      	mov	r3, r0
 8002e84:	0f5b      	lsrs	r3, r3, #29
 8002e86:	3301      	adds	r3, #1
 8002e88:	fbb4 f3f3 	udiv	r3, r4, r3
 8002e8c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002e8e:	697b      	ldr	r3, [r7, #20]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd90      	pop	{r4, r7, pc}
 8002e98:	0800b344 	.word	0x0800b344
 8002e9c:	00f42400 	.word	0x00f42400
 8002ea0:	01e84800 	.word	0x01e84800

08002ea4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea4:	b598      	push	{r3, r4, r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ea8:	f7ff ff5c 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002eac:	4604      	mov	r4, r0
 8002eae:	f7ff f9b5 	bl	800221c <LL_RCC_GetAHBPrescaler>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	4a03      	ldr	r2, [pc, #12]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd98      	pop	{r3, r4, r7, pc}
 8002ec8:	0800b2e4 	.word	0x0800b2e4

08002ecc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ecc:	b598      	push	{r3, r4, r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ed0:	f7ff ffe8 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4604      	mov	r4, r0
 8002ed6:	f7ff f9b9 	bl	800224c <LL_RCC_GetAPB1Prescaler>
 8002eda:	4603      	mov	r3, r0
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	4a03      	ldr	r2, [pc, #12]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd98      	pop	{r3, r4, r7, pc}
 8002eec:	0800b324 	.word	0x0800b324

08002ef0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef0:	b598      	push	{r3, r4, r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002ef4:	f7ff ffd6 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ef8:	4604      	mov	r4, r0
 8002efa:	f7ff f9b2 	bl	8002262 <LL_RCC_GetAPB2Prescaler>
 8002efe:	4603      	mov	r3, r0
 8002f00:	0adb      	lsrs	r3, r3, #11
 8002f02:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f08:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd98      	pop	{r3, r4, r7, pc}
 8002f10:	0800b324 	.word	0x0800b324

08002f14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002f2c:	f7ff f981 	bl	8002232 <LL_RCC_GetAHB3Prescaler>
 8002f30:	4603      	mov	r3, r0
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9c      	lsrs	r4, r3, #18
 8002f50:	f7fe ff80 	bl	8001e54 <HAL_PWREx_GetVoltageRange>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4619      	mov	r1, r3
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f000 f80b 	bl	8002f74 <RCC_SetFlashLatency>
 8002f5e:	4603      	mov	r3, r0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd90      	pop	{r4, r7, pc}
 8002f68:	0800b344 	.word	0x0800b344
 8002f6c:	0800b2e4 	.word	0x0800b2e4
 8002f70:	431bde83 	.word	0x431bde83

08002f74 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08e      	sub	sp, #56	; 0x38
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002f7e:	4a3a      	ldr	r2, [pc, #232]	; (8003068 <RCC_SetFlashLatency+0xf4>)
 8002f80:	f107 0320 	add.w	r3, r7, #32
 8002f84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f88:	6018      	str	r0, [r3, #0]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002f8e:	4a37      	ldr	r2, [pc, #220]	; (800306c <RCC_SetFlashLatency+0xf8>)
 8002f90:	f107 0318 	add.w	r3, r7, #24
 8002f94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f98:	6018      	str	r0, [r3, #0]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002f9e:	4a34      	ldr	r2, [pc, #208]	; (8003070 <RCC_SetFlashLatency+0xfc>)
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb4:	d11b      	bne.n	8002fee <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fba:	e014      	b.n	8002fe6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	3338      	adds	r3, #56	; 0x38
 8002fc2:	443b      	add	r3, r7
 8002fc4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d807      	bhi.n	8002fe0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	3338      	adds	r3, #56	; 0x38
 8002fd6:	443b      	add	r3, r7
 8002fd8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fde:	e021      	b.n	8003024 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d9e7      	bls.n	8002fbc <RCC_SetFlashLatency+0x48>
 8002fec:	e01a      	b.n	8003024 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff2:	e014      	b.n	800301e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	3338      	adds	r3, #56	; 0x38
 8002ffa:	443b      	add	r3, r7
 8002ffc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4293      	cmp	r3, r2
 8003006:	d807      	bhi.n	8003018 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	3338      	adds	r3, #56	; 0x38
 800300e:	443b      	add	r3, r7
 8003010:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003014:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003016:	e005      	b.n	8003024 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	3301      	adds	r3, #1
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	2b02      	cmp	r3, #2
 8003022:	d9e7      	bls.n	8002ff4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <RCC_SetFlashLatency+0x100>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 0207 	bic.w	r2, r3, #7
 800302c:	4911      	ldr	r1, [pc, #68]	; (8003074 <RCC_SetFlashLatency+0x100>)
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003034:	f7fe fa56 	bl	80014e4 <HAL_GetTick>
 8003038:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800303a:	e008      	b.n	800304e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800303c:	f7fe fa52 	bl	80014e4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e007      	b.n	800305e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <RCC_SetFlashLatency+0x100>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003058:	429a      	cmp	r2, r3
 800305a:	d1ef      	bne.n	800303c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3738      	adds	r7, #56	; 0x38
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	0800b2a4 	.word	0x0800b2a4
 800306c:	0800b2ac 	.word	0x0800b2ac
 8003070:	0800b2b4 	.word	0x0800b2b4
 8003074:	58004000 	.word	0x58004000

08003078 <LL_RCC_LSE_IsReady>:
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d101      	bne.n	8003090 <LL_RCC_LSE_IsReady+0x18>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <LL_RCC_LSE_IsReady+0x1a>
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <LL_RCC_SetUSARTClockSource>:
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80030a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	43db      	mvns	r3, r3
 80030b0:	401a      	ands	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <LL_RCC_SetI2SClockSource>:
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80030d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <LL_RCC_SetLPUARTClockSource>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80030fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <LL_RCC_SetI2CClockSource>:
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003136:	43db      	mvns	r3, r3
 8003138:	401a      	ands	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <LL_RCC_SetLPTIMClockSource>:
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003162:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	041b      	lsls	r3, r3, #16
 800316c:	43db      	mvns	r3, r3
 800316e:	401a      	ands	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <LL_RCC_SetRNGClockSource>:
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800319c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <LL_RCC_SetADCClockSource>:
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80031ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <LL_RCC_SetRTCClockSource>:
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <LL_RCC_GetRTCClockSource>:
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003212:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003216:	4618      	mov	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <LL_RCC_ForceBackupDomainReset>:
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800322e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003236:	bf00      	nop
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <LL_RCC_ReleaseBackupDomainReset>:
{
 800323e:	b480      	push	{r7}
 8003240:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
	...

08003260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800326c:	2300      	movs	r3, #0
 800326e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003270:	2300      	movs	r3, #0
 8003272:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d058      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003280:	f7fe fdda 	bl	8001e38 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003284:	f7fe f92e 	bl	80014e4 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800328a:	e009      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328c:	f7fe f92a 	bl	80014e4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d902      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	74fb      	strb	r3, [r7, #19]
        break;
 800329e:	e006      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80032a0:	4b7b      	ldr	r3, [pc, #492]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ac:	d1ee      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80032ae:	7cfb      	ldrb	r3, [r7, #19]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d13c      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80032b4:	f7ff ffa7 	bl	8003206 <LL_RCC_GetRTCClockSource>
 80032b8:	4602      	mov	r2, r0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	429a      	cmp	r2, r3
 80032c0:	d00f      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ce:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032d0:	f7ff ffa5 	bl	800321e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032d4:	f7ff ffb3 	bl	800323e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d014      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fe f8fa 	bl	80014e4 <HAL_GetTick>
 80032f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80032f2:	e00b      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f7fe f8f6 	bl	80014e4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d902      	bls.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	74fb      	strb	r3, [r7, #19]
            break;
 800330a:	e004      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800330c:	f7ff feb4 	bl	8003078 <LL_RCC_LSE_IsReady>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d1ee      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff5b 	bl	80031dc <LL_RCC_SetRTCClockSource>
 8003326:	e004      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
 800332c:	e001      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fea9 	bl	800309a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fe9e 	bl	800309a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fec0 	bl	80030f4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fee6 	bl	8003156 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fedb 	bl	8003156 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fed0 	bl	8003156 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fea9 	bl	800311e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d004      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fe9e 	bl	800311e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fe93 	bl	800311e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d011      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fe5e 	bl	80030ca <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003416:	d107      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d010      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fea5 	bl	8003188 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003450:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003454:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d011      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fea3 	bl	80031b2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003474:	d107      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003484:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003486:	7cbb      	ldrb	r3, [r7, #18]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	58000400 	.word	0x58000400

08003494 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034a4:	4904      	ldr	r1, [pc, #16]	; (80034b8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	58000400 	.word	0x58000400

080034bc <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80034c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr
 80034d8:	58000400 	.word	0x58000400

080034dc <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80034e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	58000400 	.word	0x58000400

080034fc <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003502:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003506:	619a      	str	r2, [r3, #24]
}
 8003508:	bf00      	nop
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	58000400 	.word	0x58000400

08003514 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b02      	cmp	r3, #2
 8003522:	d101      	bne.n	8003528 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	58000400 	.word	0x58000400

08003538 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b04      	cmp	r3, #4
 8003546:	d101      	bne.n	800354c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	58000400 	.word	0x58000400

0800355c <LL_RCC_RF_DisableReset>:
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800356c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003570:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <LL_RCC_IsRFUnderReset>:
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003590:	d101      	bne.n	8003596 <LL_RCC_IsRFUnderReset+0x1a>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <LL_RCC_IsRFUnderReset+0x1c>
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80035aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80035ae:	4905      	ldr	r1, [pc, #20]	; (80035c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	58000800 	.word	0x58000800

080035c8 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
    return status;
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	e052      	b.n	8003684 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	799b      	ldrb	r3, [r3, #6]
 80035e6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80035e8:	7bbb      	ldrb	r3, [r7, #14]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_SUBGHZ_Init+0x2c>
 80035ee:	7bbb      	ldrb	r3, [r7, #14]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d109      	bne.n	8003608 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fd fe71 	bl	80012e2 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003600:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003604:	f7ff ffcc 	bl	80035a0 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003608:	7bbb      	ldrb	r3, [r7, #14]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d126      	bne.n	800365c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2202      	movs	r2, #2
 8003612:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003614:	f7ff ffa2 	bl	800355c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003618:	4b1c      	ldr	r3, [pc, #112]	; (800368c <HAL_SUBGHZ_Init+0xc4>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	0cdb      	lsrs	r3, r3, #19
 8003626:	2264      	movs	r2, #100	; 0x64
 8003628:	fb02 f303 	mul.w	r3, r2, r3
 800362c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	609a      	str	r2, [r3, #8]
        break;
 800363e:	e007      	b.n	8003650 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	3b01      	subs	r3, #1
 8003644:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003646:	f7ff ff99 	bl	800357c <LL_RCC_IsRFUnderReset>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ee      	bne.n	800362e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003650:	f7ff ff34 	bl	80034bc <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003654:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003658:	f7ff ff1c 	bl	8003494 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800365c:	f7ff ff4e 	bl	80034fc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 faac 	bl	8003bc8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	719a      	strb	r2, [r3, #6]

  return status;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000004 	.word	0x20000004

08003690 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	461a      	mov	r2, r3
 800369c:	460b      	mov	r3, r1
 800369e:	817b      	strh	r3, [r7, #10]
 80036a0:	4613      	mov	r3, r2
 80036a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	799b      	ldrb	r3, [r3, #6]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d14a      	bne.n	8003744 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	795b      	ldrb	r3, [r3, #5]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_SUBGHZ_WriteRegisters+0x2a>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e045      	b.n	8003746 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2202      	movs	r2, #2
 80036c4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fb4c 	bl	8003d64 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80036cc:	f7ff ff06 	bl	80034dc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80036d0:	210d      	movs	r1, #13
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 fa98 	bl	8003c08 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80036d8:	897b      	ldrh	r3, [r7, #10]
 80036da:	0a1b      	lsrs	r3, r3, #8
 80036dc:	b29b      	uxth	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	4619      	mov	r1, r3
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fa90 	bl	8003c08 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80036e8:	897b      	ldrh	r3, [r7, #10]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fa8a 	bl	8003c08 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80036f4:	2300      	movs	r3, #0
 80036f6:	82bb      	strh	r3, [r7, #20]
 80036f8:	e00a      	b.n	8003710 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80036fa:	8abb      	ldrh	r3, [r7, #20]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4413      	add	r3, r2
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	4619      	mov	r1, r3
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fa7f 	bl	8003c08 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800370a:	8abb      	ldrh	r3, [r7, #20]
 800370c:	3301      	adds	r3, #1
 800370e:	82bb      	strh	r3, [r7, #20]
 8003710:	8aba      	ldrh	r2, [r7, #20]
 8003712:	893b      	ldrh	r3, [r7, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	d3f0      	bcc.n	80036fa <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003718:	f7ff fed0 	bl	80034bc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fb45 	bl	8003dac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
 800372e:	e001      	b.n	8003734 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	715a      	strb	r2, [r3, #5]

    return status;
 8003740:	7dfb      	ldrb	r3, [r7, #23]
 8003742:	e000      	b.n	8003746 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b088      	sub	sp, #32
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	461a      	mov	r2, r3
 800375a:	460b      	mov	r3, r1
 800375c:	817b      	strh	r3, [r7, #10]
 800375e:	4613      	mov	r3, r2
 8003760:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	799b      	ldrb	r3, [r3, #6]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d14a      	bne.n	8003806 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	795b      	ldrb	r3, [r3, #5]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003778:	2302      	movs	r3, #2
 800377a:	e045      	b.n	8003808 <HAL_SUBGHZ_ReadRegisters+0xba>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 faee 	bl	8003d64 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003788:	f7ff fea8 	bl	80034dc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800378c:	211d      	movs	r1, #29
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fa3a 	bl	8003c08 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003794:	897b      	ldrh	r3, [r7, #10]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	b29b      	uxth	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	4619      	mov	r1, r3
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fa32 	bl	8003c08 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80037a4:	897b      	ldrh	r3, [r7, #10]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	4619      	mov	r1, r3
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fa2c 	bl	8003c08 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80037b0:	2100      	movs	r1, #0
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 fa28 	bl	8003c08 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	82fb      	strh	r3, [r7, #22]
 80037bc:	e009      	b.n	80037d2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80037be:	69b9      	ldr	r1, [r7, #24]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fa77 	bl	8003cb4 <SUBGHZSPI_Receive>
      pData++;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	3301      	adds	r3, #1
 80037ca:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80037cc:	8afb      	ldrh	r3, [r7, #22]
 80037ce:	3301      	adds	r3, #1
 80037d0:	82fb      	strh	r3, [r7, #22]
 80037d2:	8afa      	ldrh	r2, [r7, #22]
 80037d4:	893b      	ldrh	r3, [r7, #8]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d3f1      	bcc.n	80037be <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80037da:	f7ff fe6f 	bl	80034bc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fae4 	bl	8003dac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e001      	b.n	80037f6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	715a      	strb	r2, [r3, #5]

    return status;
 8003802:	7ffb      	ldrb	r3, [r7, #31]
 8003804:	e000      	b.n	8003808 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003806:	2302      	movs	r3, #2
  }
}
 8003808:	4618      	mov	r0, r3
 800380a:	3720      	adds	r7, #32
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	461a      	mov	r2, r3
 800381c:	460b      	mov	r3, r1
 800381e:	72fb      	strb	r3, [r7, #11]
 8003820:	4613      	mov	r3, r2
 8003822:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	799b      	ldrb	r3, [r3, #6]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d14a      	bne.n	80038c4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	795b      	ldrb	r3, [r3, #5]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003836:	2302      	movs	r3, #2
 8003838:	e045      	b.n	80038c6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fa8f 	bl	8003d64 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003846:	7afb      	ldrb	r3, [r7, #11]
 8003848:	2b84      	cmp	r3, #132	; 0x84
 800384a:	d002      	beq.n	8003852 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800384c:	7afb      	ldrb	r3, [r7, #11]
 800384e:	2b94      	cmp	r3, #148	; 0x94
 8003850:	d103      	bne.n	800385a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	711a      	strb	r2, [r3, #4]
 8003858:	e002      	b.n	8003860 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003860:	f7ff fe3c 	bl	80034dc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003864:	7afb      	ldrb	r3, [r7, #11]
 8003866:	4619      	mov	r1, r3
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f9cd 	bl	8003c08 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800386e:	2300      	movs	r3, #0
 8003870:	82bb      	strh	r3, [r7, #20]
 8003872:	e00a      	b.n	800388a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003874:	8abb      	ldrh	r3, [r7, #20]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f9c2 	bl	8003c08 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003884:	8abb      	ldrh	r3, [r7, #20]
 8003886:	3301      	adds	r3, #1
 8003888:	82bb      	strh	r3, [r7, #20]
 800388a:	8aba      	ldrh	r2, [r7, #20]
 800388c:	893b      	ldrh	r3, [r7, #8]
 800388e:	429a      	cmp	r2, r3
 8003890:	d3f0      	bcc.n	8003874 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003892:	f7ff fe13 	bl	80034bc <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003896:	7afb      	ldrb	r3, [r7, #11]
 8003898:	2b84      	cmp	r3, #132	; 0x84
 800389a:	d002      	beq.n	80038a2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fa85 	bl	8003dac <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	75fb      	strb	r3, [r7, #23]
 80038ae:	e001      	b.n	80038b4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	715a      	strb	r2, [r3, #5]

    return status;
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	e000      	b.n	80038c6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b088      	sub	sp, #32
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	461a      	mov	r2, r3
 80038da:	460b      	mov	r3, r1
 80038dc:	72fb      	strb	r3, [r7, #11]
 80038de:	4613      	mov	r3, r2
 80038e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	799b      	ldrb	r3, [r3, #6]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d13d      	bne.n	800396c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	795b      	ldrb	r3, [r3, #5]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e038      	b.n	800396e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fa2e 	bl	8003d64 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003908:	f7ff fde8 	bl	80034dc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800390c:	7afb      	ldrb	r3, [r7, #11]
 800390e:	4619      	mov	r1, r3
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f979 	bl	8003c08 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003916:	2100      	movs	r1, #0
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f975 	bl	8003c08 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800391e:	2300      	movs	r3, #0
 8003920:	82fb      	strh	r3, [r7, #22]
 8003922:	e009      	b.n	8003938 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003924:	69b9      	ldr	r1, [r7, #24]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f9c4 	bl	8003cb4 <SUBGHZSPI_Receive>
      pData++;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	3301      	adds	r3, #1
 8003930:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003932:	8afb      	ldrh	r3, [r7, #22]
 8003934:	3301      	adds	r3, #1
 8003936:	82fb      	strh	r3, [r7, #22]
 8003938:	8afa      	ldrh	r2, [r7, #22]
 800393a:	893b      	ldrh	r3, [r7, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	d3f1      	bcc.n	8003924 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003940:	f7ff fdbc 	bl	80034bc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fa31 	bl	8003dac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e001      	b.n	800395c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	715a      	strb	r2, [r3, #5]

    return status;
 8003968:	7ffb      	ldrb	r3, [r7, #31]
 800396a:	e000      	b.n	800396e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	461a      	mov	r2, r3
 8003982:	460b      	mov	r3, r1
 8003984:	72fb      	strb	r3, [r7, #11]
 8003986:	4613      	mov	r3, r2
 8003988:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	799b      	ldrb	r3, [r3, #6]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d13e      	bne.n	8003a12 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	795b      	ldrb	r3, [r3, #5]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800399c:	2302      	movs	r3, #2
 800399e:	e039      	b.n	8003a14 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f9dc 	bl	8003d64 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80039ac:	f7ff fd96 	bl	80034dc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80039b0:	210e      	movs	r1, #14
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f928 	bl	8003c08 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80039b8:	7afb      	ldrb	r3, [r7, #11]
 80039ba:	4619      	mov	r1, r3
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f923 	bl	8003c08 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80039c2:	2300      	movs	r3, #0
 80039c4:	82bb      	strh	r3, [r7, #20]
 80039c6:	e00a      	b.n	80039de <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80039c8:	8abb      	ldrh	r3, [r7, #20]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	4619      	mov	r1, r3
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f918 	bl	8003c08 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80039d8:	8abb      	ldrh	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	82bb      	strh	r3, [r7, #20]
 80039de:	8aba      	ldrh	r2, [r7, #20]
 80039e0:	893b      	ldrh	r3, [r7, #8]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d3f0      	bcc.n	80039c8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80039e6:	f7ff fd69 	bl	80034bc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f9de 	bl	8003dac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
 80039fc:	e001      	b.n	8003a02 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	715a      	strb	r2, [r3, #5]

    return status;
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	e000      	b.n	8003a14 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
  }
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	461a      	mov	r2, r3
 8003a28:	460b      	mov	r3, r1
 8003a2a:	72fb      	strb	r3, [r7, #11]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	799b      	ldrb	r3, [r3, #6]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d141      	bne.n	8003ac2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	795b      	ldrb	r3, [r3, #5]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e03c      	b.n	8003ac4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f987 	bl	8003d64 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003a56:	f7ff fd41 	bl	80034dc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003a5a:	211e      	movs	r1, #30
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f8d3 	bl	8003c08 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003a62:	7afb      	ldrb	r3, [r7, #11]
 8003a64:	4619      	mov	r1, r3
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f8ce 	bl	8003c08 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f8ca 	bl	8003c08 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003a74:	2300      	movs	r3, #0
 8003a76:	82fb      	strh	r3, [r7, #22]
 8003a78:	e009      	b.n	8003a8e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003a7a:	69b9      	ldr	r1, [r7, #24]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f919 	bl	8003cb4 <SUBGHZSPI_Receive>
      pData++;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	3301      	adds	r3, #1
 8003a86:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003a88:	8afb      	ldrh	r3, [r7, #22]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	82fb      	strh	r3, [r7, #22]
 8003a8e:	8afa      	ldrh	r2, [r7, #22]
 8003a90:	893b      	ldrh	r3, [r7, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d3f1      	bcc.n	8003a7a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003a96:	f7ff fd11 	bl	80034bc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f986 	bl	8003dac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e001      	b.n	8003ab2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	715a      	strb	r2, [r3, #5]

    return status;
 8003abe:	7ffb      	ldrb	r3, [r7, #31]
 8003ac0:	e000      	b.n	8003ac4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003ad8:	f107 020c 	add.w	r2, r7, #12
 8003adc:	2302      	movs	r3, #2
 8003ade:	2112      	movs	r1, #18
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff fef4 	bl	80038ce <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003ae6:	7b3b      	ldrb	r3, [r7, #12]
 8003ae8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003aea:	89fb      	ldrh	r3, [r7, #14]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	b21a      	sxth	r2, r3
 8003af0:	7b7b      	ldrb	r3, [r7, #13]
 8003af2:	b21b      	sxth	r3, r3
 8003af4:	4313      	orrs	r3, r2
 8003af6:	b21b      	sxth	r3, r3
 8003af8:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003afa:	f107 020c 	add.w	r2, r7, #12
 8003afe:	2302      	movs	r3, #2
 8003b00:	2102      	movs	r1, #2
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fe84 	bl	8003810 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003b08:	89fb      	ldrh	r3, [r7, #14]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f005 fec0 	bl	8009898 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003b18:	89fb      	ldrh	r3, [r7, #14]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f005 fec6 	bl	80098b4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003b28:	89fb      	ldrh	r3, [r7, #14]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f005 ff16 	bl	8009964 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003b38:	89fb      	ldrh	r3, [r7, #14]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f005 ff1c 	bl	8009980 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003b48:	89fb      	ldrh	r3, [r7, #14]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f005 ff22 	bl	800999c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003b58:	89fb      	ldrh	r3, [r7, #14]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f005 fef0 	bl	8009948 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003b68:	89fb      	ldrh	r3, [r7, #14]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f005 feac 	bl	80098d0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003b78:	89fb      	ldrh	r3, [r7, #14]
 8003b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00d      	beq.n	8003b9e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003b82:	89fb      	ldrh	r3, [r7, #14]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f005 feac 	bl	80098ec <HAL_SUBGHZ_CADStatusCallback>
 8003b94:	e003      	b.n	8003b9e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003b96:	2100      	movs	r1, #0
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f005 fea7 	bl	80098ec <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003b9e:	89fb      	ldrh	r3, [r7, #14]
 8003ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f005 febd 	bl	8009928 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003bae:	89fb      	ldrh	r3, [r7, #14]
 8003bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f005 fefd 	bl	80099b8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <SUBGHZSPI_Init+0x3c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <SUBGHZSPI_Init+0x3c>)
 8003bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bda:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003bdc:	4a09      	ldr	r2, [pc, #36]	; (8003c04 <SUBGHZSPI_Init+0x3c>)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8003be4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003be6:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <SUBGHZSPI_Init+0x3c>)
 8003be8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003bec:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <SUBGHZSPI_Init+0x3c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <SUBGHZSPI_Init+0x3c>)
 8003bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bf8:	6013      	str	r3, [r2, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	58010000 	.word	0x58010000

08003c08 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003c18:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <SUBGHZSPI_Transmit+0xa0>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	0cdb      	lsrs	r3, r3, #19
 8003c26:	2264      	movs	r2, #100	; 0x64
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d105      	bne.n	8003c40 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	609a      	str	r2, [r3, #8]
      break;
 8003c3e:	e008      	b.n	8003c52 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003c46:	4b19      	ldr	r3, [pc, #100]	; (8003cac <SUBGHZSPI_Transmit+0xa4>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d1ed      	bne.n	8003c2e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003c52:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <SUBGHZSPI_Transmit+0xa8>)
 8003c54:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003c5c:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <SUBGHZSPI_Transmit+0xa0>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	0cdb      	lsrs	r3, r3, #19
 8003c6a:	2264      	movs	r2, #100	; 0x64
 8003c6c:	fb02 f303 	mul.w	r3, r2, r3
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	609a      	str	r2, [r3, #8]
      break;
 8003c82:	e008      	b.n	8003c96 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <SUBGHZSPI_Transmit+0xa4>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d1ed      	bne.n	8003c72 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <SUBGHZSPI_Transmit+0xa4>)
 8003c98:	68db      	ldr	r3, [r3, #12]

  return status;
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000004 	.word	0x20000004
 8003cac:	58010000 	.word	0x58010000
 8003cb0:	5801000c 	.word	0x5801000c

08003cb4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003cc2:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <SUBGHZSPI_Receive+0xa4>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	0cdb      	lsrs	r3, r3, #19
 8003cd0:	2264      	movs	r2, #100	; 0x64
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d105      	bne.n	8003cea <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	609a      	str	r2, [r3, #8]
      break;
 8003ce8:	e008      	b.n	8003cfc <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <SUBGHZSPI_Receive+0xa8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d1ed      	bne.n	8003cd8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003cfc:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <SUBGHZSPI_Receive+0xac>)
 8003cfe:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	22ff      	movs	r2, #255	; 0xff
 8003d04:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003d06:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <SUBGHZSPI_Receive+0xa4>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	0cdb      	lsrs	r3, r3, #19
 8003d14:	2264      	movs	r2, #100	; 0x64
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	609a      	str	r2, [r3, #8]
      break;
 8003d2c:	e008      	b.n	8003d40 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003d34:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <SUBGHZSPI_Receive+0xa8>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d1ed      	bne.n	8003d1c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <SUBGHZSPI_Receive+0xa8>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	701a      	strb	r2, [r3, #0]

  return status;
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20000004 	.word	0x20000004
 8003d5c:	58010000 	.word	0x58010000
 8003d60:	5801000c 	.word	0x5801000c

08003d64 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	791b      	ldrb	r3, [r3, #4]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d111      	bne.n	8003d98 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <SUBGHZ_CheckDeviceReady+0x44>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	4413      	add	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d84:	f7ff fbaa 	bl	80034dc <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f9      	bne.n	8003d88 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d94:	f7ff fb92 	bl	80034bc <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f807 	bl	8003dac <SUBGHZ_WaitOnBusy>
 8003d9e:	4603      	mov	r3, r0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000004 	.word	0x20000004

08003dac <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003db8:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <SUBGHZ_WaitOnBusy+0x58>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	4413      	add	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	0d1b      	lsrs	r3, r3, #20
 8003dc6:	2264      	movs	r2, #100	; 0x64
 8003dc8:	fb02 f303 	mul.w	r3, r2, r3
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003dce:	f7ff fbb3 	bl	8003538 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003dd2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d105      	bne.n	8003de6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	609a      	str	r2, [r3, #8]
      break;
 8003de4:	e009      	b.n	8003dfa <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003dec:	f7ff fb92 	bl	8003514 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d0e9      	beq.n	8003dce <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20000004 	.word	0x20000004

08003e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e049      	b.n	8003eae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd fa6a 	bl	8001308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 faf8 	bl	800443c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d001      	beq.n	8003ed0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e02e      	b.n	8003f2e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <HAL_TIM_Base_Start+0x80>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_TIM_Base_Start+0x34>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eea:	d115      	bne.n	8003f18 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_TIM_Base_Start+0x84>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b06      	cmp	r3, #6
 8003efc:	d015      	beq.n	8003f2a <HAL_TIM_Base_Start+0x72>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f04:	d011      	beq.n	8003f2a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	e008      	b.n	8003f2a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e000      	b.n	8003f2c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	00010007 	.word	0x00010007

08003f40 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6a1a      	ldr	r2, [r3, #32]
 8003f4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10f      	bne.n	8003f78 <HAL_TIM_Base_Stop+0x38>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	f240 4344 	movw	r3, #1092	; 0x444
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d107      	bne.n	8003f78 <HAL_TIM_Base_Stop+0x38>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d001      	beq.n	8003fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e036      	b.n	8004012 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a16      	ldr	r2, [pc, #88]	; (800401c <HAL_TIM_Base_Start_IT+0x90>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x44>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fce:	d115      	bne.n	8003ffc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <HAL_TIM_Base_Start_IT+0x94>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d015      	beq.n	800400e <HAL_TIM_Base_Start_IT+0x82>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe8:	d011      	beq.n	800400e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffa:	e008      	b.n	800400e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e000      	b.n	8004010 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr
 800401c:	40012c00 	.word	0x40012c00
 8004020:	00010007 	.word	0x00010007

08004024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d122      	bne.n	8004080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d11b      	bne.n	8004080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0202 	mvn.w	r2, #2
 8004050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9cd 	bl	8004406 <HAL_TIM_IC_CaptureCallback>
 800406c:	e005      	b.n	800407a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f9c0 	bl	80043f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f9cf 	bl	8004418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b04      	cmp	r3, #4
 800408c:	d122      	bne.n	80040d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b04      	cmp	r3, #4
 800409a:	d11b      	bne.n	80040d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0204 	mvn.w	r2, #4
 80040a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2202      	movs	r2, #2
 80040aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f9a3 	bl	8004406 <HAL_TIM_IC_CaptureCallback>
 80040c0:	e005      	b.n	80040ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f996 	bl	80043f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f9a5 	bl	8004418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d122      	bne.n	8004128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d11b      	bne.n	8004128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0208 	mvn.w	r2, #8
 80040f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2204      	movs	r2, #4
 80040fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f979 	bl	8004406 <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f96c 	bl	80043f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f97b 	bl	8004418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b10      	cmp	r3, #16
 8004134:	d122      	bne.n	800417c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b10      	cmp	r3, #16
 8004142:	d11b      	bne.n	800417c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0210 	mvn.w	r2, #16
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2208      	movs	r2, #8
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f94f 	bl	8004406 <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f942 	bl	80043f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f951 	bl	8004418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d10e      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d107      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0201 	mvn.w	r2, #1
 80041a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fc fa36 	bl	8000614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b2:	2b80      	cmp	r3, #128	; 0x80
 80041b4:	d10e      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b80      	cmp	r3, #128	; 0x80
 80041c2:	d107      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fa95 	bl	80046fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e2:	d10e      	bne.n	8004202 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ee:	2b80      	cmp	r3, #128	; 0x80
 80041f0:	d107      	bne.n	8004202 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fa87 	bl	8004710 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d10e      	bne.n	800422e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421a:	2b40      	cmp	r3, #64	; 0x40
 800421c:	d107      	bne.n	800422e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f8fe 	bl	800442a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b20      	cmp	r3, #32
 800423a:	d10e      	bne.n	800425a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b20      	cmp	r3, #32
 8004248:	d107      	bne.n	800425a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f06f 0220 	mvn.w	r2, #32
 8004252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fa49 	bl	80046ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_TIM_ConfigClockSource+0x1c>
 800427a:	2302      	movs	r3, #2
 800427c:	e0b6      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x18a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800429c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ba:	d03e      	beq.n	800433a <HAL_TIM_ConfigClockSource+0xd8>
 80042bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c0:	f200 8087 	bhi.w	80043d2 <HAL_TIM_ConfigClockSource+0x170>
 80042c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c8:	f000 8086 	beq.w	80043d8 <HAL_TIM_ConfigClockSource+0x176>
 80042cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d0:	d87f      	bhi.n	80043d2 <HAL_TIM_ConfigClockSource+0x170>
 80042d2:	2b70      	cmp	r3, #112	; 0x70
 80042d4:	d01a      	beq.n	800430c <HAL_TIM_ConfigClockSource+0xaa>
 80042d6:	2b70      	cmp	r3, #112	; 0x70
 80042d8:	d87b      	bhi.n	80043d2 <HAL_TIM_ConfigClockSource+0x170>
 80042da:	2b60      	cmp	r3, #96	; 0x60
 80042dc:	d050      	beq.n	8004380 <HAL_TIM_ConfigClockSource+0x11e>
 80042de:	2b60      	cmp	r3, #96	; 0x60
 80042e0:	d877      	bhi.n	80043d2 <HAL_TIM_ConfigClockSource+0x170>
 80042e2:	2b50      	cmp	r3, #80	; 0x50
 80042e4:	d03c      	beq.n	8004360 <HAL_TIM_ConfigClockSource+0xfe>
 80042e6:	2b50      	cmp	r3, #80	; 0x50
 80042e8:	d873      	bhi.n	80043d2 <HAL_TIM_ConfigClockSource+0x170>
 80042ea:	2b40      	cmp	r3, #64	; 0x40
 80042ec:	d058      	beq.n	80043a0 <HAL_TIM_ConfigClockSource+0x13e>
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d86f      	bhi.n	80043d2 <HAL_TIM_ConfigClockSource+0x170>
 80042f2:	2b30      	cmp	r3, #48	; 0x30
 80042f4:	d064      	beq.n	80043c0 <HAL_TIM_ConfigClockSource+0x15e>
 80042f6:	2b30      	cmp	r3, #48	; 0x30
 80042f8:	d86b      	bhi.n	80043d2 <HAL_TIM_ConfigClockSource+0x170>
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d060      	beq.n	80043c0 <HAL_TIM_ConfigClockSource+0x15e>
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d867      	bhi.n	80043d2 <HAL_TIM_ConfigClockSource+0x170>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d05c      	beq.n	80043c0 <HAL_TIM_ConfigClockSource+0x15e>
 8004306:	2b10      	cmp	r3, #16
 8004308:	d05a      	beq.n	80043c0 <HAL_TIM_ConfigClockSource+0x15e>
 800430a:	e062      	b.n	80043d2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800431c:	f000 f969 	bl	80045f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800432e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	609a      	str	r2, [r3, #8]
      break;
 8004338:	e04f      	b.n	80043da <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800434a:	f000 f952 	bl	80045f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800435c:	609a      	str	r2, [r3, #8]
      break;
 800435e:	e03c      	b.n	80043da <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800436c:	461a      	mov	r2, r3
 800436e:	f000 f8c7 	bl	8004500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2150      	movs	r1, #80	; 0x50
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f91e 	bl	80045ba <TIM_ITRx_SetConfig>
      break;
 800437e:	e02c      	b.n	80043da <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800438c:	461a      	mov	r2, r3
 800438e:	f000 f8e5 	bl	800455c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2160      	movs	r1, #96	; 0x60
 8004398:	4618      	mov	r0, r3
 800439a:	f000 f90e 	bl	80045ba <TIM_ITRx_SetConfig>
      break;
 800439e:	e01c      	b.n	80043da <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ac:	461a      	mov	r2, r3
 80043ae:	f000 f8a7 	bl	8004500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2140      	movs	r1, #64	; 0x40
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f8fe 	bl	80045ba <TIM_ITRx_SetConfig>
      break;
 80043be:	e00c      	b.n	80043da <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f000 f8f5 	bl	80045ba <TIM_ITRx_SetConfig>
      break;
 80043d0:	e003      	b.n	80043da <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
      break;
 80043d6:	e000      	b.n	80043da <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr

08004406 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a29      	ldr	r2, [pc, #164]	; (80044f4 <TIM_Base_SetConfig+0xb8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <TIM_Base_SetConfig+0x20>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445a:	d108      	bne.n	800446e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <TIM_Base_SetConfig+0xb8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00b      	beq.n	800448e <TIM_Base_SetConfig+0x52>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447c:	d007      	beq.n	800448e <TIM_Base_SetConfig+0x52>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <TIM_Base_SetConfig+0xbc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d003      	beq.n	800448e <TIM_Base_SetConfig+0x52>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <TIM_Base_SetConfig+0xc0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d108      	bne.n	80044a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <TIM_Base_SetConfig+0xb8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d007      	beq.n	80044dc <TIM_Base_SetConfig+0xa0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <TIM_Base_SetConfig+0xbc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_Base_SetConfig+0xa0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a09      	ldr	r2, [pc, #36]	; (80044fc <TIM_Base_SetConfig+0xc0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d103      	bne.n	80044e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	615a      	str	r2, [r3, #20]
}
 80044ea:	bf00      	nop
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40014400 	.word	0x40014400
 80044fc:	40014800 	.word	0x40014800

08004500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f023 0201 	bic.w	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800452a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f023 030a 	bic.w	r3, r3, #10
 800453c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f023 0210 	bic.w	r2, r3, #16
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004586:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	031b      	lsls	r3, r3, #12
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004598:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	621a      	str	r2, [r3, #32]
}
 80045b0:	bf00      	nop
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr

080045ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80045d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	f043 0307 	orr.w	r3, r3, #7
 80045e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	609a      	str	r2, [r3, #8]
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b087      	sub	sp, #28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800460c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	021a      	lsls	r2, r3, #8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	431a      	orrs	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4313      	orrs	r3, r2
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	609a      	str	r2, [r3, #8]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004644:	2302      	movs	r3, #2
 8004646:	e04a      	b.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d108      	bne.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004678:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b0:	d10c      	bne.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	40012c00 	.word	0x40012c00

080046ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr

080046fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <LL_RCC_GetUSARTClockSource>:
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	401a      	ands	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	4313      	orrs	r3, r2
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr

08004746 <LL_RCC_GetLPUARTClockSource>:
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800474e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004752:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4013      	ands	r3, r2
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e042      	b.n	80047fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	2b00      	cmp	r3, #0
 800477e:	d106      	bne.n	800478e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fc fde1 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2224      	movs	r2, #36	; 0x24
 8004792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0201 	bic.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fc40 	bl	800502c <UART_SetConfig>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e022      	b.n	80047fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fea8 	bl	8005514 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 ff2e 	bl	8005656 <UART_CheckIdleState>
 80047fa:	4603      	mov	r3, r0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	; 0x28
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481a:	2b20      	cmp	r3, #32
 800481c:	d173      	bne.n	8004906 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_UART_Transmit+0x26>
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e06c      	b.n	8004908 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2221      	movs	r2, #33	; 0x21
 800483a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800483e:	f7fc fe51 	bl	80014e4 <HAL_GetTick>
 8004842:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	88fa      	ldrh	r2, [r7, #6]
 8004848:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	88fa      	ldrh	r2, [r7, #6]
 8004850:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485c:	d108      	bne.n	8004870 <HAL_UART_Transmit+0x6c>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d104      	bne.n	8004870 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	e003      	b.n	8004878 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004878:	e02c      	b.n	80048d4 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2200      	movs	r2, #0
 8004882:	2180      	movs	r1, #128	; 0x80
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 ff34 	bl	80056f2 <UART_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e039      	b.n	8004908 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	3302      	adds	r3, #2
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	e007      	b.n	80048c2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	3301      	adds	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1cc      	bne.n	800487a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2200      	movs	r2, #0
 80048e8:	2140      	movs	r1, #64	; 0x40
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 ff01 	bl	80056f2 <UART_WaitOnFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e006      	b.n	8004908 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	e000      	b.n	8004908 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004906:	2302      	movs	r3, #2
  }
}
 8004908:	4618      	mov	r0, r3
 800490a:	3720      	adds	r7, #32
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004924:	2b20      	cmp	r3, #32
 8004926:	d137      	bne.n	8004998 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_UART_Receive_IT+0x24>
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e030      	b.n	800499a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <HAL_UART_Receive_IT+0x94>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d01f      	beq.n	8004988 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d018      	beq.n	8004988 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	613b      	str	r3, [r7, #16]
   return(result);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	623b      	str	r3, [r7, #32]
 8004976:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	69f9      	ldr	r1, [r7, #28]
 800497a:	6a3a      	ldr	r2, [r7, #32]
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	61bb      	str	r3, [r7, #24]
   return(result);
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e6      	bne.n	8004956 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	461a      	mov	r2, r3
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 ff78 	bl	8005884 <UART_Start_Receive_IT>
 8004994:	4603      	mov	r3, r0
 8004996:	e000      	b.n	800499a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004998:	2302      	movs	r3, #2
  }
}
 800499a:	4618      	mov	r0, r3
 800499c:	3728      	adds	r7, #40	; 0x28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40008000 	.word	0x40008000

080049a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b0ba      	sub	sp, #232	; 0xe8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80049d6:	4013      	ands	r3, r2
 80049d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d11b      	bne.n	8004a1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d015      	beq.n	8004a1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d009      	beq.n	8004a1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 82e3 	beq.w	8004fd8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
      }
      return;
 8004a1a:	e2dd      	b.n	8004fd8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8123 	beq.w	8004c6c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a2a:	4b8d      	ldr	r3, [pc, #564]	; (8004c60 <HAL_UART_IRQHandler+0x2b8>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a36:	4b8b      	ldr	r3, [pc, #556]	; (8004c64 <HAL_UART_IRQHandler+0x2bc>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8116 	beq.w	8004c6c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d011      	beq.n	8004a70 <HAL_UART_IRQHandler+0xc8>
 8004a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00b      	beq.n	8004a70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	f043 0201 	orr.w	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d011      	beq.n	8004aa0 <HAL_UART_IRQHandler+0xf8>
 8004a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00b      	beq.n	8004aa0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a96:	f043 0204 	orr.w	r2, r3, #4
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d011      	beq.n	8004ad0 <HAL_UART_IRQHandler+0x128>
 8004aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2204      	movs	r2, #4
 8004abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	f043 0202 	orr.w	r2, r3, #2
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d017      	beq.n	8004b0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d105      	bne.n	8004af4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ae8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004aec:	4b5c      	ldr	r3, [pc, #368]	; (8004c60 <HAL_UART_IRQHandler+0x2b8>)
 8004aee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2208      	movs	r2, #8
 8004afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b02:	f043 0208 	orr.w	r2, r3, #8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d012      	beq.n	8004b3e <HAL_UART_IRQHandler+0x196>
 8004b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00c      	beq.n	8004b3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	f043 0220 	orr.w	r2, r3, #32
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8249 	beq.w	8004fdc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d013      	beq.n	8004b7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d007      	beq.n	8004b7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	d005      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d054      	beq.n	8004c4c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 ff8e 	bl	8005ac4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d146      	bne.n	8004c44 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3308      	adds	r3, #8
 8004bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004be2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1d9      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d017      	beq.n	8004c3c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c12:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <HAL_UART_IRQHandler+0x2c0>)
 8004c14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fc ff34 	bl	8001a8a <HAL_DMA_Abort_IT>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d019      	beq.n	8004c5c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004c36:	4610      	mov	r0, r2
 8004c38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3a:	e00f      	b.n	8004c5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f9e0 	bl	8005002 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c42:	e00b      	b.n	8004c5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f9dc 	bl	8005002 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4a:	e007      	b.n	8004c5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f9d8 	bl	8005002 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004c5a:	e1bf      	b.n	8004fdc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5c:	bf00      	nop
    return;
 8004c5e:	e1bd      	b.n	8004fdc <HAL_UART_IRQHandler+0x634>
 8004c60:	10000001 	.word	0x10000001
 8004c64:	04000120 	.word	0x04000120
 8004c68:	08005b8f 	.word	0x08005b8f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	f040 8153 	bne.w	8004f1c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 814c 	beq.w	8004f1c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8145 	beq.w	8004f1c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2210      	movs	r2, #16
 8004c98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	f040 80bb 	bne.w	8004e20 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 818f 	beq.w	8004fe0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	f080 8187 	bcs.w	8004fe0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f040 8087 	bne.w	8004dfe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1da      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3308      	adds	r3, #8
 8004d40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e1      	bne.n	8004d3a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3308      	adds	r3, #8
 8004d96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004da0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e3      	bne.n	8004d76 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dcc:	f023 0310 	bic.w	r3, r3, #16
 8004dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dde:	65bb      	str	r3, [r7, #88]	; 0x58
 8004de0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004de4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e4      	bne.n	8004dbc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fc fde8 	bl	80019ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f8fb 	bl	8005014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e1e:	e0df      	b.n	8004fe0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80d1 	beq.w	8004fe4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004e42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 80cc 	beq.w	8004fe4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e4      	bne.n	8004e4c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3308      	adds	r3, #8
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	623b      	str	r3, [r7, #32]
   return(result);
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e1      	bne.n	8004e82 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0310 	bic.w	r3, r3, #16
 8004ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	69b9      	ldr	r1, [r7, #24]
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	617b      	str	r3, [r7, #20]
   return(result);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e4      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f87d 	bl	8005014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f1a:	e063      	b.n	8004fe4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00e      	beq.n	8004f46 <HAL_UART_IRQHandler+0x59e>
 8004f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fb82 	bl	8006648 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f44:	e051      	b.n	8004fea <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d014      	beq.n	8004f7c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d105      	bne.n	8004f6a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d008      	beq.n	8004f7c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d03a      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
    }
    return;
 8004f7a:	e035      	b.n	8004fe8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d009      	beq.n	8004f9c <HAL_UART_IRQHandler+0x5f4>
 8004f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fe10 	bl	8005bba <UART_EndTransmit_IT>
    return;
 8004f9a:	e026      	b.n	8004fea <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d009      	beq.n	8004fbc <HAL_UART_IRQHandler+0x614>
 8004fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f001 fb59 	bl	800666c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fba:	e016      	b.n	8004fea <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d010      	beq.n	8004fea <HAL_UART_IRQHandler+0x642>
 8004fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	da0c      	bge.n	8004fea <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f001 fb42 	bl	800665a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fd6:	e008      	b.n	8004fea <HAL_UART_IRQHandler+0x642>
      return;
 8004fd8:	bf00      	nop
 8004fda:	e006      	b.n	8004fea <HAL_UART_IRQHandler+0x642>
    return;
 8004fdc:	bf00      	nop
 8004fde:	e004      	b.n	8004fea <HAL_UART_IRQHandler+0x642>
      return;
 8004fe0:	bf00      	nop
 8004fe2:	e002      	b.n	8004fea <HAL_UART_IRQHandler+0x642>
      return;
 8004fe4:	bf00      	nop
 8004fe6:	e000      	b.n	8004fea <HAL_UART_IRQHandler+0x642>
    return;
 8004fe8:	bf00      	nop
  }
}
 8004fea:	37e8      	adds	r7, #232	; 0xe8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr

08005002 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr

08005014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr
	...

0800502c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800502c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005030:	b08c      	sub	sp, #48	; 0x30
 8005032:	af00      	add	r7, sp, #0
 8005034:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	431a      	orrs	r2, r3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	431a      	orrs	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	4313      	orrs	r3, r2
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b94      	ldr	r3, [pc, #592]	; (80052ac <UART_SetConfig+0x280>)
 800505c:	4013      	ands	r3, r2
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005064:	430b      	orrs	r3, r1
 8005066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a89      	ldr	r2, [pc, #548]	; (80052b0 <UART_SetConfig+0x284>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005094:	4313      	orrs	r3, r2
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80050a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050ac:	430b      	orrs	r3, r1
 80050ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	f023 010f 	bic.w	r1, r3, #15
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a7a      	ldr	r2, [pc, #488]	; (80052b4 <UART_SetConfig+0x288>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d127      	bne.n	8005120 <UART_SetConfig+0xf4>
 80050d0:	2003      	movs	r0, #3
 80050d2:	f7ff fb26 	bl	8004722 <LL_RCC_GetUSARTClockSource>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d81b      	bhi.n	8005118 <UART_SetConfig+0xec>
 80050e0:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <UART_SetConfig+0xbc>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	080050f9 	.word	0x080050f9
 80050ec:	08005109 	.word	0x08005109
 80050f0:	08005101 	.word	0x08005101
 80050f4:	08005111 	.word	0x08005111
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050fe:	e080      	b.n	8005202 <UART_SetConfig+0x1d6>
 8005100:	2302      	movs	r3, #2
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005106:	e07c      	b.n	8005202 <UART_SetConfig+0x1d6>
 8005108:	2304      	movs	r3, #4
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510e:	e078      	b.n	8005202 <UART_SetConfig+0x1d6>
 8005110:	2308      	movs	r3, #8
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005116:	e074      	b.n	8005202 <UART_SetConfig+0x1d6>
 8005118:	2310      	movs	r3, #16
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800511e:	e070      	b.n	8005202 <UART_SetConfig+0x1d6>
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a64      	ldr	r2, [pc, #400]	; (80052b8 <UART_SetConfig+0x28c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d138      	bne.n	800519c <UART_SetConfig+0x170>
 800512a:	200c      	movs	r0, #12
 800512c:	f7ff faf9 	bl	8004722 <LL_RCC_GetUSARTClockSource>
 8005130:	4603      	mov	r3, r0
 8005132:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005136:	2b0c      	cmp	r3, #12
 8005138:	d82c      	bhi.n	8005194 <UART_SetConfig+0x168>
 800513a:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <UART_SetConfig+0x114>)
 800513c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005140:	08005175 	.word	0x08005175
 8005144:	08005195 	.word	0x08005195
 8005148:	08005195 	.word	0x08005195
 800514c:	08005195 	.word	0x08005195
 8005150:	08005185 	.word	0x08005185
 8005154:	08005195 	.word	0x08005195
 8005158:	08005195 	.word	0x08005195
 800515c:	08005195 	.word	0x08005195
 8005160:	0800517d 	.word	0x0800517d
 8005164:	08005195 	.word	0x08005195
 8005168:	08005195 	.word	0x08005195
 800516c:	08005195 	.word	0x08005195
 8005170:	0800518d 	.word	0x0800518d
 8005174:	2300      	movs	r3, #0
 8005176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800517a:	e042      	b.n	8005202 <UART_SetConfig+0x1d6>
 800517c:	2302      	movs	r3, #2
 800517e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005182:	e03e      	b.n	8005202 <UART_SetConfig+0x1d6>
 8005184:	2304      	movs	r3, #4
 8005186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800518a:	e03a      	b.n	8005202 <UART_SetConfig+0x1d6>
 800518c:	2308      	movs	r3, #8
 800518e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005192:	e036      	b.n	8005202 <UART_SetConfig+0x1d6>
 8005194:	2310      	movs	r3, #16
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519a:	e032      	b.n	8005202 <UART_SetConfig+0x1d6>
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a43      	ldr	r2, [pc, #268]	; (80052b0 <UART_SetConfig+0x284>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d12a      	bne.n	80051fc <UART_SetConfig+0x1d0>
 80051a6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80051aa:	f7ff facc 	bl	8004746 <LL_RCC_GetLPUARTClockSource>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051b4:	d01a      	beq.n	80051ec <UART_SetConfig+0x1c0>
 80051b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ba:	d81b      	bhi.n	80051f4 <UART_SetConfig+0x1c8>
 80051bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c0:	d00c      	beq.n	80051dc <UART_SetConfig+0x1b0>
 80051c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c6:	d815      	bhi.n	80051f4 <UART_SetConfig+0x1c8>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <UART_SetConfig+0x1a8>
 80051cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d0:	d008      	beq.n	80051e4 <UART_SetConfig+0x1b8>
 80051d2:	e00f      	b.n	80051f4 <UART_SetConfig+0x1c8>
 80051d4:	2300      	movs	r3, #0
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051da:	e012      	b.n	8005202 <UART_SetConfig+0x1d6>
 80051dc:	2302      	movs	r3, #2
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051e2:	e00e      	b.n	8005202 <UART_SetConfig+0x1d6>
 80051e4:	2304      	movs	r3, #4
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ea:	e00a      	b.n	8005202 <UART_SetConfig+0x1d6>
 80051ec:	2308      	movs	r3, #8
 80051ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f2:	e006      	b.n	8005202 <UART_SetConfig+0x1d6>
 80051f4:	2310      	movs	r3, #16
 80051f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051fa:	e002      	b.n	8005202 <UART_SetConfig+0x1d6>
 80051fc:	2310      	movs	r3, #16
 80051fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2a      	ldr	r2, [pc, #168]	; (80052b0 <UART_SetConfig+0x284>)
 8005208:	4293      	cmp	r3, r2
 800520a:	f040 80a4 	bne.w	8005356 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800520e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005212:	2b08      	cmp	r3, #8
 8005214:	d823      	bhi.n	800525e <UART_SetConfig+0x232>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <UART_SetConfig+0x1f0>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	08005241 	.word	0x08005241
 8005220:	0800525f 	.word	0x0800525f
 8005224:	08005249 	.word	0x08005249
 8005228:	0800525f 	.word	0x0800525f
 800522c:	0800524f 	.word	0x0800524f
 8005230:	0800525f 	.word	0x0800525f
 8005234:	0800525f 	.word	0x0800525f
 8005238:	0800525f 	.word	0x0800525f
 800523c:	08005257 	.word	0x08005257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005240:	f7fd fe44 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8005244:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005246:	e010      	b.n	800526a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005248:	4b1c      	ldr	r3, [pc, #112]	; (80052bc <UART_SetConfig+0x290>)
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800524c:	e00d      	b.n	800526a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524e:	f7fd fd89 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8005252:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005254:	e009      	b.n	800526a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800525c:	e005      	b.n	800526a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005268:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 8137 	beq.w	80054e0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	4a12      	ldr	r2, [pc, #72]	; (80052c0 <UART_SetConfig+0x294>)
 8005278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800527c:	461a      	mov	r2, r3
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	fbb3 f3f2 	udiv	r3, r3, r2
 8005284:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	4413      	add	r3, r2
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	429a      	cmp	r2, r3
 8005294:	d305      	bcc.n	80052a2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d910      	bls.n	80052c4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80052a8:	e11a      	b.n	80054e0 <UART_SetConfig+0x4b4>
 80052aa:	bf00      	nop
 80052ac:	cfff69f3 	.word	0xcfff69f3
 80052b0:	40008000 	.word	0x40008000
 80052b4:	40013800 	.word	0x40013800
 80052b8:	40004400 	.word	0x40004400
 80052bc:	00f42400 	.word	0x00f42400
 80052c0:	0800b3b0 	.word	0x0800b3b0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	2200      	movs	r2, #0
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	60fa      	str	r2, [r7, #12]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	4a8e      	ldr	r2, [pc, #568]	; (800550c <UART_SetConfig+0x4e0>)
 80052d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2200      	movs	r2, #0
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052e6:	f7fa ffab 	bl	8000240 <__aeabi_uldivmod>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	020b      	lsls	r3, r1, #8
 80052fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005300:	0202      	lsls	r2, r0, #8
 8005302:	6979      	ldr	r1, [r7, #20]
 8005304:	6849      	ldr	r1, [r1, #4]
 8005306:	0849      	lsrs	r1, r1, #1
 8005308:	2000      	movs	r0, #0
 800530a:	460c      	mov	r4, r1
 800530c:	4605      	mov	r5, r0
 800530e:	eb12 0804 	adds.w	r8, r2, r4
 8005312:	eb43 0905 	adc.w	r9, r3, r5
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	469a      	mov	sl, r3
 800531e:	4693      	mov	fp, r2
 8005320:	4652      	mov	r2, sl
 8005322:	465b      	mov	r3, fp
 8005324:	4640      	mov	r0, r8
 8005326:	4649      	mov	r1, r9
 8005328:	f7fa ff8a 	bl	8000240 <__aeabi_uldivmod>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4613      	mov	r3, r2
 8005332:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800533a:	d308      	bcc.n	800534e <UART_SetConfig+0x322>
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005342:	d204      	bcs.n	800534e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6a3a      	ldr	r2, [r7, #32]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	e0c8      	b.n	80054e0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005354:	e0c4      	b.n	80054e0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800535e:	d167      	bne.n	8005430 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005360:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005364:	2b08      	cmp	r3, #8
 8005366:	d828      	bhi.n	80053ba <UART_SetConfig+0x38e>
 8005368:	a201      	add	r2, pc, #4	; (adr r2, 8005370 <UART_SetConfig+0x344>)
 800536a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536e:	bf00      	nop
 8005370:	08005395 	.word	0x08005395
 8005374:	0800539d 	.word	0x0800539d
 8005378:	080053a5 	.word	0x080053a5
 800537c:	080053bb 	.word	0x080053bb
 8005380:	080053ab 	.word	0x080053ab
 8005384:	080053bb 	.word	0x080053bb
 8005388:	080053bb 	.word	0x080053bb
 800538c:	080053bb 	.word	0x080053bb
 8005390:	080053b3 	.word	0x080053b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005394:	f7fd fd9a 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8005398:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800539a:	e014      	b.n	80053c6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800539c:	f7fd fda8 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 80053a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053a2:	e010      	b.n	80053c6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a4:	4b5a      	ldr	r3, [pc, #360]	; (8005510 <UART_SetConfig+0x4e4>)
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053a8:	e00d      	b.n	80053c6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053aa:	f7fd fcdb 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 80053ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053b0:	e009      	b.n	80053c6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053b8:	e005      	b.n	80053c6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8089 	beq.w	80054e0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	4a4e      	ldr	r2, [pc, #312]	; (800550c <UART_SetConfig+0x4e0>)
 80053d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d8:	461a      	mov	r2, r3
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e0:	005a      	lsls	r2, r3, #1
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	085b      	lsrs	r3, r3, #1
 80053e8:	441a      	add	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	d916      	bls.n	8005428 <UART_SetConfig+0x3fc>
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005400:	d212      	bcs.n	8005428 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	b29b      	uxth	r3, r3
 8005406:	f023 030f 	bic.w	r3, r3, #15
 800540a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	b29a      	uxth	r2, r3
 8005418:	8bfb      	ldrh	r3, [r7, #30]
 800541a:	4313      	orrs	r3, r2
 800541c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	8bfa      	ldrh	r2, [r7, #30]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	e05b      	b.n	80054e0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800542e:	e057      	b.n	80054e0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005430:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005434:	2b08      	cmp	r3, #8
 8005436:	d828      	bhi.n	800548a <UART_SetConfig+0x45e>
 8005438:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <UART_SetConfig+0x414>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005465 	.word	0x08005465
 8005444:	0800546d 	.word	0x0800546d
 8005448:	08005475 	.word	0x08005475
 800544c:	0800548b 	.word	0x0800548b
 8005450:	0800547b 	.word	0x0800547b
 8005454:	0800548b 	.word	0x0800548b
 8005458:	0800548b 	.word	0x0800548b
 800545c:	0800548b 	.word	0x0800548b
 8005460:	08005483 	.word	0x08005483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005464:	f7fd fd32 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8005468:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800546a:	e014      	b.n	8005496 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800546c:	f7fd fd40 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8005470:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005472:	e010      	b.n	8005496 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005474:	4b26      	ldr	r3, [pc, #152]	; (8005510 <UART_SetConfig+0x4e4>)
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005478:	e00d      	b.n	8005496 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800547a:	f7fd fc73 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 800547e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005480:	e009      	b.n	8005496 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005488:	e005      	b.n	8005496 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005494:	bf00      	nop
    }

    if (pclk != 0U)
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	d021      	beq.n	80054e0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	4a1a      	ldr	r2, [pc, #104]	; (800550c <UART_SetConfig+0x4e0>)
 80054a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	441a      	add	r2, r3
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	2b0f      	cmp	r3, #15
 80054c4:	d909      	bls.n	80054da <UART_SetConfig+0x4ae>
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054cc:	d205      	bcs.n	80054da <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60da      	str	r2, [r3, #12]
 80054d8:	e002      	b.n	80054e0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2200      	movs	r2, #0
 80054f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80054fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005500:	4618      	mov	r0, r3
 8005502:	3730      	adds	r7, #48	; 0x30
 8005504:	46bd      	mov	sp, r7
 8005506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800550a:	bf00      	nop
 800550c:	0800b3b0 	.word	0x0800b3b0
 8005510:	00f42400 	.word	0x00f42400

08005514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01a      	beq.n	800562a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005612:	d10a      	bne.n	800562a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	605a      	str	r2, [r3, #4]
  }
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr

08005656 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b086      	sub	sp, #24
 800565a:	af02      	add	r7, sp, #8
 800565c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005666:	f7fb ff3d 	bl	80014e4 <HAL_GetTick>
 800566a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b08      	cmp	r3, #8
 8005678:	d10e      	bne.n	8005698 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800567a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f832 	bl	80056f2 <UART_WaitOnFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e028      	b.n	80056ea <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d10e      	bne.n	80056c4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f81c 	bl	80056f2 <UART_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e012      	b.n	80056ea <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b09c      	sub	sp, #112	; 0x70
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	603b      	str	r3, [r7, #0]
 80056fe:	4613      	mov	r3, r2
 8005700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005702:	e0a9      	b.n	8005858 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800570a:	f000 80a5 	beq.w	8005858 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570e:	f7fb fee9 	bl	80014e4 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800571a:	429a      	cmp	r2, r3
 800571c:	d302      	bcc.n	8005724 <UART_WaitOnFlagUntilTimeout+0x32>
 800571e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005720:	2b00      	cmp	r3, #0
 8005722:	d140      	bne.n	80057a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005734:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005738:	667b      	str	r3, [r7, #100]	; 0x64
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005742:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005744:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005748:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e6      	bne.n	8005724 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3308      	adds	r3, #8
 800575c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	f023 0301 	bic.w	r3, r3, #1
 800576c:	663b      	str	r3, [r7, #96]	; 0x60
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3308      	adds	r3, #8
 8005774:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005776:	64ba      	str	r2, [r7, #72]	; 0x48
 8005778:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800577c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e5      	bne.n	8005756 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e069      	b.n	800587a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d051      	beq.n	8005858 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c2:	d149      	bne.n	8005858 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
 80057ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e6      	bne.n	80057ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3308      	adds	r3, #8
 8005806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	613b      	str	r3, [r7, #16]
   return(result);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	66bb      	str	r3, [r7, #104]	; 0x68
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3308      	adds	r3, #8
 800581e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005820:	623a      	str	r2, [r7, #32]
 8005822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	69f9      	ldr	r1, [r7, #28]
 8005826:	6a3a      	ldr	r2, [r7, #32]
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	61bb      	str	r3, [r7, #24]
   return(result);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e5      	bne.n	8005800 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e010      	b.n	800587a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4013      	ands	r3, r2
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	429a      	cmp	r2, r3
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	429a      	cmp	r2, r3
 8005874:	f43f af46 	beq.w	8005704 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3770      	adds	r7, #112	; 0x70
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005884:	b480      	push	{r7}
 8005886:	b0a3      	sub	sp, #140	; 0x8c
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	4613      	mov	r3, r2
 8005890:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	88fa      	ldrh	r2, [r7, #6]
 800589c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b6:	d10e      	bne.n	80058d6 <UART_Start_Receive_IT+0x52>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d105      	bne.n	80058cc <UART_Start_Receive_IT+0x48>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80058c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058ca:	e02d      	b.n	8005928 <UART_Start_Receive_IT+0xa4>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	22ff      	movs	r2, #255	; 0xff
 80058d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058d4:	e028      	b.n	8005928 <UART_Start_Receive_IT+0xa4>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10d      	bne.n	80058fa <UART_Start_Receive_IT+0x76>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d104      	bne.n	80058f0 <UART_Start_Receive_IT+0x6c>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	22ff      	movs	r2, #255	; 0xff
 80058ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058ee:	e01b      	b.n	8005928 <UART_Start_Receive_IT+0xa4>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	227f      	movs	r2, #127	; 0x7f
 80058f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058f8:	e016      	b.n	8005928 <UART_Start_Receive_IT+0xa4>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005902:	d10d      	bne.n	8005920 <UART_Start_Receive_IT+0x9c>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <UART_Start_Receive_IT+0x92>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	227f      	movs	r2, #127	; 0x7f
 8005910:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005914:	e008      	b.n	8005928 <UART_Start_Receive_IT+0xa4>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	223f      	movs	r2, #63	; 0x3f
 800591a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800591e:	e003      	b.n	8005928 <UART_Start_Receive_IT+0xa4>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2222      	movs	r2, #34	; 0x22
 8005934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3308      	adds	r3, #8
 800593e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3308      	adds	r3, #8
 8005958:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800595c:	673a      	str	r2, [r7, #112]	; 0x70
 800595e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005962:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800596a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e3      	bne.n	8005938 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005978:	d14f      	bne.n	8005a1a <UART_Start_Receive_IT+0x196>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005980:	88fa      	ldrh	r2, [r7, #6]
 8005982:	429a      	cmp	r2, r3
 8005984:	d349      	bcc.n	8005a1a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598e:	d107      	bne.n	80059a0 <UART_Start_Receive_IT+0x11c>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d103      	bne.n	80059a0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4a46      	ldr	r2, [pc, #280]	; (8005ab4 <UART_Start_Receive_IT+0x230>)
 800599c:	675a      	str	r2, [r3, #116]	; 0x74
 800599e:	e002      	b.n	80059a6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4a45      	ldr	r2, [pc, #276]	; (8005ab8 <UART_Start_Receive_IT+0x234>)
 80059a4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01a      	beq.n	80059e4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059d2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e4      	bne.n	80059ae <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3308      	adds	r3, #8
 80059ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005a04:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e5      	bne.n	80059e4 <UART_Start_Receive_IT+0x160>
 8005a18:	e046      	b.n	8005aa8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a22:	d107      	bne.n	8005a34 <UART_Start_Receive_IT+0x1b0>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d103      	bne.n	8005a34 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a23      	ldr	r2, [pc, #140]	; (8005abc <UART_Start_Receive_IT+0x238>)
 8005a30:	675a      	str	r2, [r3, #116]	; 0x74
 8005a32:	e002      	b.n	8005a3a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <UART_Start_Receive_IT+0x23c>)
 8005a38:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d019      	beq.n	8005a76 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005a56:	677b      	str	r3, [r7, #116]	; 0x74
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a60:	637b      	str	r3, [r7, #52]	; 0x34
 8005a62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e6      	bne.n	8005a42 <UART_Start_Receive_IT+0x1be>
 8005a74:	e018      	b.n	8005aa8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	613b      	str	r3, [r7, #16]
   return(result);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f043 0320 	orr.w	r3, r3, #32
 8005a8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a94:	623b      	str	r3, [r7, #32]
 8005a96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	69f9      	ldr	r1, [r7, #28]
 8005a9a:	6a3a      	ldr	r2, [r7, #32]
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e6      	bne.n	8005a76 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	378c      	adds	r7, #140	; 0x8c
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr
 8005ab4:	080062e1 	.word	0x080062e1
 8005ab8:	08005f81 	.word	0x08005f81
 8005abc:	08005dc9 	.word	0x08005dc9
 8005ac0:	08005c11 	.word	0x08005c11

08005ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b095      	sub	sp, #84	; 0x54
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aea:	643b      	str	r3, [r7, #64]	; 0x40
 8005aec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e6      	bne.n	8005acc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3308      	adds	r3, #8
 8005b04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e3      	bne.n	8005afe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d118      	bne.n	8005b70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f023 0310 	bic.w	r3, r3, #16
 8005b52:	647b      	str	r3, [r7, #68]	; 0x44
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6979      	ldr	r1, [r7, #20]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e6      	bne.n	8005b3e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005b84:	bf00      	nop
 8005b86:	3754      	adds	r7, #84	; 0x54
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr

08005b8e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff fa28 	bl	8005002 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b088      	sub	sp, #32
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	6979      	ldr	r1, [r7, #20]
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	613b      	str	r3, [r7, #16]
   return(result);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e6      	bne.n	8005bc2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff f9f4 	bl	8004ff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c08:	bf00      	nop
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b09c      	sub	sp, #112	; 0x70
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c28:	2b22      	cmp	r3, #34	; 0x22
 8005c2a:	f040 80be 	bne.w	8005daa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005c3c:	b2d9      	uxtb	r1, r3
 8005c3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c48:	400a      	ands	r2, r1
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f040 80a1 	bne.w	8005dba <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c96:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e6      	bne.n	8005c78 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3308      	adds	r3, #8
 8005cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	667b      	str	r3, [r7, #100]	; 0x64
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005cca:	647a      	str	r2, [r7, #68]	; 0x44
 8005ccc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e5      	bne.n	8005caa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a33      	ldr	r2, [pc, #204]	; (8005dc4 <UART_RxISR_8BIT+0x1b4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d01f      	beq.n	8005d3c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d018      	beq.n	8005d3c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	623b      	str	r3, [r7, #32]
   return(result);
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d1e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d28:	633b      	str	r3, [r7, #48]	; 0x30
 8005d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e6      	bne.n	8005d0a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d12e      	bne.n	8005da2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0310 	bic.w	r3, r3, #16
 8005d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d68:	61fb      	str	r3, [r7, #28]
 8005d6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	69b9      	ldr	r1, [r7, #24]
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	617b      	str	r3, [r7, #20]
   return(result);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e6      	bne.n	8005d4a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b10      	cmp	r3, #16
 8005d88:	d103      	bne.n	8005d92 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2210      	movs	r2, #16
 8005d90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff f93a 	bl	8005014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005da0:	e00b      	b.n	8005dba <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fb f85e 	bl	8000e64 <HAL_UART_RxCpltCallback>
}
 8005da8:	e007      	b.n	8005dba <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0208 	orr.w	r2, r2, #8
 8005db8:	619a      	str	r2, [r3, #24]
}
 8005dba:	bf00      	nop
 8005dbc:	3770      	adds	r7, #112	; 0x70
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40008000 	.word	0x40008000

08005dc8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b09c      	sub	sp, #112	; 0x70
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005dd6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005de0:	2b22      	cmp	r3, #34	; 0x22
 8005de2:	f040 80be 	bne.w	8005f62 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005df6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005dfa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005dfe:	4013      	ands	r3, r2
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0a:	1c9a      	adds	r2, r3, #2
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f040 80a1 	bne.w	8005f72 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e44:	667b      	str	r3, [r7, #100]	; 0x64
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e50:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e6      	bne.n	8005e30 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	f023 0301 	bic.w	r3, r3, #1
 8005e78:	663b      	str	r3, [r7, #96]	; 0x60
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e82:	643a      	str	r2, [r7, #64]	; 0x40
 8005e84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e5      	bne.n	8005e62 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a33      	ldr	r2, [pc, #204]	; (8005f7c <UART_RxISR_16BIT+0x1b4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d01f      	beq.n	8005ef4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d018      	beq.n	8005ef4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ee2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e6      	bne.n	8005ec2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d12e      	bne.n	8005f5a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f023 0310 	bic.w	r3, r3, #16
 8005f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f20:	61bb      	str	r3, [r7, #24]
 8005f22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6979      	ldr	r1, [r7, #20]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e6      	bne.n	8005f02 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d103      	bne.n	8005f4a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2210      	movs	r2, #16
 8005f48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff f85e 	bl	8005014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f58:	e00b      	b.n	8005f72 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fa ff82 	bl	8000e64 <HAL_UART_RxCpltCallback>
}
 8005f60:	e007      	b.n	8005f72 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699a      	ldr	r2, [r3, #24]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0208 	orr.w	r2, r2, #8
 8005f70:	619a      	str	r2, [r3, #24]
}
 8005f72:	bf00      	nop
 8005f74:	3770      	adds	r7, #112	; 0x70
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40008000 	.word	0x40008000

08005f80 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b0ac      	sub	sp, #176	; 0xb0
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005f8e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb6:	2b22      	cmp	r3, #34	; 0x22
 8005fb8:	f040 8182 	bne.w	80062c0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005fc2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005fc6:	e125      	b.n	8006214 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005fd2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005fd6:	b2d9      	uxtb	r1, r3
 8005fd8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe2:	400a      	ands	r2, r1
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800600e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	2b00      	cmp	r3, #0
 8006018:	d053      	beq.n	80060c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800601a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d011      	beq.n	800604a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00b      	beq.n	800604a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2201      	movs	r2, #1
 8006038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006040:	f043 0201 	orr.w	r2, r3, #1
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800604a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d011      	beq.n	800607a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2202      	movs	r2, #2
 8006068:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006070:	f043 0204 	orr.w	r2, r3, #4
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800607a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d011      	beq.n	80060aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2204      	movs	r2, #4
 8006098:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a0:	f043 0202 	orr.w	r2, r3, #2
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d006      	beq.n	80060c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7fe ffa4 	bl	8005002 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f040 80a2 	bne.w	8006214 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80060de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060f4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80060f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e4      	bne.n	80060d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3308      	adds	r3, #8
 800610c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800611c:	f023 0301 	bic.w	r3, r3, #1
 8006120:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800612e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006130:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006134:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800613c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e1      	bne.n	8006106 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a5f      	ldr	r2, [pc, #380]	; (80062d8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d021      	beq.n	80061a4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01a      	beq.n	80061a4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800617c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800617e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006190:	657b      	str	r3, [r7, #84]	; 0x54
 8006192:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006196:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800619e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e4      	bne.n	800616e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d130      	bne.n	800620e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	f023 0310 	bic.w	r3, r3, #16
 80061c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061d4:	643b      	str	r3, [r7, #64]	; 0x40
 80061d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e4      	bne.n	80061b2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b10      	cmp	r3, #16
 80061f4:	d103      	bne.n	80061fe <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2210      	movs	r2, #16
 80061fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fe ff04 	bl	8005014 <HAL_UARTEx_RxEventCallback>
 800620c:	e002      	b.n	8006214 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fa fe28 	bl	8000e64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006214:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006218:	2b00      	cmp	r3, #0
 800621a:	d006      	beq.n	800622a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800621c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	f47f aecf 	bne.w	8005fc8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006230:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006234:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006238:	2b00      	cmp	r3, #0
 800623a:	d049      	beq.n	80062d0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006242:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006246:	429a      	cmp	r2, r3
 8006248:	d242      	bcs.n	80062d0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	61fb      	str	r3, [r7, #28]
   return(result);
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3308      	adds	r3, #8
 800626a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800626e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e3      	bne.n	800624a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a15      	ldr	r2, [pc, #84]	; (80062dc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006286:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	60bb      	str	r3, [r7, #8]
   return(result);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f043 0320 	orr.w	r3, r3, #32
 800629c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062aa:	61bb      	str	r3, [r7, #24]
 80062ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ae:	6979      	ldr	r1, [r7, #20]
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	613b      	str	r3, [r7, #16]
   return(result);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e4      	bne.n	8006288 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062be:	e007      	b.n	80062d0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0208 	orr.w	r2, r2, #8
 80062ce:	619a      	str	r2, [r3, #24]
}
 80062d0:	bf00      	nop
 80062d2:	37b0      	adds	r7, #176	; 0xb0
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	40008000 	.word	0x40008000
 80062dc:	08005c11 	.word	0x08005c11

080062e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b0ae      	sub	sp, #184	; 0xb8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80062ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006316:	2b22      	cmp	r3, #34	; 0x22
 8006318:	f040 8186 	bne.w	8006628 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006322:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006326:	e129      	b.n	800657c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800633a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800633e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006342:	4013      	ands	r3, r2
 8006344:	b29a      	uxth	r2, r3
 8006346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800634a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	1c9a      	adds	r2, r3, #2
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006372:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	2b00      	cmp	r3, #0
 800637c:	d053      	beq.n	8006426 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800637e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d011      	beq.n	80063ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800638a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800638e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2201      	movs	r2, #1
 800639c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a4:	f043 0201 	orr.w	r2, r3, #1
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d011      	beq.n	80063de <UART_RxISR_16BIT_FIFOEN+0xfe>
 80063ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00b      	beq.n	80063de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2202      	movs	r2, #2
 80063cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d4:	f043 0204 	orr.w	r2, r3, #4
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d011      	beq.n	800640e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80063ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00b      	beq.n	800640e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2204      	movs	r2, #4
 80063fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006404:	f043 0202 	orr.w	r2, r3, #2
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006414:	2b00      	cmp	r3, #0
 8006416:	d006      	beq.n	8006426 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7fe fdf2 	bl	8005002 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 80a4 	bne.w	800657c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006456:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800645a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800645e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e2      	bne.n	8006434 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3308      	adds	r3, #8
 8006474:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800647e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006496:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006498:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800649c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e1      	bne.n	800646e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a5f      	ldr	r2, [pc, #380]	; (8006640 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d021      	beq.n	800650c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01a      	beq.n	800650c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80064fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e4      	bne.n	80064d6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006510:	2b01      	cmp	r3, #1
 8006512:	d130      	bne.n	8006576 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652a:	f023 0310 	bic.w	r3, r3, #16
 800652e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800653c:	647b      	str	r3, [r7, #68]	; 0x44
 800653e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800654a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e4      	bne.n	800651a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b10      	cmp	r3, #16
 800655c:	d103      	bne.n	8006566 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2210      	movs	r2, #16
 8006564:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fe fd50 	bl	8005014 <HAL_UARTEx_RxEventCallback>
 8006574:	e002      	b.n	800657c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fa fc74 	bl	8000e64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800657c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006580:	2b00      	cmp	r3, #0
 8006582:	d006      	beq.n	8006592 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006584:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	f47f aecb 	bne.w	8006328 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006598:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800659c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d049      	beq.n	8006638 <UART_RxISR_16BIT_FIFOEN+0x358>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80065aa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d242      	bcs.n	8006638 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	623b      	str	r3, [r7, #32]
   return(result);
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3308      	adds	r3, #8
 80065d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80065d6:	633a      	str	r2, [r7, #48]	; 0x30
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e3      	bne.n	80065b2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a15      	ldr	r2, [pc, #84]	; (8006644 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80065ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f043 0320 	orr.w	r3, r3, #32
 8006604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	69b9      	ldr	r1, [r7, #24]
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	617b      	str	r3, [r7, #20]
   return(result);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e4      	bne.n	80065f0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006626:	e007      	b.n	8006638 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0208 	orr.w	r2, r2, #8
 8006636:	619a      	str	r2, [r3, #24]
}
 8006638:	bf00      	nop
 800663a:	37b8      	adds	r7, #184	; 0xb8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40008000 	.word	0x40008000
 8006644:	08005dc9 	.word	0x08005dc9

08006648 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr

0800665a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr

0800666c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	bc80      	pop	{r7}
 800667c:	4770      	bx	lr

0800667e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_UARTEx_DisableFifoMode+0x16>
 8006690:	2302      	movs	r3, #2
 8006692:	e027      	b.n	80066e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2224      	movs	r2, #36	; 0x24
 80066a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0201 	bic.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bc80      	pop	{r7}
 80066ec:	4770      	bx	lr

080066ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b084      	sub	sp, #16
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006702:	2302      	movs	r3, #2
 8006704:	e02d      	b.n	8006762 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2224      	movs	r2, #36	; 0x24
 8006712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0201 	bic.w	r2, r2, #1
 800672c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f850 	bl	80067e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800677e:	2302      	movs	r3, #2
 8006780:	e02d      	b.n	80067de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2224      	movs	r2, #36	; 0x24
 800678e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0201 	bic.w	r2, r2, #1
 80067a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f812 	bl	80067e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d108      	bne.n	800680a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006808:	e031      	b.n	800686e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800680a:	2308      	movs	r3, #8
 800680c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800680e:	2308      	movs	r3, #8
 8006810:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	0e5b      	lsrs	r3, r3, #25
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	0f5b      	lsrs	r3, r3, #29
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	7b3a      	ldrb	r2, [r7, #12]
 8006836:	4910      	ldr	r1, [pc, #64]	; (8006878 <UARTEx_SetNbDataToProcess+0x90>)
 8006838:	5c8a      	ldrb	r2, [r1, r2]
 800683a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800683e:	7b3a      	ldrb	r2, [r7, #12]
 8006840:	490e      	ldr	r1, [pc, #56]	; (800687c <UARTEx_SetNbDataToProcess+0x94>)
 8006842:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006844:	fb93 f3f2 	sdiv	r3, r3, r2
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	7b7a      	ldrb	r2, [r7, #13]
 8006854:	4908      	ldr	r1, [pc, #32]	; (8006878 <UARTEx_SetNbDataToProcess+0x90>)
 8006856:	5c8a      	ldrb	r2, [r1, r2]
 8006858:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800685c:	7b7a      	ldrb	r2, [r7, #13]
 800685e:	4907      	ldr	r1, [pc, #28]	; (800687c <UARTEx_SetNbDataToProcess+0x94>)
 8006860:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006862:	fb93 f3f2 	sdiv	r3, r3, r2
 8006866:	b29a      	uxth	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800686e:	bf00      	nop
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr
 8006878:	0800b3c8 	.word	0x0800b3c8
 800687c:	0800b3d0 	.word	0x0800b3d0

08006880 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af02      	add	r7, sp, #8
 8006886:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8006888:	4a24      	ldr	r2, [pc, #144]	; (800691c <RadioInit+0x9c>)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800688e:	4b24      	ldr	r3, [pc, #144]	; (8006920 <RadioInit+0xa0>)
 8006890:	2200      	movs	r2, #0
 8006892:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8006894:	4b22      	ldr	r3, [pc, #136]	; (8006920 <RadioInit+0xa0>)
 8006896:	2200      	movs	r2, #0
 8006898:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800689a:	4b21      	ldr	r3, [pc, #132]	; (8006920 <RadioInit+0xa0>)
 800689c:	2200      	movs	r2, #0
 800689e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80068a0:	4b1f      	ldr	r3, [pc, #124]	; (8006920 <RadioInit+0xa0>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80068a6:	481f      	ldr	r0, [pc, #124]	; (8006924 <RadioInit+0xa4>)
 80068a8:	f001 ff88 	bl	80087bc <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80068ac:	4b1c      	ldr	r3, [pc, #112]	; (8006920 <RadioInit+0xa0>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80068b2:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <RadioInit+0xa0>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80068b8:	f002 fa1c 	bl	8008cf4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80068bc:	2100      	movs	r1, #0
 80068be:	2000      	movs	r0, #0
 80068c0:	f002 fde8 	bl	8009494 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80068c4:	2204      	movs	r2, #4
 80068c6:	2100      	movs	r1, #0
 80068c8:	2001      	movs	r0, #1
 80068ca:	f002 fba5 	bl	8009018 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80068ce:	2300      	movs	r3, #0
 80068d0:	2200      	movs	r2, #0
 80068d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80068d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80068da:	f002 fad5 	bl	8008e88 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80068de:	f000 fe91 	bl	8007604 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80068e2:	2300      	movs	r3, #0
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	4b10      	ldr	r3, [pc, #64]	; (8006928 <RadioInit+0xa8>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80068ee:	480f      	ldr	r0, [pc, #60]	; (800692c <RadioInit+0xac>)
 80068f0:	f003 fb32 	bl	8009f58 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80068f4:	2300      	movs	r3, #0
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	4b0d      	ldr	r3, [pc, #52]	; (8006930 <RadioInit+0xb0>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006900:	480c      	ldr	r0, [pc, #48]	; (8006934 <RadioInit+0xb4>)
 8006902:	f003 fb29 	bl	8009f58 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8006906:	4809      	ldr	r0, [pc, #36]	; (800692c <RadioInit+0xac>)
 8006908:	f003 fbca 	bl	800a0a0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800690c:	4809      	ldr	r0, [pc, #36]	; (8006934 <RadioInit+0xb4>)
 800690e:	f003 fbc7 	bl	800a0a0 <UTIL_TIMER_Stop>
}
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000484 	.word	0x20000484
 8006920:	20000488 	.word	0x20000488
 8006924:	080079fd 	.word	0x080079fd
 8006928:	08007985 	.word	0x08007985
 800692c:	200004e4 	.word	0x200004e4
 8006930:	08007999 	.word	0x08007999
 8006934:	200004fc 	.word	0x200004fc

08006938 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800693c:	f001 ff86 	bl	800884c <SUBGRF_GetOperatingMode>
 8006940:	4603      	mov	r3, r0
 8006942:	2b07      	cmp	r3, #7
 8006944:	d00a      	beq.n	800695c <RadioGetStatus+0x24>
 8006946:	2b07      	cmp	r3, #7
 8006948:	dc0a      	bgt.n	8006960 <RadioGetStatus+0x28>
 800694a:	2b04      	cmp	r3, #4
 800694c:	d002      	beq.n	8006954 <RadioGetStatus+0x1c>
 800694e:	2b05      	cmp	r3, #5
 8006950:	d002      	beq.n	8006958 <RadioGetStatus+0x20>
 8006952:	e005      	b.n	8006960 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8006954:	2302      	movs	r3, #2
 8006956:	e004      	b.n	8006962 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8006958:	2301      	movs	r3, #1
 800695a:	e002      	b.n	8006962 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800695c:	2303      	movs	r3, #3
 800695e:	e000      	b.n	8006962 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8006960:	2300      	movs	r3, #0
    }
}
 8006962:	4618      	mov	r0, r3
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8006972:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <RadioSetModem+0xb4>)
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	4618      	mov	r0, r3
 800697c:	f003 f95d 	bl	8009c3a <RFW_SetRadioModem>
    switch( modem )
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	2b05      	cmp	r3, #5
 8006984:	d80e      	bhi.n	80069a4 <RadioSetModem+0x3c>
 8006986:	a201      	add	r2, pc, #4	; (adr r2, 800698c <RadioSetModem+0x24>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	080069b3 	.word	0x080069b3
 8006990:	080069c1 	.word	0x080069c1
 8006994:	080069a5 	.word	0x080069a5
 8006998:	080069e7 	.word	0x080069e7
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	08006a03 	.word	0x08006a03
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80069a4:	2003      	movs	r0, #3
 80069a6:	f002 fb11 	bl	8008fcc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80069aa:	4b1c      	ldr	r3, [pc, #112]	; (8006a1c <RadioSetModem+0xb4>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	735a      	strb	r2, [r3, #13]
        break;
 80069b0:	e02f      	b.n	8006a12 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80069b2:	2000      	movs	r0, #0
 80069b4:	f002 fb0a 	bl	8008fcc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80069b8:	4b18      	ldr	r3, [pc, #96]	; (8006a1c <RadioSetModem+0xb4>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	735a      	strb	r2, [r3, #13]
        break;
 80069be:	e028      	b.n	8006a12 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80069c0:	2001      	movs	r0, #1
 80069c2:	f002 fb03 	bl	8008fcc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80069c6:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <RadioSetModem+0xb4>)
 80069c8:	7b5a      	ldrb	r2, [r3, #13]
 80069ca:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <RadioSetModem+0xb4>)
 80069cc:	7b1b      	ldrb	r3, [r3, #12]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d01e      	beq.n	8006a10 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80069d2:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <RadioSetModem+0xb4>)
 80069d4:	7b1a      	ldrb	r2, [r3, #12]
 80069d6:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <RadioSetModem+0xb4>)
 80069d8:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80069da:	4b10      	ldr	r3, [pc, #64]	; (8006a1c <RadioSetModem+0xb4>)
 80069dc:	7b5b      	ldrb	r3, [r3, #13]
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 ff9a 	bl	8007918 <RadioSetPublicNetwork>
        }
        break;
 80069e4:	e014      	b.n	8006a10 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80069e6:	2002      	movs	r0, #2
 80069e8:	f002 faf0 	bl	8008fcc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80069ec:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <RadioSetModem+0xb4>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	735a      	strb	r2, [r3, #13]
        break;
 80069f2:	e00e      	b.n	8006a12 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80069f4:	2002      	movs	r0, #2
 80069f6:	f002 fae9 	bl	8008fcc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80069fa:	4b08      	ldr	r3, [pc, #32]	; (8006a1c <RadioSetModem+0xb4>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	735a      	strb	r2, [r3, #13]
        break;
 8006a00:	e007      	b.n	8006a12 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006a02:	2000      	movs	r0, #0
 8006a04:	f002 fae2 	bl	8008fcc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006a08:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <RadioSetModem+0xb4>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	735a      	strb	r2, [r3, #13]
        break;
 8006a0e:	e000      	b.n	8006a12 <RadioSetModem+0xaa>
        break;
 8006a10:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000488 	.word	0x20000488

08006a20 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f002 fa89 	bl	8008f40 <SUBGRF_SetRfFrequency>
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b090      	sub	sp, #64	; 0x40
 8006a3a:	af0a      	add	r7, sp, #40	; 0x28
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8006a46:	2301      	movs	r3, #1
 8006a48:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8006a52:	f000 fdea 	bl	800762a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8006a56:	2000      	movs	r0, #0
 8006a58:	f7ff ff86 	bl	8006968 <RadioSetModem>

    RadioSetChannel( freq );
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f7ff ffdf 	bl	8006a20 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8006a62:	2301      	movs	r3, #1
 8006a64:	9309      	str	r3, [sp, #36]	; 0x24
 8006a66:	2300      	movs	r3, #0
 8006a68:	9308      	str	r3, [sp, #32]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9307      	str	r3, [sp, #28]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9306      	str	r3, [sp, #24]
 8006a72:	2300      	movs	r3, #0
 8006a74:	9305      	str	r3, [sp, #20]
 8006a76:	2300      	movs	r3, #0
 8006a78:	9304      	str	r3, [sp, #16]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	9303      	str	r3, [sp, #12]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	9302      	str	r3, [sp, #8]
 8006a82:	2303      	movs	r3, #3
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006a90:	68b9      	ldr	r1, [r7, #8]
 8006a92:	2000      	movs	r0, #0
 8006a94:	f000 f83c 	bl	8006b10 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8006a98:	2000      	movs	r0, #0
 8006a9a:	f000 fdcd 	bl	8007638 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8006a9e:	f000 ff69 	bl	8007974 <RadioGetWakeupTime>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fa fd31 	bl	800150c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8006aaa:	f003 fb93 	bl	800a1d4 <UTIL_TIMER_GetCurrentTime>
 8006aae:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006ab0:	e00d      	b.n	8006ace <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f000 feae 	bl	8007814 <RadioRssi>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8006abc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	dd02      	ble.n	8006ace <RadioIsChannelFree+0x98>
        {
            status = false;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	75fb      	strb	r3, [r7, #23]
            break;
 8006acc:	e006      	b.n	8006adc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006ace:	6938      	ldr	r0, [r7, #16]
 8006ad0:	f003 fb92 	bl	800a1f8 <UTIL_TIMER_GetElapsedTime>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d8ea      	bhi.n	8006ab2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8006adc:	f000 fda5 	bl	800762a <RadioStandby>

    return status;
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006af4:	2300      	movs	r3, #0
 8006af6:	2200      	movs	r2, #0
 8006af8:	2100      	movs	r1, #0
 8006afa:	2000      	movs	r0, #0
 8006afc:	f002 f9c4 	bl	8008e88 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8006b00:	f001 ff75 	bl	80089ee <SUBGRF_GetRandom>
 8006b04:	6078      	str	r0, [r7, #4]

    return rnd;
 8006b06:	687b      	ldr	r3, [r7, #4]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	73fb      	strb	r3, [r7, #15]
 8006b20:	4613      	mov	r3, r2
 8006b22:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8006b24:	4ab9      	ldr	r2, [pc, #740]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006b26:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006b2a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8006b2c:	f003 f843 	bl	8009bb6 <RFW_DeInit>
    if( rxContinuous == true )
 8006b30:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8006b3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d004      	beq.n	8006b4e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8006b44:	4ab2      	ldr	r2, [pc, #712]	; (8006e10 <RadioSetRxConfig+0x300>)
 8006b46:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006b4a:	7013      	strb	r3, [r2, #0]
 8006b4c:	e002      	b.n	8006b54 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8006b4e:	4bb0      	ldr	r3, [pc, #704]	; (8006e10 <RadioSetRxConfig+0x300>)
 8006b50:	22ff      	movs	r2, #255	; 0xff
 8006b52:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b05      	cmp	r3, #5
 8006b58:	d009      	beq.n	8006b6e <RadioSetRxConfig+0x5e>
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	f300 81d7 	bgt.w	8006f0e <RadioSetRxConfig+0x3fe>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 80bf 	beq.w	8006ce4 <RadioSetRxConfig+0x1d4>
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	f000 8124 	beq.w	8006db4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8006b6c:	e1cf      	b.n	8006f0e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8006b6e:	2001      	movs	r0, #1
 8006b70:	f002 f882 	bl	8008c78 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006b74:	4ba5      	ldr	r3, [pc, #660]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006b7c:	4aa3      	ldr	r2, [pc, #652]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8006b82:	4ba2      	ldr	r3, [pc, #648]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006b84:	2209      	movs	r2, #9
 8006b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8006b8a:	4ba0      	ldr	r3, [pc, #640]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006b8c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006b90:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006b92:	68b8      	ldr	r0, [r7, #8]
 8006b94:	f002 ff42 	bl	8009a1c <SUBGRF_GetFskBandwidthRegValue>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	4b9b      	ldr	r3, [pc, #620]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006ba2:	4b9a      	ldr	r3, [pc, #616]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006ba8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	4b97      	ldr	r3, [pc, #604]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006bb0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8006bb2:	4b96      	ldr	r3, [pc, #600]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8006bb8:	4b94      	ldr	r3, [pc, #592]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006bba:	2210      	movs	r2, #16
 8006bbc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006bbe:	4b93      	ldr	r3, [pc, #588]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8006bc4:	4b91      	ldr	r3, [pc, #580]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006bca:	4b91      	ldr	r3, [pc, #580]	; (8006e10 <RadioSetRxConfig+0x300>)
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	4b8f      	ldr	r3, [pc, #572]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006bd0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006bd2:	4b8e      	ldr	r3, [pc, #568]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006bd8:	4b8c      	ldr	r3, [pc, #560]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8006bde:	2005      	movs	r0, #5
 8006be0:	f7ff fec2 	bl	8006968 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006be4:	488b      	ldr	r0, [pc, #556]	; (8006e14 <RadioSetRxConfig+0x304>)
 8006be6:	f002 fae5 	bl	80091b4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006bea:	488b      	ldr	r0, [pc, #556]	; (8006e18 <RadioSetRxConfig+0x308>)
 8006bec:	f002 fbb4 	bl	8009358 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006bf0:	4a8a      	ldr	r2, [pc, #552]	; (8006e1c <RadioSetRxConfig+0x30c>)
 8006bf2:	f107 031c 	add.w	r3, r7, #28
 8006bf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bfa:	e883 0003 	stmia.w	r3, {r0, r1}
 8006bfe:	f107 031c 	add.w	r3, r7, #28
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 fe71 	bl	80088ea <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006c08:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c0c:	f001 febc 	bl	8008988 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8006c10:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006c14:	f000 fe1d 	bl	8007852 <RadioRead>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8006c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c22:	f023 0310 	bic.w	r3, r3, #16
 8006c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8006c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c2e:	4619      	mov	r1, r3
 8006c30:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006c34:	f000 fdfb 	bl	800782e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8006c38:	2104      	movs	r1, #4
 8006c3a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8006c3e:	f000 fdf6 	bl	800782e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8006c42:	f640 009b 	movw	r0, #2203	; 0x89b
 8006c46:	f000 fe04 	bl	8007852 <RadioRead>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c54:	f023 031c 	bic.w	r3, r3, #28
 8006c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8006c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c60:	f043 0308 	orr.w	r3, r3, #8
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	4619      	mov	r1, r3
 8006c68:	f640 009b 	movw	r0, #2203	; 0x89b
 8006c6c:	f000 fddf 	bl	800782e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8006c70:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006c74:	f000 fded 	bl	8007852 <RadioRead>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c82:	f023 0318 	bic.w	r3, r3, #24
 8006c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8006c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c8e:	f043 0318 	orr.w	r3, r3, #24
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	4619      	mov	r1, r3
 8006c96:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006c9a:	f000 fdc8 	bl	800782e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8006c9e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006ca2:	f000 fdd6 	bl	8007852 <RadioRead>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8006cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8006cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cbc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006cc8:	f000 fdb1 	bl	800782e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006ccc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006cce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cde:	4a4b      	ldr	r2, [pc, #300]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006ce0:	6093      	str	r3, [r2, #8]
            break;
 8006ce2:	e115      	b.n	8006f10 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f001 ffc7 	bl	8008c78 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006cea:	4b48      	ldr	r3, [pc, #288]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006cf2:	4a46      	ldr	r2, [pc, #280]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006cf8:	4b44      	ldr	r3, [pc, #272]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006cfa:	220b      	movs	r2, #11
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006d00:	68b8      	ldr	r0, [r7, #8]
 8006d02:	f002 fe8b 	bl	8009a1c <SUBGRF_GetFskBandwidthRegValue>
 8006d06:	4603      	mov	r3, r0
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4b40      	ldr	r3, [pc, #256]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006d10:	4b3e      	ldr	r3, [pc, #248]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006d16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	4b3b      	ldr	r3, [pc, #236]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006d1e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006d20:	4b3a      	ldr	r3, [pc, #232]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006d22:	2204      	movs	r2, #4
 8006d24:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8006d26:	4b39      	ldr	r3, [pc, #228]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006d28:	2218      	movs	r2, #24
 8006d2a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006d2c:	4b37      	ldr	r3, [pc, #220]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006d32:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006d36:	f083 0301 	eor.w	r3, r3, #1
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4b33      	ldr	r3, [pc, #204]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006d40:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006d42:	4b33      	ldr	r3, [pc, #204]	; (8006e10 <RadioSetRxConfig+0x300>)
 8006d44:	781a      	ldrb	r2, [r3, #0]
 8006d46:	4b31      	ldr	r3, [pc, #196]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006d48:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8006d4a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006d52:	4b2e      	ldr	r3, [pc, #184]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006d54:	22f2      	movs	r2, #242	; 0xf2
 8006d56:	75da      	strb	r2, [r3, #23]
 8006d58:	e002      	b.n	8006d60 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006d5a:	4b2c      	ldr	r3, [pc, #176]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006d60:	4b2a      	ldr	r3, [pc, #168]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006d66:	f000 fc60 	bl	800762a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	f7ff fdfc 	bl	8006968 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006d70:	4828      	ldr	r0, [pc, #160]	; (8006e14 <RadioSetRxConfig+0x304>)
 8006d72:	f002 fa1f 	bl	80091b4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006d76:	4828      	ldr	r0, [pc, #160]	; (8006e18 <RadioSetRxConfig+0x308>)
 8006d78:	f002 faee 	bl	8009358 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006d7c:	4a28      	ldr	r2, [pc, #160]	; (8006e20 <RadioSetRxConfig+0x310>)
 8006d7e:	f107 0314 	add.w	r3, r7, #20
 8006d82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d86:	e883 0003 	stmia.w	r3, {r0, r1}
 8006d8a:	f107 0314 	add.w	r3, r7, #20
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 fdab 	bl	80088ea <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006d94:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d98:	f001 fdf6 	bl	8008988 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006d9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d9e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006da2:	fb02 f303 	mul.w	r3, r2, r3
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dae:	4a17      	ldr	r2, [pc, #92]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006db0:	6093      	str	r3, [r2, #8]
            break;
 8006db2:	e0ad      	b.n	8006f10 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006db4:	2000      	movs	r0, #0
 8006db6:	f001 ff5f 	bl	8008c78 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006dba:	4b14      	ldr	r3, [pc, #80]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8006dcc:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <RadioSetRxConfig+0x314>)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	781a      	ldrb	r2, [r3, #0]
 8006dd4:	4b0d      	ldr	r3, [pc, #52]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8006dda:	4a0c      	ldr	r2, [pc, #48]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d105      	bne.n	8006df4 <RadioSetRxConfig+0x2e4>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b0b      	cmp	r3, #11
 8006dec:	d008      	beq.n	8006e00 <RadioSetRxConfig+0x2f0>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b0c      	cmp	r3, #12
 8006df2:	d005      	beq.n	8006e00 <RadioSetRxConfig+0x2f0>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d116      	bne.n	8006e28 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b0c      	cmp	r3, #12
 8006dfe:	d113      	bne.n	8006e28 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006e00:	4b02      	ldr	r3, [pc, #8]	; (8006e0c <RadioSetRxConfig+0x2fc>)
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006e08:	e012      	b.n	8006e30 <RadioSetRxConfig+0x320>
 8006e0a:	bf00      	nop
 8006e0c:	20000488 	.word	0x20000488
 8006e10:	2000000d 	.word	0x2000000d
 8006e14:	200004c0 	.word	0x200004c0
 8006e18:	20000496 	.word	0x20000496
 8006e1c:	0800b2c0 	.word	0x0800b2c0
 8006e20:	0800b2c8 	.word	0x0800b2c8
 8006e24:	0800b464 	.word	0x0800b464
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006e28:	4b3b      	ldr	r3, [pc, #236]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006e30:	4b39      	ldr	r3, [pc, #228]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006e36:	4b38      	ldr	r3, [pc, #224]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006e38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e3c:	2b05      	cmp	r3, #5
 8006e3e:	d004      	beq.n	8006e4a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8006e40:	4b35      	ldr	r3, [pc, #212]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006e42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006e46:	2b06      	cmp	r3, #6
 8006e48:	d10a      	bne.n	8006e60 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8006e4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e4c:	2b0b      	cmp	r3, #11
 8006e4e:	d803      	bhi.n	8006e58 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006e50:	4b31      	ldr	r3, [pc, #196]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006e52:	220c      	movs	r2, #12
 8006e54:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8006e56:	e006      	b.n	8006e66 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006e58:	4a2f      	ldr	r2, [pc, #188]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006e5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e5c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8006e5e:	e002      	b.n	8006e66 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006e60:	4a2d      	ldr	r2, [pc, #180]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006e62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e64:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006e66:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8006e6a:	4b2b      	ldr	r3, [pc, #172]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006e6c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006e6e:	4b2b      	ldr	r3, [pc, #172]	; (8006f1c <RadioSetRxConfig+0x40c>)
 8006e70:	781a      	ldrb	r2, [r3, #0]
 8006e72:	4b29      	ldr	r3, [pc, #164]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006e74:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006e76:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8006e7a:	4b27      	ldr	r3, [pc, #156]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006e7c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006e80:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8006e84:	4b24      	ldr	r3, [pc, #144]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006e86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8006e8a:	f000 fbce 	bl	800762a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006e8e:	2001      	movs	r0, #1
 8006e90:	f7ff fd6a 	bl	8006968 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006e94:	4822      	ldr	r0, [pc, #136]	; (8006f20 <RadioSetRxConfig+0x410>)
 8006e96:	f002 f98d 	bl	80091b4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e9a:	4822      	ldr	r0, [pc, #136]	; (8006f24 <RadioSetRxConfig+0x414>)
 8006e9c:	f002 fa5c 	bl	8009358 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006ea0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f001 fef6 	bl	8008c96 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8006eaa:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8006eae:	f002 fbaf 	bl	8009610 <SUBGRF_ReadRegister>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	4619      	mov	r1, r3
 8006ebc:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8006ec0:	f002 fb92 	bl	80095e8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006ec4:	4b14      	ldr	r3, [pc, #80]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006ec6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d10d      	bne.n	8006eea <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8006ece:	f240 7036 	movw	r0, #1846	; 0x736
 8006ed2:	f002 fb9d 	bl	8009610 <SUBGRF_ReadRegister>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f023 0304 	bic.w	r3, r3, #4
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	4619      	mov	r1, r3
 8006ee0:	f240 7036 	movw	r0, #1846	; 0x736
 8006ee4:	f002 fb80 	bl	80095e8 <SUBGRF_WriteRegister>
 8006ee8:	e00c      	b.n	8006f04 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8006eea:	f240 7036 	movw	r0, #1846	; 0x736
 8006eee:	f002 fb8f 	bl	8009610 <SUBGRF_ReadRegister>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f043 0304 	orr.w	r3, r3, #4
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	4619      	mov	r1, r3
 8006efc:	f240 7036 	movw	r0, #1846	; 0x736
 8006f00:	f002 fb72 	bl	80095e8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006f04:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <RadioSetRxConfig+0x408>)
 8006f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f0a:	609a      	str	r2, [r3, #8]
            break;
 8006f0c:	e000      	b.n	8006f10 <RadioSetRxConfig+0x400>
            break;
 8006f0e:	bf00      	nop
    }
}
 8006f10:	bf00      	nop
 8006f12:	3728      	adds	r7, #40	; 0x28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000488 	.word	0x20000488
 8006f1c:	2000000d 	.word	0x2000000d
 8006f20:	200004c0 	.word	0x200004c0
 8006f24:	20000496 	.word	0x20000496

08006f28 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60ba      	str	r2, [r7, #8]
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]
 8006f36:	460b      	mov	r3, r1
 8006f38:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8006f3a:	f002 fe3c 	bl	8009bb6 <RFW_DeInit>
    switch( modem )
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2b04      	cmp	r3, #4
 8006f42:	f000 80c7 	beq.w	80070d4 <RadioSetTxConfig+0x1ac>
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	f300 80d6 	bgt.w	80070f8 <RadioSetTxConfig+0x1d0>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <RadioSetTxConfig+0x2e>
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d059      	beq.n	8007008 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8006f54:	e0d0      	b.n	80070f8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006f56:	4b77      	ldr	r3, [pc, #476]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006f5e:	4a75      	ldr	r2, [pc, #468]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006f64:	4b73      	ldr	r3, [pc, #460]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006f66:	220b      	movs	r2, #11
 8006f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f002 fd55 	bl	8009a1c <SUBGRF_GetFskBandwidthRegValue>
 8006f72:	4603      	mov	r3, r0
 8006f74:	461a      	mov	r2, r3
 8006f76:	4b6f      	ldr	r3, [pc, #444]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8006f7c:	4a6d      	ldr	r2, [pc, #436]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006f82:	4b6c      	ldr	r3, [pc, #432]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006f88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	4b69      	ldr	r3, [pc, #420]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006f90:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006f92:	4b68      	ldr	r3, [pc, #416]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006f94:	2204      	movs	r2, #4
 8006f96:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8006f98:	4b66      	ldr	r3, [pc, #408]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006f9a:	2218      	movs	r2, #24
 8006f9c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006f9e:	4b65      	ldr	r3, [pc, #404]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006fa4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006fa8:	f083 0301 	eor.w	r3, r3, #1
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	461a      	mov	r2, r3
 8006fb0:	4b60      	ldr	r3, [pc, #384]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006fb2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8006fb4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006fbc:	4b5d      	ldr	r3, [pc, #372]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006fbe:	22f2      	movs	r2, #242	; 0xf2
 8006fc0:	75da      	strb	r2, [r3, #23]
 8006fc2:	e002      	b.n	8006fca <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006fc4:	4b5b      	ldr	r3, [pc, #364]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006fca:	4b5a      	ldr	r3, [pc, #360]	; (8007134 <RadioSetTxConfig+0x20c>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006fd0:	f000 fb2b 	bl	800762a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	f7ff fcc7 	bl	8006968 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006fda:	4857      	ldr	r0, [pc, #348]	; (8007138 <RadioSetTxConfig+0x210>)
 8006fdc:	f002 f8ea 	bl	80091b4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006fe0:	4856      	ldr	r0, [pc, #344]	; (800713c <RadioSetTxConfig+0x214>)
 8006fe2:	f002 f9b9 	bl	8009358 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006fe6:	4a56      	ldr	r2, [pc, #344]	; (8007140 <RadioSetTxConfig+0x218>)
 8006fe8:	f107 0310 	add.w	r3, r7, #16
 8006fec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ff0:	e883 0003 	stmia.w	r3, {r0, r1}
 8006ff4:	f107 0310 	add.w	r3, r7, #16
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 fc76 	bl	80088ea <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006ffe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007002:	f001 fcc1 	bl	8008988 <SUBGRF_SetWhiteningSeed>
            break;
 8007006:	e078      	b.n	80070fa <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007008:	4b4a      	ldr	r3, [pc, #296]	; (8007134 <RadioSetTxConfig+0x20c>)
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	b2da      	uxtb	r2, r3
 8007014:	4b47      	ldr	r3, [pc, #284]	; (8007134 <RadioSetTxConfig+0x20c>)
 8007016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800701a:	4a4a      	ldr	r2, [pc, #296]	; (8007144 <RadioSetTxConfig+0x21c>)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4413      	add	r3, r2
 8007020:	781a      	ldrb	r2, [r3, #0]
 8007022:	4b44      	ldr	r3, [pc, #272]	; (8007134 <RadioSetTxConfig+0x20c>)
 8007024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007028:	4a42      	ldr	r2, [pc, #264]	; (8007134 <RadioSetTxConfig+0x20c>)
 800702a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800702e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d105      	bne.n	8007044 <RadioSetTxConfig+0x11c>
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	2b0b      	cmp	r3, #11
 800703c:	d008      	beq.n	8007050 <RadioSetTxConfig+0x128>
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	2b0c      	cmp	r3, #12
 8007042:	d005      	beq.n	8007050 <RadioSetTxConfig+0x128>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d107      	bne.n	800705a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	2b0c      	cmp	r3, #12
 800704e:	d104      	bne.n	800705a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007050:	4b38      	ldr	r3, [pc, #224]	; (8007134 <RadioSetTxConfig+0x20c>)
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007058:	e003      	b.n	8007062 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800705a:	4b36      	ldr	r3, [pc, #216]	; (8007134 <RadioSetTxConfig+0x20c>)
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007062:	4b34      	ldr	r3, [pc, #208]	; (8007134 <RadioSetTxConfig+0x20c>)
 8007064:	2201      	movs	r2, #1
 8007066:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007068:	4b32      	ldr	r3, [pc, #200]	; (8007134 <RadioSetTxConfig+0x20c>)
 800706a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800706e:	2b05      	cmp	r3, #5
 8007070:	d004      	beq.n	800707c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007072:	4b30      	ldr	r3, [pc, #192]	; (8007134 <RadioSetTxConfig+0x20c>)
 8007074:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007078:	2b06      	cmp	r3, #6
 800707a:	d10a      	bne.n	8007092 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800707c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800707e:	2b0b      	cmp	r3, #11
 8007080:	d803      	bhi.n	800708a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007082:	4b2c      	ldr	r3, [pc, #176]	; (8007134 <RadioSetTxConfig+0x20c>)
 8007084:	220c      	movs	r2, #12
 8007086:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007088:	e006      	b.n	8007098 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800708a:	4a2a      	ldr	r2, [pc, #168]	; (8007134 <RadioSetTxConfig+0x20c>)
 800708c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800708e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007090:	e002      	b.n	8007098 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007092:	4a28      	ldr	r2, [pc, #160]	; (8007134 <RadioSetTxConfig+0x20c>)
 8007094:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007096:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007098:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800709c:	4b25      	ldr	r3, [pc, #148]	; (8007134 <RadioSetTxConfig+0x20c>)
 800709e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80070a0:	4b29      	ldr	r3, [pc, #164]	; (8007148 <RadioSetTxConfig+0x220>)
 80070a2:	781a      	ldrb	r2, [r3, #0]
 80070a4:	4b23      	ldr	r3, [pc, #140]	; (8007134 <RadioSetTxConfig+0x20c>)
 80070a6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80070a8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80070ac:	4b21      	ldr	r3, [pc, #132]	; (8007134 <RadioSetTxConfig+0x20c>)
 80070ae:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80070b2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80070b6:	4b1f      	ldr	r3, [pc, #124]	; (8007134 <RadioSetTxConfig+0x20c>)
 80070b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80070bc:	f000 fab5 	bl	800762a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80070c0:	2001      	movs	r0, #1
 80070c2:	f7ff fc51 	bl	8006968 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80070c6:	481c      	ldr	r0, [pc, #112]	; (8007138 <RadioSetTxConfig+0x210>)
 80070c8:	f002 f874 	bl	80091b4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80070cc:	481b      	ldr	r0, [pc, #108]	; (800713c <RadioSetTxConfig+0x214>)
 80070ce:	f002 f943 	bl	8009358 <SUBGRF_SetPacketParams>
            break;
 80070d2:	e012      	b.n	80070fa <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80070d4:	2004      	movs	r0, #4
 80070d6:	f7ff fc47 	bl	8006968 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80070da:	4b16      	ldr	r3, [pc, #88]	; (8007134 <RadioSetTxConfig+0x20c>)
 80070dc:	2202      	movs	r2, #2
 80070de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80070e2:	4a14      	ldr	r2, [pc, #80]	; (8007134 <RadioSetTxConfig+0x20c>)
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80070e8:	4b12      	ldr	r3, [pc, #72]	; (8007134 <RadioSetTxConfig+0x20c>)
 80070ea:	2216      	movs	r2, #22
 80070ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80070f0:	4811      	ldr	r0, [pc, #68]	; (8007138 <RadioSetTxConfig+0x210>)
 80070f2:	f002 f85f 	bl	80091b4 <SUBGRF_SetModulationParams>
            break;
 80070f6:	e000      	b.n	80070fa <RadioSetTxConfig+0x1d2>
            break;
 80070f8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80070fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070fe:	4618      	mov	r0, r3
 8007100:	f002 fb8e 	bl	8009820 <SUBGRF_SetRfTxPower>
 8007104:	4603      	mov	r3, r0
 8007106:	461a      	mov	r2, r3
 8007108:	4b0a      	ldr	r3, [pc, #40]	; (8007134 <RadioSetTxConfig+0x20c>)
 800710a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800710e:	210e      	movs	r1, #14
 8007110:	f640 101f 	movw	r0, #2335	; 0x91f
 8007114:	f002 fa68 	bl	80095e8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007118:	4b06      	ldr	r3, [pc, #24]	; (8007134 <RadioSetTxConfig+0x20c>)
 800711a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800711e:	4618      	mov	r0, r3
 8007120:	f002 fd5d 	bl	8009bde <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007124:	4a03      	ldr	r2, [pc, #12]	; (8007134 <RadioSetTxConfig+0x20c>)
 8007126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007128:	6053      	str	r3, [r2, #4]
}
 800712a:	bf00      	nop
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20000488 	.word	0x20000488
 8007138:	200004c0 	.word	0x200004c0
 800713c:	20000496 	.word	0x20000496
 8007140:	0800b2c8 	.word	0x0800b2c8
 8007144:	0800b464 	.word	0x0800b464
 8007148:	2000000d 	.word	0x2000000d

0800714c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
    return true;
 8007154:	2301      	movs	r3, #1
}
 8007156:	4618      	mov	r0, r3
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr

08007160 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	2b0a      	cmp	r3, #10
 8007172:	d83e      	bhi.n	80071f2 <RadioGetLoRaBandwidthInHz+0x92>
 8007174:	a201      	add	r2, pc, #4	; (adr r2, 800717c <RadioGetLoRaBandwidthInHz+0x1c>)
 8007176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717a:	bf00      	nop
 800717c:	080071a9 	.word	0x080071a9
 8007180:	080071b9 	.word	0x080071b9
 8007184:	080071c9 	.word	0x080071c9
 8007188:	080071d9 	.word	0x080071d9
 800718c:	080071e1 	.word	0x080071e1
 8007190:	080071e7 	.word	0x080071e7
 8007194:	080071ed 	.word	0x080071ed
 8007198:	080071f3 	.word	0x080071f3
 800719c:	080071b1 	.word	0x080071b1
 80071a0:	080071c1 	.word	0x080071c1
 80071a4:	080071d1 	.word	0x080071d1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80071a8:	f641 6384 	movw	r3, #7812	; 0x1e84
 80071ac:	60fb      	str	r3, [r7, #12]
        break;
 80071ae:	e020      	b.n	80071f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80071b0:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80071b4:	60fb      	str	r3, [r7, #12]
        break;
 80071b6:	e01c      	b.n	80071f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80071b8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80071bc:	60fb      	str	r3, [r7, #12]
        break;
 80071be:	e018      	b.n	80071f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80071c0:	f245 1361 	movw	r3, #20833	; 0x5161
 80071c4:	60fb      	str	r3, [r7, #12]
        break;
 80071c6:	e014      	b.n	80071f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80071c8:	f647 2312 	movw	r3, #31250	; 0x7a12
 80071cc:	60fb      	str	r3, [r7, #12]
        break;
 80071ce:	e010      	b.n	80071f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80071d0:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80071d4:	60fb      	str	r3, [r7, #12]
        break;
 80071d6:	e00c      	b.n	80071f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80071d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80071dc:	60fb      	str	r3, [r7, #12]
        break;
 80071de:	e008      	b.n	80071f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <RadioGetLoRaBandwidthInHz+0xa0>)
 80071e2:	60fb      	str	r3, [r7, #12]
        break;
 80071e4:	e005      	b.n	80071f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80071e6:	4b07      	ldr	r3, [pc, #28]	; (8007204 <RadioGetLoRaBandwidthInHz+0xa4>)
 80071e8:	60fb      	str	r3, [r7, #12]
        break;
 80071ea:	e002      	b.n	80071f2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <RadioGetLoRaBandwidthInHz+0xa8>)
 80071ee:	60fb      	str	r3, [r7, #12]
        break;
 80071f0:	bf00      	nop
    }

    return bandwidthInHz;
 80071f2:	68fb      	ldr	r3, [r7, #12]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	0001e848 	.word	0x0001e848
 8007204:	0003d090 	.word	0x0003d090
 8007208:	0007a120 	.word	0x0007a120

0800720c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	4608      	mov	r0, r1
 8007216:	4611      	mov	r1, r2
 8007218:	461a      	mov	r2, r3
 800721a:	4603      	mov	r3, r0
 800721c:	70fb      	strb	r3, [r7, #3]
 800721e:	460b      	mov	r3, r1
 8007220:	803b      	strh	r3, [r7, #0]
 8007222:	4613      	mov	r3, r2
 8007224:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007226:	883b      	ldrh	r3, [r7, #0]
 8007228:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800722a:	78ba      	ldrb	r2, [r7, #2]
 800722c:	f082 0201 	eor.w	r2, r2, #1
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	2a00      	cmp	r2, #0
 8007234:	d001      	beq.n	800723a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007236:	2208      	movs	r2, #8
 8007238:	e000      	b.n	800723c <RadioGetGfskTimeOnAirNumerator+0x30>
 800723a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800723c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800723e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007242:	7c3b      	ldrb	r3, [r7, #16]
 8007244:	7d39      	ldrb	r1, [r7, #20]
 8007246:	2900      	cmp	r1, #0
 8007248:	d001      	beq.n	800724e <RadioGetGfskTimeOnAirNumerator+0x42>
 800724a:	2102      	movs	r1, #2
 800724c:	e000      	b.n	8007250 <RadioGetGfskTimeOnAirNumerator+0x44>
 800724e:	2100      	movs	r1, #0
 8007250:	440b      	add	r3, r1
 8007252:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007254:	4413      	add	r3, r2
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr

08007260 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007260:	b480      	push	{r7}
 8007262:	b08b      	sub	sp, #44	; 0x2c
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4611      	mov	r1, r2
 800726c:	461a      	mov	r2, r3
 800726e:	460b      	mov	r3, r1
 8007270:	71fb      	strb	r3, [r7, #7]
 8007272:	4613      	mov	r3, r2
 8007274:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007276:	79fb      	ldrb	r3, [r7, #7]
 8007278:	3304      	adds	r3, #4
 800727a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800727c:	2300      	movs	r3, #0
 800727e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b05      	cmp	r3, #5
 8007286:	d002      	beq.n	800728e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b06      	cmp	r3, #6
 800728c:	d104      	bne.n	8007298 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800728e:	88bb      	ldrh	r3, [r7, #4]
 8007290:	2b0b      	cmp	r3, #11
 8007292:	d801      	bhi.n	8007298 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007294:	230c      	movs	r3, #12
 8007296:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d105      	bne.n	80072aa <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b0b      	cmp	r3, #11
 80072a2:	d008      	beq.n	80072b6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b0c      	cmp	r3, #12
 80072a8:	d005      	beq.n	80072b6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d105      	bne.n	80072bc <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2b0c      	cmp	r3, #12
 80072b4:	d102      	bne.n	80072bc <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80072b6:	2301      	movs	r3, #1
 80072b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80072bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80072c0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80072c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	d001      	beq.n	80072ce <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80072ca:	2210      	movs	r2, #16
 80072cc:	e000      	b.n	80072d0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80072ce:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80072d0:	4413      	add	r3, r2
 80072d2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80072d8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80072da:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80072de:	2a00      	cmp	r2, #0
 80072e0:	d001      	beq.n	80072e6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80072e2:	2200      	movs	r2, #0
 80072e4:	e000      	b.n	80072e8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80072e6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80072e8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80072ea:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b06      	cmp	r3, #6
 80072f0:	d803      	bhi.n	80072fa <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	623b      	str	r3, [r7, #32]
 80072f8:	e00e      	b.n	8007318 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	3308      	adds	r3, #8
 80072fe:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	3b02      	subs	r3, #2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	623b      	str	r3, [r7, #32]
 8007310:	e002      	b.n	8007318 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2b00      	cmp	r3, #0
 800731c:	da01      	bge.n	8007322 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007322:	69fa      	ldr	r2, [r7, #28]
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	4413      	add	r3, r2
 8007328:	1e5a      	subs	r2, r3, #1
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	fb92 f3f3 	sdiv	r3, r2, r3
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	fb03 f202 	mul.w	r2, r3, r2
 8007336:	88bb      	ldrh	r3, [r7, #4]
 8007338:	4413      	add	r3, r2
    int32_t intermediate =
 800733a:	330c      	adds	r3, #12
 800733c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2b06      	cmp	r3, #6
 8007342:	d802      	bhi.n	800734a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	3302      	adds	r3, #2
 8007348:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	3b02      	subs	r3, #2
 8007354:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007358:	4618      	mov	r0, r3
 800735a:	372c      	adds	r7, #44	; 0x2c
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr
	...

08007364 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	; 0x28
 8007368:	af04      	add	r7, sp, #16
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	607a      	str	r2, [r7, #4]
 800736e:	461a      	mov	r2, r3
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]
 8007374:	4613      	mov	r3, r2
 8007376:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800737c:	2301      	movs	r3, #1
 800737e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <RadioTimeOnAir+0x28>
 8007386:	2b01      	cmp	r3, #1
 8007388:	d017      	beq.n	80073ba <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800738a:	e035      	b.n	80073f8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800738c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007390:	8c3a      	ldrh	r2, [r7, #32]
 8007392:	7bb9      	ldrb	r1, [r7, #14]
 8007394:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4603      	mov	r3, r0
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7ff ff32 	bl	800720c <RadioGetGfskTimeOnAirNumerator>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073ae:	fb02 f303 	mul.w	r3, r2, r3
 80073b2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	613b      	str	r3, [r7, #16]
        break;
 80073b8:	e01e      	b.n	80073f8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80073ba:	8c39      	ldrh	r1, [r7, #32]
 80073bc:	7bba      	ldrb	r2, [r7, #14]
 80073be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80073c2:	9302      	str	r3, [sp, #8]
 80073c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	460b      	mov	r3, r1
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	68b8      	ldr	r0, [r7, #8]
 80073d6:	f7ff ff43 	bl	8007260 <RadioGetLoRaTimeOnAirNumerator>
 80073da:	4603      	mov	r3, r0
 80073dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073e0:	fb02 f303 	mul.w	r3, r2, r3
 80073e4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80073e6:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <RadioTimeOnAir+0xac>)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4413      	add	r3, r2
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff feb6 	bl	8007160 <RadioGetLoRaBandwidthInHz>
 80073f4:	6138      	str	r0, [r7, #16]
        break;
 80073f6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	4413      	add	r3, r2
 80073fe:	1e5a      	subs	r2, r3, #1
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	0800b464 	.word	0x0800b464

08007414 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007420:	2300      	movs	r3, #0
 8007422:	2200      	movs	r2, #0
 8007424:	f240 2101 	movw	r1, #513	; 0x201
 8007428:	f240 2001 	movw	r0, #513	; 0x201
 800742c:	f001 fd2c 	bl	8008e88 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007430:	4b70      	ldr	r3, [pc, #448]	; (80075f4 <RadioSend+0x1e0>)
 8007432:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007436:	2101      	movs	r1, #1
 8007438:	4618      	mov	r0, r3
 800743a:	f002 f9c9 	bl	80097d0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800743e:	4b6d      	ldr	r3, [pc, #436]	; (80075f4 <RadioSend+0x1e0>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d112      	bne.n	800746c <RadioSend+0x58>
 8007446:	4b6b      	ldr	r3, [pc, #428]	; (80075f4 <RadioSend+0x1e0>)
 8007448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800744c:	2b06      	cmp	r3, #6
 800744e:	d10d      	bne.n	800746c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007450:	f640 0089 	movw	r0, #2185	; 0x889
 8007454:	f002 f8dc 	bl	8009610 <SUBGRF_ReadRegister>
 8007458:	4603      	mov	r3, r0
 800745a:	f023 0304 	bic.w	r3, r3, #4
 800745e:	b2db      	uxtb	r3, r3
 8007460:	4619      	mov	r1, r3
 8007462:	f640 0089 	movw	r0, #2185	; 0x889
 8007466:	f002 f8bf 	bl	80095e8 <SUBGRF_WriteRegister>
 800746a:	e00c      	b.n	8007486 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800746c:	f640 0089 	movw	r0, #2185	; 0x889
 8007470:	f002 f8ce 	bl	8009610 <SUBGRF_ReadRegister>
 8007474:	4603      	mov	r3, r0
 8007476:	f043 0304 	orr.w	r3, r3, #4
 800747a:	b2db      	uxtb	r3, r3
 800747c:	4619      	mov	r1, r3
 800747e:	f640 0089 	movw	r0, #2185	; 0x889
 8007482:	f002 f8b1 	bl	80095e8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007486:	4b5b      	ldr	r3, [pc, #364]	; (80075f4 <RadioSend+0x1e0>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b04      	cmp	r3, #4
 800748c:	f200 80a2 	bhi.w	80075d4 <RadioSend+0x1c0>
 8007490:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <RadioSend+0x84>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074c7 	.word	0x080074c7
 800749c:	080074ad 	.word	0x080074ad
 80074a0:	080074c7 	.word	0x080074c7
 80074a4:	0800751d 	.word	0x0800751d
 80074a8:	0800753d 	.word	0x0800753d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80074ac:	4a51      	ldr	r2, [pc, #324]	; (80075f4 <RadioSend+0x1e0>)
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80074b2:	4851      	ldr	r0, [pc, #324]	; (80075f8 <RadioSend+0x1e4>)
 80074b4:	f001 ff50 	bl	8009358 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	2200      	movs	r2, #0
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 fa00 	bl	80088c4 <SUBGRF_SendPayload>
            break;
 80074c4:	e087      	b.n	80075d6 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80074c6:	f002 fb7c 	bl	8009bc2 <RFW_Is_Init>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d118      	bne.n	8007502 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80074d0:	f107 020d 	add.w	r2, r7, #13
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f002 fb8a 	bl	8009bf2 <RFW_TransmitInit>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10c      	bne.n	80074fe <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80074e4:	7b7a      	ldrb	r2, [r7, #13]
 80074e6:	4b43      	ldr	r3, [pc, #268]	; (80075f4 <RadioSend+0x1e0>)
 80074e8:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80074ea:	4843      	ldr	r0, [pc, #268]	; (80075f8 <RadioSend+0x1e4>)
 80074ec:	f001 ff34 	bl	8009358 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80074f0:	7b7b      	ldrb	r3, [r7, #13]
 80074f2:	2200      	movs	r2, #0
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f001 f9e4 	bl	80088c4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80074fc:	e06b      	b.n	80075d6 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 80074fe:	2303      	movs	r3, #3
 8007500:	e073      	b.n	80075ea <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8007502:	4a3c      	ldr	r2, [pc, #240]	; (80075f4 <RadioSend+0x1e0>)
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007508:	483b      	ldr	r0, [pc, #236]	; (80075f8 <RadioSend+0x1e4>)
 800750a:	f001 ff25 	bl	8009358 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	2200      	movs	r2, #0
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 f9d5 	bl	80088c4 <SUBGRF_SendPayload>
            break;
 800751a:	e05c      	b.n	80075d6 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800751c:	4b35      	ldr	r3, [pc, #212]	; (80075f4 <RadioSend+0x1e0>)
 800751e:	2202      	movs	r2, #2
 8007520:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8007522:	4a34      	ldr	r2, [pc, #208]	; (80075f4 <RadioSend+0x1e0>)
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007528:	4833      	ldr	r0, [pc, #204]	; (80075f8 <RadioSend+0x1e4>)
 800752a:	f001 ff15 	bl	8009358 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	2200      	movs	r2, #0
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 f9c5 	bl	80088c4 <SUBGRF_SendPayload>
            break;
 800753a:	e04c      	b.n	80075d6 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	461a      	mov	r2, r3
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	482e      	ldr	r0, [pc, #184]	; (80075fc <RadioSend+0x1e8>)
 8007544:	f000 fc98 	bl	8007e78 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007548:	4b2a      	ldr	r3, [pc, #168]	; (80075f4 <RadioSend+0x1e0>)
 800754a:	2202      	movs	r2, #2
 800754c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	3301      	adds	r3, #1
 8007552:	b2da      	uxtb	r2, r3
 8007554:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <RadioSend+0x1e0>)
 8007556:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007558:	4827      	ldr	r0, [pc, #156]	; (80075f8 <RadioSend+0x1e4>)
 800755a:	f001 fefd 	bl	8009358 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800755e:	2100      	movs	r1, #0
 8007560:	20f1      	movs	r0, #241	; 0xf1
 8007562:	f000 f964 	bl	800782e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007566:	2100      	movs	r1, #0
 8007568:	20f0      	movs	r0, #240	; 0xf0
 800756a:	f000 f960 	bl	800782e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800756e:	4b21      	ldr	r3, [pc, #132]	; (80075f4 <RadioSend+0x1e0>)
 8007570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007572:	2b64      	cmp	r3, #100	; 0x64
 8007574:	d108      	bne.n	8007588 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007576:	2170      	movs	r1, #112	; 0x70
 8007578:	20f3      	movs	r0, #243	; 0xf3
 800757a:	f000 f958 	bl	800782e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800757e:	211d      	movs	r1, #29
 8007580:	20f2      	movs	r0, #242	; 0xf2
 8007582:	f000 f954 	bl	800782e <RadioWrite>
 8007586:	e007      	b.n	8007598 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007588:	21e1      	movs	r1, #225	; 0xe1
 800758a:	20f3      	movs	r0, #243	; 0xf3
 800758c:	f000 f94f 	bl	800782e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007590:	2104      	movs	r1, #4
 8007592:	20f2      	movs	r0, #242	; 0xf2
 8007594:	f000 f94b 	bl	800782e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	b29b      	uxth	r3, r3
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3302      	adds	r3, #2
 80075a2:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80075a4:	89fb      	ldrh	r3, [r7, #14]
 80075a6:	0a1b      	lsrs	r3, r3, #8
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	4619      	mov	r1, r3
 80075ae:	20f4      	movs	r0, #244	; 0xf4
 80075b0:	f000 f93d 	bl	800782e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80075b4:	89fb      	ldrh	r3, [r7, #14]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	4619      	mov	r1, r3
 80075ba:	20f5      	movs	r0, #245	; 0xf5
 80075bc:	f000 f937 	bl	800782e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	3301      	adds	r3, #1
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80075ca:	4619      	mov	r1, r3
 80075cc:	480b      	ldr	r0, [pc, #44]	; (80075fc <RadioSend+0x1e8>)
 80075ce:	f001 f979 	bl	80088c4 <SUBGRF_SendPayload>
            break;
 80075d2:	e000      	b.n	80075d6 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80075d4:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80075d6:	4b07      	ldr	r3, [pc, #28]	; (80075f4 <RadioSend+0x1e0>)
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4619      	mov	r1, r3
 80075dc:	4808      	ldr	r0, [pc, #32]	; (8007600 <RadioSend+0x1ec>)
 80075de:	f002 fdcf 	bl	800a180 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80075e2:	4807      	ldr	r0, [pc, #28]	; (8007600 <RadioSend+0x1ec>)
 80075e4:	f002 fcee 	bl	8009fc4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000488 	.word	0x20000488
 80075f8:	20000496 	.word	0x20000496
 80075fc:	20000384 	.word	0x20000384
 8007600:	200004e4 	.word	0x200004e4

08007604 <RadioSleep>:

static void RadioSleep( void )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800760a:	2300      	movs	r3, #0
 800760c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800760e:	793b      	ldrb	r3, [r7, #4]
 8007610:	f043 0304 	orr.w	r3, r3, #4
 8007614:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007616:	7938      	ldrb	r0, [r7, #4]
 8007618:	f001 fa30 	bl	8008a7c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800761c:	2002      	movs	r0, #2
 800761e:	f7f9 ff75 	bl	800150c <HAL_Delay>
}
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <RadioStandby>:

static void RadioStandby( void )
{
 800762a:	b580      	push	{r7, lr}
 800762c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800762e:	2000      	movs	r0, #0
 8007630:	f001 fa56 	bl	8008ae0 <SUBGRF_SetStandby>
}
 8007634:	bf00      	nop
 8007636:	bd80      	pop	{r7, pc}

08007638 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8007640:	f002 fabf 	bl	8009bc2 <RFW_Is_Init>
 8007644:	4603      	mov	r3, r0
 8007646:	2b01      	cmp	r3, #1
 8007648:	d102      	bne.n	8007650 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800764a:	f002 fae2 	bl	8009c12 <RFW_ReceiveInit>
 800764e:	e007      	b.n	8007660 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007650:	2300      	movs	r3, #0
 8007652:	2200      	movs	r2, #0
 8007654:	f240 2162 	movw	r1, #610	; 0x262
 8007658:	f240 2062 	movw	r0, #610	; 0x262
 800765c:	f001 fc14 	bl	8008e88 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d006      	beq.n	8007674 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	4811      	ldr	r0, [pc, #68]	; (80076b0 <RadioRx+0x78>)
 800766a:	f002 fd89 	bl	800a180 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800766e:	4810      	ldr	r0, [pc, #64]	; (80076b0 <RadioRx+0x78>)
 8007670:	f002 fca8 	bl	8009fc4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007674:	4b0f      	ldr	r3, [pc, #60]	; (80076b4 <RadioRx+0x7c>)
 8007676:	2200      	movs	r2, #0
 8007678:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800767a:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <RadioRx+0x7c>)
 800767c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f002 f8a4 	bl	80097d0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007688:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <RadioRx+0x7c>)
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d004      	beq.n	800769a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007690:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007694:	f001 fa60 	bl	8008b58 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007698:	e005      	b.n	80076a6 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800769a:	4b06      	ldr	r3, [pc, #24]	; (80076b4 <RadioRx+0x7c>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	019b      	lsls	r3, r3, #6
 80076a0:	4618      	mov	r0, r3
 80076a2:	f001 fa59 	bl	8008b58 <SUBGRF_SetRx>
}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	200004fc 	.word	0x200004fc
 80076b4:	20000488 	.word	0x20000488

080076b8 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80076c0:	f002 fa7f 	bl	8009bc2 <RFW_Is_Init>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d102      	bne.n	80076d0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80076ca:	f002 faa2 	bl	8009c12 <RFW_ReceiveInit>
 80076ce:	e007      	b.n	80076e0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80076d0:	2300      	movs	r3, #0
 80076d2:	2200      	movs	r2, #0
 80076d4:	f240 2162 	movw	r1, #610	; 0x262
 80076d8:	f240 2062 	movw	r0, #610	; 0x262
 80076dc:	f001 fbd4 	bl	8008e88 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d006      	beq.n	80076f4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	4811      	ldr	r0, [pc, #68]	; (8007730 <RadioRxBoosted+0x78>)
 80076ea:	f002 fd49 	bl	800a180 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80076ee:	4810      	ldr	r0, [pc, #64]	; (8007730 <RadioRxBoosted+0x78>)
 80076f0:	f002 fc68 	bl	8009fc4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80076f4:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <RadioRxBoosted+0x7c>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80076fa:	4b0e      	ldr	r3, [pc, #56]	; (8007734 <RadioRxBoosted+0x7c>)
 80076fc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007700:	2100      	movs	r1, #0
 8007702:	4618      	mov	r0, r3
 8007704:	f002 f864 	bl	80097d0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007708:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <RadioRxBoosted+0x7c>)
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d004      	beq.n	800771a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8007710:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007714:	f001 fa40 	bl	8008b98 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8007718:	e005      	b.n	8007726 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800771a:	4b06      	ldr	r3, [pc, #24]	; (8007734 <RadioRxBoosted+0x7c>)
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	019b      	lsls	r3, r3, #6
 8007720:	4618      	mov	r0, r3
 8007722:	f001 fa39 	bl	8008b98 <SUBGRF_SetRxBoosted>
}
 8007726:	bf00      	nop
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	200004fc 	.word	0x200004fc
 8007734:	20000488 	.word	0x20000488

08007738 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	005a      	lsls	r2, r3, #1
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	4413      	add	r3, r2
 800774a:	4a0c      	ldr	r2, [pc, #48]	; (800777c <RadioSetRxDutyCycle+0x44>)
 800774c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800774e:	2300      	movs	r3, #0
 8007750:	2200      	movs	r2, #0
 8007752:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007756:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800775a:	f001 fb95 	bl	8008e88 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800775e:	4b07      	ldr	r3, [pc, #28]	; (800777c <RadioSetRxDutyCycle+0x44>)
 8007760:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007764:	2100      	movs	r1, #0
 8007766:	4618      	mov	r0, r3
 8007768:	f002 f832 	bl	80097d0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 fa36 	bl	8008be0 <SUBGRF_SetRxDutyCycle>
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000488 	.word	0x20000488

08007780 <RadioStartCad>:

static void RadioStartCad( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007784:	4b09      	ldr	r3, [pc, #36]	; (80077ac <RadioStartCad+0x2c>)
 8007786:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800778a:	2100      	movs	r1, #0
 800778c:	4618      	mov	r0, r3
 800778e:	f002 f81f 	bl	80097d0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8007792:	2300      	movs	r3, #0
 8007794:	2200      	movs	r2, #0
 8007796:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800779a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800779e:	f001 fb73 	bl	8008e88 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80077a2:	f001 fa49 	bl	8008c38 <SUBGRF_SetCad>
}
 80077a6:	bf00      	nop
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000488 	.word	0x20000488

080077b0 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
 80077bc:	4613      	mov	r3, r2
 80077be:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 80077c0:	883b      	ldrh	r3, [r7, #0]
 80077c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077c6:	fb02 f303 	mul.w	r3, r2, r3
 80077ca:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 fbb7 	bl	8008f40 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80077d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f002 f822 	bl	8009820 <SUBGRF_SetRfTxPower>
 80077dc:	4603      	mov	r3, r0
 80077de:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80077e0:	210e      	movs	r1, #14
 80077e2:	f640 101f 	movw	r0, #2335	; 0x91f
 80077e6:	f001 feff 	bl	80095e8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80077ea:	7afb      	ldrb	r3, [r7, #11]
 80077ec:	2101      	movs	r1, #1
 80077ee:	4618      	mov	r0, r3
 80077f0:	f001 ffee 	bl	80097d0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80077f4:	f001 fa2e 	bl	8008c54 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80077f8:	68f9      	ldr	r1, [r7, #12]
 80077fa:	4805      	ldr	r0, [pc, #20]	; (8007810 <RadioSetTxContinuousWave+0x60>)
 80077fc:	f002 fcc0 	bl	800a180 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8007800:	4803      	ldr	r0, [pc, #12]	; (8007810 <RadioSetTxContinuousWave+0x60>)
 8007802:	f002 fbdf 	bl	8009fc4 <UTIL_TIMER_Start>
}
 8007806:	bf00      	nop
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	200004e4 	.word	0x200004e4

08007814 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800781e:	f001 fe50 	bl	80094c2 <SUBGRF_GetRssiInst>
 8007822:	4603      	mov	r3, r0
 8007824:	b21b      	sxth	r3, r3
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	4603      	mov	r3, r0
 8007836:	460a      	mov	r2, r1
 8007838:	80fb      	strh	r3, [r7, #6]
 800783a:	4613      	mov	r3, r2
 800783c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800783e:	797a      	ldrb	r2, [r7, #5]
 8007840:	88fb      	ldrh	r3, [r7, #6]
 8007842:	4611      	mov	r1, r2
 8007844:	4618      	mov	r0, r3
 8007846:	f001 fecf 	bl	80095e8 <SUBGRF_WriteRegister>
}
 800784a:	bf00      	nop
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	4603      	mov	r3, r0
 800785a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800785c:	88fb      	ldrh	r3, [r7, #6]
 800785e:	4618      	mov	r0, r3
 8007860:	f001 fed6 	bl	8009610 <SUBGRF_ReadRegister>
 8007864:	4603      	mov	r3, r0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	4603      	mov	r3, r0
 8007876:	6039      	str	r1, [r7, #0]
 8007878:	80fb      	strh	r3, [r7, #6]
 800787a:	4613      	mov	r3, r2
 800787c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800787e:	797b      	ldrb	r3, [r7, #5]
 8007880:	b29a      	uxth	r2, r3
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f001 fed6 	bl	8009638 <SUBGRF_WriteRegisters>
}
 800788c:	bf00      	nop
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	80fb      	strh	r3, [r7, #6]
 80078a0:	4613      	mov	r3, r2
 80078a2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80078a4:	797b      	ldrb	r3, [r7, #5]
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	88fb      	ldrh	r3, [r7, #6]
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 fee5 	bl	800967c <SUBGRF_ReadRegisters>
}
 80078b2:	bf00      	nop
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	460a      	mov	r2, r1
 80078c6:	71fb      	strb	r3, [r7, #7]
 80078c8:	4613      	mov	r3, r2
 80078ca:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d10a      	bne.n	80078e8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80078d2:	4a0e      	ldr	r2, [pc, #56]	; (800790c <RadioSetMaxPayloadLength+0x50>)
 80078d4:	79bb      	ldrb	r3, [r7, #6]
 80078d6:	7013      	strb	r3, [r2, #0]
 80078d8:	4b0c      	ldr	r3, [pc, #48]	; (800790c <RadioSetMaxPayloadLength+0x50>)
 80078da:	781a      	ldrb	r2, [r3, #0]
 80078dc:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <RadioSetMaxPayloadLength+0x54>)
 80078de:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078e0:	480c      	ldr	r0, [pc, #48]	; (8007914 <RadioSetMaxPayloadLength+0x58>)
 80078e2:	f001 fd39 	bl	8009358 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80078e6:	e00d      	b.n	8007904 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80078e8:	4b09      	ldr	r3, [pc, #36]	; (8007910 <RadioSetMaxPayloadLength+0x54>)
 80078ea:	7d5b      	ldrb	r3, [r3, #21]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d109      	bne.n	8007904 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80078f0:	4a06      	ldr	r2, [pc, #24]	; (800790c <RadioSetMaxPayloadLength+0x50>)
 80078f2:	79bb      	ldrb	r3, [r7, #6]
 80078f4:	7013      	strb	r3, [r2, #0]
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <RadioSetMaxPayloadLength+0x50>)
 80078f8:	781a      	ldrb	r2, [r3, #0]
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <RadioSetMaxPayloadLength+0x54>)
 80078fc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078fe:	4805      	ldr	r0, [pc, #20]	; (8007914 <RadioSetMaxPayloadLength+0x58>)
 8007900:	f001 fd2a 	bl	8009358 <SUBGRF_SetPacketParams>
}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	2000000d 	.word	0x2000000d
 8007910:	20000488 	.word	0x20000488
 8007914:	20000496 	.word	0x20000496

08007918 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8007922:	4a13      	ldr	r2, [pc, #76]	; (8007970 <RadioSetPublicNetwork+0x58>)
 8007924:	79fb      	ldrb	r3, [r7, #7]
 8007926:	7313      	strb	r3, [r2, #12]
 8007928:	4b11      	ldr	r3, [pc, #68]	; (8007970 <RadioSetPublicNetwork+0x58>)
 800792a:	7b1a      	ldrb	r2, [r3, #12]
 800792c:	4b10      	ldr	r3, [pc, #64]	; (8007970 <RadioSetPublicNetwork+0x58>)
 800792e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8007930:	2001      	movs	r0, #1
 8007932:	f7ff f819 	bl	8006968 <RadioSetModem>
    if( enable == true )
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800793c:	2134      	movs	r1, #52	; 0x34
 800793e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007942:	f001 fe51 	bl	80095e8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8007946:	2144      	movs	r1, #68	; 0x44
 8007948:	f240 7041 	movw	r0, #1857	; 0x741
 800794c:	f001 fe4c 	bl	80095e8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8007950:	e009      	b.n	8007966 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8007952:	2114      	movs	r1, #20
 8007954:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007958:	f001 fe46 	bl	80095e8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800795c:	2124      	movs	r1, #36	; 0x24
 800795e:	f240 7041 	movw	r0, #1857	; 0x741
 8007962:	f001 fe41 	bl	80095e8 <SUBGRF_WriteRegister>
}
 8007966:	bf00      	nop
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000488 	.word	0x20000488

08007974 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8007978:	f001 ff86 	bl	8009888 <SUBGRF_GetRadioWakeUpTime>
 800797c:	4603      	mov	r3, r0
 800797e:	3303      	adds	r3, #3
}
 8007980:	4618      	mov	r0, r3
 8007982:	bd80      	pop	{r7, pc}

08007984 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800798c:	f000 f80e 	bl	80079ac <RadioOnTxTimeoutProcess>
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80079a0:	f000 f818 	bl	80079d4 <RadioOnRxTimeoutProcess>
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80079b0:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <RadioOnTxTimeoutProcess+0x24>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d008      	beq.n	80079ca <RadioOnTxTimeoutProcess+0x1e>
 80079b8:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <RadioOnTxTimeoutProcess+0x24>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80079c2:	4b03      	ldr	r3, [pc, #12]	; (80079d0 <RadioOnTxTimeoutProcess+0x24>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	4798      	blx	r3
    }
}
 80079ca:	bf00      	nop
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000484 	.word	0x20000484

080079d4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80079d8:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <RadioOnRxTimeoutProcess+0x24>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d008      	beq.n	80079f2 <RadioOnRxTimeoutProcess+0x1e>
 80079e0:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <RadioOnRxTimeoutProcess+0x24>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80079ea:	4b03      	ldr	r3, [pc, #12]	; (80079f8 <RadioOnRxTimeoutProcess+0x24>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	4798      	blx	r3
    }
}
 80079f2:	bf00      	nop
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20000484 	.word	0x20000484

080079fc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	4603      	mov	r3, r0
 8007a04:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8007a06:	4a05      	ldr	r2, [pc, #20]	; (8007a1c <RadioOnDioIrq+0x20>)
 8007a08:	88fb      	ldrh	r3, [r7, #6]
 8007a0a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8007a0e:	f000 f807 	bl	8007a20 <RadioIrqProcess>
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000488 	.word	0x20000488

08007a20 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8007a20:	b5b0      	push	{r4, r5, r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8007a2e:	4ba5      	ldr	r3, [pc, #660]	; (8007cc4 <RadioIrqProcess+0x2a4>)
 8007a30:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a38:	f000 810d 	beq.w	8007c56 <RadioIrqProcess+0x236>
 8007a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a40:	f300 81c0 	bgt.w	8007dc4 <RadioIrqProcess+0x3a4>
 8007a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a48:	f000 80f1 	beq.w	8007c2e <RadioIrqProcess+0x20e>
 8007a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a50:	f300 81b8 	bgt.w	8007dc4 <RadioIrqProcess+0x3a4>
 8007a54:	2b80      	cmp	r3, #128	; 0x80
 8007a56:	f000 80d6 	beq.w	8007c06 <RadioIrqProcess+0x1e6>
 8007a5a:	2b80      	cmp	r3, #128	; 0x80
 8007a5c:	f300 81b2 	bgt.w	8007dc4 <RadioIrqProcess+0x3a4>
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	dc49      	bgt.n	8007af8 <RadioIrqProcess+0xd8>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f340 81ad 	ble.w	8007dc4 <RadioIrqProcess+0x3a4>
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	2b1f      	cmp	r3, #31
 8007a6e:	f200 81a9 	bhi.w	8007dc4 <RadioIrqProcess+0x3a4>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <RadioIrqProcess+0x58>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007b01 	.word	0x08007b01
 8007a7c:	08007b3b 	.word	0x08007b3b
 8007a80:	08007dc5 	.word	0x08007dc5
 8007a84:	08007ce1 	.word	0x08007ce1
 8007a88:	08007dc5 	.word	0x08007dc5
 8007a8c:	08007dc5 	.word	0x08007dc5
 8007a90:	08007dc5 	.word	0x08007dc5
 8007a94:	08007d4f 	.word	0x08007d4f
 8007a98:	08007dc5 	.word	0x08007dc5
 8007a9c:	08007dc5 	.word	0x08007dc5
 8007aa0:	08007dc5 	.word	0x08007dc5
 8007aa4:	08007dc5 	.word	0x08007dc5
 8007aa8:	08007dc5 	.word	0x08007dc5
 8007aac:	08007dc5 	.word	0x08007dc5
 8007ab0:	08007dc5 	.word	0x08007dc5
 8007ab4:	08007dc5 	.word	0x08007dc5
 8007ab8:	08007dc5 	.word	0x08007dc5
 8007abc:	08007dc5 	.word	0x08007dc5
 8007ac0:	08007dc5 	.word	0x08007dc5
 8007ac4:	08007dc5 	.word	0x08007dc5
 8007ac8:	08007dc5 	.word	0x08007dc5
 8007acc:	08007dc5 	.word	0x08007dc5
 8007ad0:	08007dc5 	.word	0x08007dc5
 8007ad4:	08007dc5 	.word	0x08007dc5
 8007ad8:	08007dc5 	.word	0x08007dc5
 8007adc:	08007dc5 	.word	0x08007dc5
 8007ae0:	08007dc5 	.word	0x08007dc5
 8007ae4:	08007dc5 	.word	0x08007dc5
 8007ae8:	08007dc5 	.word	0x08007dc5
 8007aec:	08007dc5 	.word	0x08007dc5
 8007af0:	08007dc5 	.word	0x08007dc5
 8007af4:	08007d5f 	.word	0x08007d5f
 8007af8:	2b40      	cmp	r3, #64	; 0x40
 8007afa:	f000 814b 	beq.w	8007d94 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8007afe:	e161      	b.n	8007dc4 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8007b00:	4871      	ldr	r0, [pc, #452]	; (8007cc8 <RadioIrqProcess+0x2a8>)
 8007b02:	f002 facd 	bl	800a0a0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8007b06:	2000      	movs	r0, #0
 8007b08:	f000 ffea 	bl	8008ae0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8007b0c:	f002 f860 	bl	8009bd0 <RFW_Is_LongPacketModeEnabled>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d101      	bne.n	8007b1a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8007b16:	f002 f884 	bl	8009c22 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8007b1a:	4b6c      	ldr	r3, [pc, #432]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 8152 	beq.w	8007dc8 <RadioIrqProcess+0x3a8>
 8007b24:	4b69      	ldr	r3, [pc, #420]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 814c 	beq.w	8007dc8 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8007b30:	4b66      	ldr	r3, [pc, #408]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4798      	blx	r3
        break;
 8007b38:	e146      	b.n	8007dc8 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8007b3a:	4865      	ldr	r0, [pc, #404]	; (8007cd0 <RadioIrqProcess+0x2b0>)
 8007b3c:	f002 fab0 	bl	800a0a0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007b40:	4b60      	ldr	r3, [pc, #384]	; (8007cc4 <RadioIrqProcess+0x2a4>)
 8007b42:	785b      	ldrb	r3, [r3, #1]
 8007b44:	f083 0301 	eor.w	r3, r3, #1
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d014      	beq.n	8007b78 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8007b4e:	2000      	movs	r0, #0
 8007b50:	f000 ffc6 	bl	8008ae0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8007b54:	2100      	movs	r1, #0
 8007b56:	f640 1002 	movw	r0, #2306	; 0x902
 8007b5a:	f001 fd45 	bl	80095e8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8007b5e:	f640 1044 	movw	r0, #2372	; 0x944
 8007b62:	f001 fd55 	bl	8009610 <SUBGRF_ReadRegister>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f043 0302 	orr.w	r3, r3, #2
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	4619      	mov	r1, r3
 8007b70:	f640 1044 	movw	r0, #2372	; 0x944
 8007b74:	f001 fd38 	bl	80095e8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8007b78:	1dfb      	adds	r3, r7, #7
 8007b7a:	22ff      	movs	r2, #255	; 0xff
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4855      	ldr	r0, [pc, #340]	; (8007cd4 <RadioIrqProcess+0x2b4>)
 8007b80:	f000 fe7e 	bl	8008880 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8007b84:	4854      	ldr	r0, [pc, #336]	; (8007cd8 <RadioIrqProcess+0x2b8>)
 8007b86:	f001 fcdd 	bl	8009544 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007b8a:	4b50      	ldr	r3, [pc, #320]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 811c 	beq.w	8007dcc <RadioIrqProcess+0x3ac>
 8007b94:	4b4d      	ldr	r3, [pc, #308]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 8116 	beq.w	8007dcc <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8007ba0:	4b48      	ldr	r3, [pc, #288]	; (8007cc4 <RadioIrqProcess+0x2a4>)
 8007ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d10e      	bne.n	8007bc8 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8007baa:	4b48      	ldr	r3, [pc, #288]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689c      	ldr	r4, [r3, #8]
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	b299      	uxth	r1, r3
 8007bb4:	4b43      	ldr	r3, [pc, #268]	; (8007cc4 <RadioIrqProcess+0x2a4>)
 8007bb6:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8007bba:	b21a      	sxth	r2, r3
 8007bbc:	4b41      	ldr	r3, [pc, #260]	; (8007cc4 <RadioIrqProcess+0x2a4>)
 8007bbe:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8007bc2:	4844      	ldr	r0, [pc, #272]	; (8007cd4 <RadioIrqProcess+0x2b4>)
 8007bc4:	47a0      	blx	r4
                break;
 8007bc6:	e01d      	b.n	8007c04 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8007bc8:	4b3e      	ldr	r3, [pc, #248]	; (8007cc4 <RadioIrqProcess+0x2a4>)
 8007bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bcc:	463a      	mov	r2, r7
 8007bce:	4611      	mov	r1, r2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 ff4b 	bl	8009a6c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8007bd6:	4b3d      	ldr	r3, [pc, #244]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689c      	ldr	r4, [r3, #8]
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	b299      	uxth	r1, r3
 8007be0:	4b38      	ldr	r3, [pc, #224]	; (8007cc4 <RadioIrqProcess+0x2a4>)
 8007be2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8007be6:	b218      	sxth	r0, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007bee:	4a3b      	ldr	r2, [pc, #236]	; (8007cdc <RadioIrqProcess+0x2bc>)
 8007bf0:	fb82 5203 	smull	r5, r2, r2, r3
 8007bf4:	1192      	asrs	r2, r2, #6
 8007bf6:	17db      	asrs	r3, r3, #31
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	b25b      	sxtb	r3, r3
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	4835      	ldr	r0, [pc, #212]	; (8007cd4 <RadioIrqProcess+0x2b4>)
 8007c00:	47a0      	blx	r4
                break;
 8007c02:	bf00      	nop
        break;
 8007c04:	e0e2      	b.n	8007dcc <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8007c06:	2000      	movs	r0, #0
 8007c08:	f000 ff6a 	bl	8008ae0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007c0c:	4b2f      	ldr	r3, [pc, #188]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80dd 	beq.w	8007dd0 <RadioIrqProcess+0x3b0>
 8007c16:	4b2d      	ldr	r3, [pc, #180]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80d7 	beq.w	8007dd0 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8007c22:	4b2a      	ldr	r3, [pc, #168]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	2000      	movs	r0, #0
 8007c2a:	4798      	blx	r3
        break;
 8007c2c:	e0d0      	b.n	8007dd0 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f000 ff56 	bl	8008ae0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007c34:	4b25      	ldr	r3, [pc, #148]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 80cb 	beq.w	8007dd4 <RadioIrqProcess+0x3b4>
 8007c3e:	4b23      	ldr	r3, [pc, #140]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 80c5 	beq.w	8007dd4 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8007c4a:	4b20      	ldr	r3, [pc, #128]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	2001      	movs	r0, #1
 8007c52:	4798      	blx	r3
        break;
 8007c54:	e0be      	b.n	8007dd4 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8007c56:	f000 fdf9 	bl	800884c <SUBGRF_GetOperatingMode>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d115      	bne.n	8007c8c <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8007c60:	4819      	ldr	r0, [pc, #100]	; (8007cc8 <RadioIrqProcess+0x2a8>)
 8007c62:	f002 fa1d 	bl	800a0a0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007c66:	2000      	movs	r0, #0
 8007c68:	f000 ff3a 	bl	8008ae0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007c6c:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 80b1 	beq.w	8007dd8 <RadioIrqProcess+0x3b8>
 8007c76:	4b15      	ldr	r3, [pc, #84]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80ab 	beq.w	8007dd8 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8007c82:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	4798      	blx	r3
        break;
 8007c8a:	e0a5      	b.n	8007dd8 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8007c8c:	f000 fdde 	bl	800884c <SUBGRF_GetOperatingMode>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b05      	cmp	r3, #5
 8007c94:	f040 80a0 	bne.w	8007dd8 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8007c98:	480d      	ldr	r0, [pc, #52]	; (8007cd0 <RadioIrqProcess+0x2b0>)
 8007c9a:	f002 fa01 	bl	800a0a0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	f000 ff1e 	bl	8008ae0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007ca4:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 8095 	beq.w	8007dd8 <RadioIrqProcess+0x3b8>
 8007cae:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 808f 	beq.w	8007dd8 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8007cba:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <RadioIrqProcess+0x2ac>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	4798      	blx	r3
        break;
 8007cc2:	e089      	b.n	8007dd8 <RadioIrqProcess+0x3b8>
 8007cc4:	20000488 	.word	0x20000488
 8007cc8:	200004e4 	.word	0x200004e4
 8007ccc:	20000484 	.word	0x20000484
 8007cd0:	200004fc 	.word	0x200004fc
 8007cd4:	20000384 	.word	0x20000384
 8007cd8:	200004ac 	.word	0x200004ac
 8007cdc:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8007ce0:	4b44      	ldr	r3, [pc, #272]	; (8007df4 <RadioIrqProcess+0x3d4>)
 8007ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d079      	beq.n	8007ddc <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8007ce8:	4a43      	ldr	r2, [pc, #268]	; (8007df8 <RadioIrqProcess+0x3d8>)
 8007cea:	4b42      	ldr	r3, [pc, #264]	; (8007df4 <RadioIrqProcess+0x3d4>)
 8007cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cee:	0c1b      	lsrs	r3, r3, #16
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	f640 1003 	movw	r0, #2307	; 0x903
 8007cf8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8007cfa:	4a3f      	ldr	r2, [pc, #252]	; (8007df8 <RadioIrqProcess+0x3d8>)
 8007cfc:	4b3d      	ldr	r3, [pc, #244]	; (8007df4 <RadioIrqProcess+0x3d4>)
 8007cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d00:	0a1b      	lsrs	r3, r3, #8
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	4619      	mov	r1, r3
 8007d06:	f640 1004 	movw	r0, #2308	; 0x904
 8007d0a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8007d0c:	4a3a      	ldr	r2, [pc, #232]	; (8007df8 <RadioIrqProcess+0x3d8>)
 8007d0e:	4b39      	ldr	r3, [pc, #228]	; (8007df4 <RadioIrqProcess+0x3d4>)
 8007d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	4619      	mov	r1, r3
 8007d16:	f640 1005 	movw	r0, #2309	; 0x905
 8007d1a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8007d1c:	4c36      	ldr	r4, [pc, #216]	; (8007df8 <RadioIrqProcess+0x3d8>)
 8007d1e:	4b37      	ldr	r3, [pc, #220]	; (8007dfc <RadioIrqProcess+0x3dc>)
 8007d20:	f640 1002 	movw	r0, #2306	; 0x902
 8007d24:	4798      	blx	r3
 8007d26:	4603      	mov	r3, r0
 8007d28:	f043 0301 	orr.w	r3, r3, #1
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	4619      	mov	r1, r3
 8007d30:	f640 1002 	movw	r0, #2306	; 0x902
 8007d34:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8007d36:	4b2f      	ldr	r3, [pc, #188]	; (8007df4 <RadioIrqProcess+0x3d4>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f240 2162 	movw	r1, #610	; 0x262
 8007d44:	f240 2062 	movw	r0, #610	; 0x262
 8007d48:	f001 f89e 	bl	8008e88 <SUBGRF_SetDioIrqParams>
        break;
 8007d4c:	e046      	b.n	8007ddc <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8007d4e:	f001 ff38 	bl	8009bc2 <RFW_Is_Init>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d143      	bne.n	8007de0 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8007d58:	f001 ff69 	bl	8009c2e <RFW_ReceivePayload>
        break;
 8007d5c:	e040      	b.n	8007de0 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8007d5e:	4828      	ldr	r0, [pc, #160]	; (8007e00 <RadioIrqProcess+0x3e0>)
 8007d60:	f002 f99e 	bl	800a0a0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007d64:	4b23      	ldr	r3, [pc, #140]	; (8007df4 <RadioIrqProcess+0x3d4>)
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	f083 0301 	eor.w	r3, r3, #1
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8007d72:	2000      	movs	r0, #0
 8007d74:	f000 feb4 	bl	8008ae0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007d78:	4b22      	ldr	r3, [pc, #136]	; (8007e04 <RadioIrqProcess+0x3e4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d031      	beq.n	8007de4 <RadioIrqProcess+0x3c4>
 8007d80:	4b20      	ldr	r3, [pc, #128]	; (8007e04 <RadioIrqProcess+0x3e4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d02c      	beq.n	8007de4 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8007d8a:	4b1e      	ldr	r3, [pc, #120]	; (8007e04 <RadioIrqProcess+0x3e4>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	4798      	blx	r3
        break;
 8007d92:	e027      	b.n	8007de4 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8007d94:	4b17      	ldr	r3, [pc, #92]	; (8007df4 <RadioIrqProcess+0x3d4>)
 8007d96:	785b      	ldrb	r3, [r3, #1]
 8007d98:	f083 0301 	eor.w	r3, r3, #1
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8007da2:	2000      	movs	r0, #0
 8007da4:	f000 fe9c 	bl	8008ae0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8007da8:	4b16      	ldr	r3, [pc, #88]	; (8007e04 <RadioIrqProcess+0x3e4>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01b      	beq.n	8007de8 <RadioIrqProcess+0x3c8>
 8007db0:	4b14      	ldr	r3, [pc, #80]	; (8007e04 <RadioIrqProcess+0x3e4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d016      	beq.n	8007de8 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 8007dba:	4b12      	ldr	r3, [pc, #72]	; (8007e04 <RadioIrqProcess+0x3e4>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	4798      	blx	r3
        break;
 8007dc2:	e011      	b.n	8007de8 <RadioIrqProcess+0x3c8>
        break;
 8007dc4:	bf00      	nop
 8007dc6:	e010      	b.n	8007dea <RadioIrqProcess+0x3ca>
        break;
 8007dc8:	bf00      	nop
 8007dca:	e00e      	b.n	8007dea <RadioIrqProcess+0x3ca>
        break;
 8007dcc:	bf00      	nop
 8007dce:	e00c      	b.n	8007dea <RadioIrqProcess+0x3ca>
        break;
 8007dd0:	bf00      	nop
 8007dd2:	e00a      	b.n	8007dea <RadioIrqProcess+0x3ca>
        break;
 8007dd4:	bf00      	nop
 8007dd6:	e008      	b.n	8007dea <RadioIrqProcess+0x3ca>
        break;
 8007dd8:	bf00      	nop
 8007dda:	e006      	b.n	8007dea <RadioIrqProcess+0x3ca>
        break;
 8007ddc:	bf00      	nop
 8007dde:	e004      	b.n	8007dea <RadioIrqProcess+0x3ca>
        break;
 8007de0:	bf00      	nop
 8007de2:	e002      	b.n	8007dea <RadioIrqProcess+0x3ca>
        break;
 8007de4:	bf00      	nop
 8007de6:	e000      	b.n	8007dea <RadioIrqProcess+0x3ca>
        break;
 8007de8:	bf00      	nop
    }
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bdb0      	pop	{r4, r5, r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20000488 	.word	0x20000488
 8007df8:	0800782f 	.word	0x0800782f
 8007dfc:	08007853 	.word	0x08007853
 8007e00:	200004fc 	.word	0x200004fc
 8007e04:	20000484 	.word	0x20000484

08007e08 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007e0c:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <RadioTxPrbs+0x2c>)
 8007e0e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007e12:	2101      	movs	r1, #1
 8007e14:	4618      	mov	r0, r3
 8007e16:	f001 fcdb 	bl	80097d0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8007e1a:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <RadioTxPrbs+0x30>)
 8007e1c:	212d      	movs	r1, #45	; 0x2d
 8007e1e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007e22:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8007e24:	f000 ff1f 	bl	8008c66 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8007e28:	4804      	ldr	r0, [pc, #16]	; (8007e3c <RadioTxPrbs+0x34>)
 8007e2a:	f000 fe75 	bl	8008b18 <SUBGRF_SetTx>
}
 8007e2e:	bf00      	nop
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20000488 	.word	0x20000488
 8007e38:	0800782f 	.word	0x0800782f
 8007e3c:	000fffff 	.word	0x000fffff

08007e40 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8007e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f001 fce6 	bl	8009820 <SUBGRF_SetRfTxPower>
 8007e54:	4603      	mov	r3, r0
 8007e56:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007e58:	210e      	movs	r1, #14
 8007e5a:	f640 101f 	movw	r0, #2335	; 0x91f
 8007e5e:	f001 fbc3 	bl	80095e8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	2101      	movs	r1, #1
 8007e66:	4618      	mov	r0, r3
 8007e68:	f001 fcb2 	bl	80097d0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8007e6c:	f000 fef2 	bl	8008c54 <SUBGRF_SetTxContinuousWave>
}
 8007e70:	bf00      	nop
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b089      	sub	sp, #36	; 0x24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4613      	mov	r3, r2
 8007e84:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61bb      	str	r3, [r7, #24]
 8007e92:	e011      	b.n	8007eb8 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	4413      	add	r3, r2
 8007e9a:	781a      	ldrb	r2, [r3, #0]
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	440b      	add	r3, r1
 8007ea2:	43d2      	mvns	r2, r2
 8007ea4:	b2d2      	uxtb	r2, r2
 8007ea6:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	4413      	add	r3, r2
 8007eae:	2200      	movs	r2, #0
 8007eb0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	61bb      	str	r3, [r7, #24]
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	dbe9      	blt.n	8007e94 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	61bb      	str	r3, [r7, #24]
 8007ec4:	e049      	b.n	8007f5a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	425a      	negs	r2, r3
 8007eca:	f003 0307 	and.w	r3, r3, #7
 8007ece:	f002 0207 	and.w	r2, r2, #7
 8007ed2:	bf58      	it	pl
 8007ed4:	4253      	negpl	r3, r2
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	f1c3 0307 	rsb	r3, r3, #7
 8007edc:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	da00      	bge.n	8007ee6 <payload_integration+0x6e>
 8007ee4:	3307      	adds	r3, #7
 8007ee6:	10db      	asrs	r3, r3, #3
 8007ee8:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	3301      	adds	r3, #1
 8007eee:	425a      	negs	r2, r3
 8007ef0:	f003 0307 	and.w	r3, r3, #7
 8007ef4:	f002 0207 	and.w	r2, r2, #7
 8007ef8:	bf58      	it	pl
 8007efa:	4253      	negpl	r3, r2
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f1c3 0307 	rsb	r3, r3, #7
 8007f02:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	3301      	adds	r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	da00      	bge.n	8007f0e <payload_integration+0x96>
 8007f0c:	3307      	adds	r3, #7
 8007f0e:	10db      	asrs	r3, r3, #3
 8007f10:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8007f12:	7dbb      	ldrb	r3, [r7, #22]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	4413      	add	r3, r2
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	fa42 f303 	asr.w	r3, r2, r3
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8007f2a:	7ffa      	ldrb	r2, [r7, #31]
 8007f2c:	7cfb      	ldrb	r3, [r7, #19]
 8007f2e:	4053      	eors	r3, r2
 8007f30:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8007f32:	7d3b      	ldrb	r3, [r7, #20]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	b25a      	sxtb	r2, r3
 8007f3c:	7ff9      	ldrb	r1, [r7, #31]
 8007f3e:	7d7b      	ldrb	r3, [r7, #21]
 8007f40:	fa01 f303 	lsl.w	r3, r1, r3
 8007f44:	b25b      	sxtb	r3, r3
 8007f46:	4313      	orrs	r3, r2
 8007f48:	b259      	sxtb	r1, r3
 8007f4a:	7d3b      	ldrb	r3, [r7, #20]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	b2ca      	uxtb	r2, r1
 8007f52:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	3301      	adds	r3, #1
 8007f58:	61bb      	str	r3, [r7, #24]
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	00db      	lsls	r3, r3, #3
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	dbb0      	blt.n	8007ec6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8007f64:	7ffb      	ldrb	r3, [r7, #31]
 8007f66:	01db      	lsls	r3, r3, #7
 8007f68:	b25a      	sxtb	r2, r3
 8007f6a:	7ffb      	ldrb	r3, [r7, #31]
 8007f6c:	019b      	lsls	r3, r3, #6
 8007f6e:	b25b      	sxtb	r3, r3
 8007f70:	4313      	orrs	r3, r2
 8007f72:	b25b      	sxtb	r3, r3
 8007f74:	7ffa      	ldrb	r2, [r7, #31]
 8007f76:	2a00      	cmp	r2, #0
 8007f78:	d101      	bne.n	8007f7e <payload_integration+0x106>
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	e000      	b.n	8007f80 <payload_integration+0x108>
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4313      	orrs	r3, r2
 8007f82:	b259      	sxtb	r1, r3
 8007f84:	79fb      	ldrb	r3, [r7, #7]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4413      	add	r3, r2
 8007f8a:	b2ca      	uxtb	r2, r1
 8007f8c:	701a      	strb	r2, [r3, #0]
}
 8007f8e:	bf00      	nop
 8007f90:	3724      	adds	r7, #36	; 0x24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bc80      	pop	{r7}
 8007f96:	4770      	bx	lr

08007f98 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08c      	sub	sp, #48	; 0x30
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60b9      	str	r1, [r7, #8]
 8007fa0:	607a      	str	r2, [r7, #4]
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8007fac:	2300      	movs	r3, #0
 8007fae:	623b      	str	r3, [r7, #32]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8007fb4:	f001 fdff 	bl	8009bb6 <RFW_DeInit>

    if( rxContinuous != 0 )
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	bf14      	ite	ne
 8007fc8:	2301      	movne	r3, #1
 8007fca:	2300      	moveq	r3, #0
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	4ba3      	ldr	r3, [pc, #652]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8007fd0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <RadioSetRxGenericConfig+0x48>
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	f000 80dc 	beq.w	8008196 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8007fde:	e194      	b.n	800830a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <RadioSetRxGenericConfig+0x58>
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d102      	bne.n	8007ff6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8007ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ff4:	e18a      	b.n	800830c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	7f9b      	ldrb	r3, [r3, #30]
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d902      	bls.n	8008004 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8007ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008002:	e183      	b.n	800830c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	6919      	ldr	r1, [r3, #16]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	7f9b      	ldrb	r3, [r3, #30]
 800800c:	b29a      	uxth	r2, r3
 800800e:	f107 0320 	add.w	r3, r7, #32
 8008012:	4618      	mov	r0, r3
 8008014:	f001 ff66 	bl	8009ee4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	bf14      	ite	ne
 8008020:	2301      	movne	r3, #1
 8008022:	2300      	moveq	r3, #0
 8008024:	b2db      	uxtb	r3, r3
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fe26 	bl	8008c78 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800802c:	4b8b      	ldr	r3, [pc, #556]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 800802e:	2200      	movs	r2, #0
 8008030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	4a88      	ldr	r2, [pc, #544]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 800803a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008042:	4b86      	ldr	r3, [pc, #536]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8008044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	4618      	mov	r0, r3
 800804e:	f001 fce5 	bl	8009a1c <SUBGRF_GetFskBandwidthRegValue>
 8008052:	4603      	mov	r3, r0
 8008054:	461a      	mov	r2, r3
 8008056:	4b81      	ldr	r3, [pc, #516]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8008058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800805c:	4b7f      	ldr	r3, [pc, #508]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 800805e:	2200      	movs	r2, #0
 8008060:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	b29b      	uxth	r3, r3
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	b29a      	uxth	r2, r3
 800806c:	4b7b      	ldr	r3, [pc, #492]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 800806e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	7fda      	ldrb	r2, [r3, #31]
 8008074:	4b79      	ldr	r3, [pc, #484]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8008076:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	7f9b      	ldrb	r3, [r3, #30]
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	b2da      	uxtb	r2, r3
 8008080:	4b76      	ldr	r3, [pc, #472]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8008082:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800808a:	4b74      	ldr	r3, [pc, #464]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 800808c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008094:	2b00      	cmp	r3, #0
 8008096:	d105      	bne.n	80080a4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	b2da      	uxtb	r2, r3
 800809e:	4b6f      	ldr	r3, [pc, #444]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 80080a0:	759a      	strb	r2, [r3, #22]
 80080a2:	e00b      	b.n	80080bc <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d103      	bne.n	80080b6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80080ae:	4b6b      	ldr	r3, [pc, #428]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 80080b0:	22ff      	movs	r2, #255	; 0xff
 80080b2:	759a      	strb	r2, [r3, #22]
 80080b4:	e002      	b.n	80080bc <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80080b6:	4b69      	ldr	r3, [pc, #420]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 80080b8:	22ff      	movs	r2, #255	; 0xff
 80080ba:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d004      	beq.n	80080d0 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d12d      	bne.n	800812c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80080d6:	2bf1      	cmp	r3, #241	; 0xf1
 80080d8:	d00c      	beq.n	80080f4 <RadioSetRxGenericConfig+0x15c>
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80080e0:	2bf2      	cmp	r3, #242	; 0xf2
 80080e2:	d007      	beq.n	80080f4 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d002      	beq.n	80080f4 <RadioSetRxGenericConfig+0x15c>
                return -1;
 80080ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080f2:	e10b      	b.n	800830c <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80080f4:	2300      	movs	r3, #0
 80080f6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80080fc:	4b58      	ldr	r3, [pc, #352]	; (8008260 <RadioSetRxGenericConfig+0x2c8>)
 80080fe:	6819      	ldr	r1, [r3, #0]
 8008100:	f107 0314 	add.w	r3, r7, #20
 8008104:	4a57      	ldr	r2, [pc, #348]	; (8008264 <RadioSetRxGenericConfig+0x2cc>)
 8008106:	4618      	mov	r0, r3
 8008108:	f001 fd48 	bl	8009b9c <RFW_Init>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <RadioSetRxGenericConfig+0x180>
                return -1;
 8008112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008116:	e0f9      	b.n	800830c <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008118:	4b50      	ldr	r3, [pc, #320]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 800811a:	2200      	movs	r2, #0
 800811c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800811e:	4b4f      	ldr	r3, [pc, #316]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8008120:	2201      	movs	r2, #1
 8008122:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008124:	4b4d      	ldr	r3, [pc, #308]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8008126:	2200      	movs	r2, #0
 8008128:	755a      	strb	r2, [r3, #21]
        {
 800812a:	e00e      	b.n	800814a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8008132:	4b4a      	ldr	r3, [pc, #296]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8008134:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800813c:	4b47      	ldr	r3, [pc, #284]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 800813e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008146:	4b45      	ldr	r3, [pc, #276]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8008148:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800814a:	f7ff fa6e 	bl	800762a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800814e:	2000      	movs	r0, #0
 8008150:	f7fe fc0a 	bl	8006968 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008154:	4844      	ldr	r0, [pc, #272]	; (8008268 <RadioSetRxGenericConfig+0x2d0>)
 8008156:	f001 f82d 	bl	80091b4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800815a:	4844      	ldr	r0, [pc, #272]	; (800826c <RadioSetRxGenericConfig+0x2d4>)
 800815c:	f001 f8fc 	bl	8009358 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008160:	f107 0320 	add.w	r3, r7, #32
 8008164:	4618      	mov	r0, r3
 8008166:	f000 fbc0 	bl	80088ea <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	8b9b      	ldrh	r3, [r3, #28]
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fc0a 	bl	8008988 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	8b1b      	ldrh	r3, [r3, #24]
 8008178:	4618      	mov	r0, r3
 800817a:	f000 fbe5 	bl	8008948 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008184:	fb03 f202 	mul.w	r2, r3, r2
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008190:	4a32      	ldr	r2, [pc, #200]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8008192:	6093      	str	r3, [r2, #8]
        break;
 8008194:	e0b9      	b.n	800830a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800819e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081a2:	e0b3      	b.n	800830c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d104      	bne.n	80081b8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80081b6:	e002      	b.n	80081be <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80081b8:	23ff      	movs	r3, #255	; 0xff
 80081ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	bf14      	ite	ne
 80081c6:	2301      	movne	r3, #1
 80081c8:	2300      	moveq	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 fd53 	bl	8008c78 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fd5d 	bl	8008c96 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80081dc:	4b1f      	ldr	r3, [pc, #124]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80081ea:	4b1c      	ldr	r3, [pc, #112]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 80081ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80081f6:	4b19      	ldr	r3, [pc, #100]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 80081f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8008202:	4b16      	ldr	r3, [pc, #88]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8008204:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800820e:	2b02      	cmp	r3, #2
 8008210:	d010      	beq.n	8008234 <RadioSetRxGenericConfig+0x29c>
 8008212:	2b02      	cmp	r3, #2
 8008214:	dc2c      	bgt.n	8008270 <RadioSetRxGenericConfig+0x2d8>
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <RadioSetRxGenericConfig+0x288>
 800821a:	2b01      	cmp	r3, #1
 800821c:	d005      	beq.n	800822a <RadioSetRxGenericConfig+0x292>
            break;
 800821e:	e027      	b.n	8008270 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008220:	4b0e      	ldr	r3, [pc, #56]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008228:	e023      	b.n	8008272 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800822a:	4b0c      	ldr	r3, [pc, #48]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008232:	e01e      	b.n	8008272 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800823a:	2b0b      	cmp	r3, #11
 800823c:	d004      	beq.n	8008248 <RadioSetRxGenericConfig+0x2b0>
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008244:	2b0c      	cmp	r3, #12
 8008246:	d104      	bne.n	8008252 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008248:	4b04      	ldr	r3, [pc, #16]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008250:	e00f      	b.n	8008272 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008252:	4b02      	ldr	r3, [pc, #8]	; (800825c <RadioSetRxGenericConfig+0x2c4>)
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800825a:	e00a      	b.n	8008272 <RadioSetRxGenericConfig+0x2da>
 800825c:	20000488 	.word	0x20000488
 8008260:	20000484 	.word	0x20000484
 8008264:	200004fc 	.word	0x200004fc
 8008268:	200004c0 	.word	0x200004c0
 800826c:	20000496 	.word	0x20000496
            break;
 8008270:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008272:	4b28      	ldr	r3, [pc, #160]	; (8008314 <RadioSetRxGenericConfig+0x37c>)
 8008274:	2201      	movs	r2, #1
 8008276:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800827c:	4b25      	ldr	r3, [pc, #148]	; (8008314 <RadioSetRxGenericConfig+0x37c>)
 800827e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8008286:	4b23      	ldr	r3, [pc, #140]	; (8008314 <RadioSetRxGenericConfig+0x37c>)
 8008288:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800828a:	4a22      	ldr	r2, [pc, #136]	; (8008314 <RadioSetRxGenericConfig+0x37c>)
 800828c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008290:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008298:	4b1e      	ldr	r3, [pc, #120]	; (8008314 <RadioSetRxGenericConfig+0x37c>)
 800829a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80082a4:	4b1b      	ldr	r3, [pc, #108]	; (8008314 <RadioSetRxGenericConfig+0x37c>)
 80082a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80082aa:	f7ff f9be 	bl	800762a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80082ae:	2001      	movs	r0, #1
 80082b0:	f7fe fb5a 	bl	8006968 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80082b4:	4818      	ldr	r0, [pc, #96]	; (8008318 <RadioSetRxGenericConfig+0x380>)
 80082b6:	f000 ff7d 	bl	80091b4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80082ba:	4818      	ldr	r0, [pc, #96]	; (800831c <RadioSetRxGenericConfig+0x384>)
 80082bc:	f001 f84c 	bl	8009358 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80082c0:	4b14      	ldr	r3, [pc, #80]	; (8008314 <RadioSetRxGenericConfig+0x37c>)
 80082c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d10d      	bne.n	80082e6 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80082ca:	f240 7036 	movw	r0, #1846	; 0x736
 80082ce:	f001 f99f 	bl	8009610 <SUBGRF_ReadRegister>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f023 0304 	bic.w	r3, r3, #4
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	4619      	mov	r1, r3
 80082dc:	f240 7036 	movw	r0, #1846	; 0x736
 80082e0:	f001 f982 	bl	80095e8 <SUBGRF_WriteRegister>
 80082e4:	e00c      	b.n	8008300 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80082e6:	f240 7036 	movw	r0, #1846	; 0x736
 80082ea:	f001 f991 	bl	8009610 <SUBGRF_ReadRegister>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f043 0304 	orr.w	r3, r3, #4
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	4619      	mov	r1, r3
 80082f8:	f240 7036 	movw	r0, #1846	; 0x736
 80082fc:	f001 f974 	bl	80095e8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008300:	4b04      	ldr	r3, [pc, #16]	; (8008314 <RadioSetRxGenericConfig+0x37c>)
 8008302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008306:	609a      	str	r2, [r3, #8]
        break;
 8008308:	bf00      	nop
    }
    return status;
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800830c:	4618      	mov	r0, r3
 800830e:	3730      	adds	r7, #48	; 0x30
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20000488 	.word	0x20000488
 8008318:	200004c0 	.word	0x200004c0
 800831c:	20000496 	.word	0x20000496

08008320 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08e      	sub	sp, #56	; 0x38
 8008324:	af00      	add	r7, sp, #0
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	607b      	str	r3, [r7, #4]
 800832a:	4603      	mov	r3, r0
 800832c:	73fb      	strb	r3, [r7, #15]
 800832e:	4613      	mov	r3, r2
 8008330:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008332:	2300      	movs	r3, #0
 8008334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008336:	2300      	movs	r3, #0
 8008338:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800833a:	f001 fc3c 	bl	8009bb6 <RFW_DeInit>
    switch( modem )
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b03      	cmp	r3, #3
 8008342:	f200 8204 	bhi.w	800874e <RadioSetTxGenericConfig+0x42e>
 8008346:	a201      	add	r2, pc, #4	; (adr r2, 800834c <RadioSetTxGenericConfig+0x2c>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	080084d1 	.word	0x080084d1
 8008350:	08008619 	.word	0x08008619
 8008354:	08008711 	.word	0x08008711
 8008358:	0800835d 	.word	0x0800835d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	7c9b      	ldrb	r3, [r3, #18]
 8008360:	2b08      	cmp	r3, #8
 8008362:	d902      	bls.n	800836a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008368:	e206      	b.n	8008778 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	6899      	ldr	r1, [r3, #8]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	7c9b      	ldrb	r3, [r3, #18]
 8008372:	b29a      	uxth	r2, r3
 8008374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008378:	4618      	mov	r0, r3
 800837a:	f001 fdb3 	bl	8009ee4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d102      	bne.n	800838c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800838a:	e1f5      	b.n	8008778 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f242 7210 	movw	r2, #10000	; 0x2710
 8008394:	4293      	cmp	r3, r2
 8008396:	d813      	bhi.n	80083c0 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008398:	2302      	movs	r3, #2
 800839a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800839e:	4b99      	ldr	r3, [pc, #612]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80083a0:	2203      	movs	r2, #3
 80083a2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80083a4:	4b97      	ldr	r3, [pc, #604]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80083a6:	2203      	movs	r2, #3
 80083a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a94      	ldr	r2, [pc, #592]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80083b2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	7cda      	ldrb	r2, [r3, #19]
 80083b8:	4b92      	ldr	r3, [pc, #584]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80083ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083be:	e017      	b.n	80083f0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80083c6:	4b8f      	ldr	r3, [pc, #572]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80083cc:	4b8d      	ldr	r3, [pc, #564]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a8a      	ldr	r2, [pc, #552]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80083da:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	7cda      	ldrb	r2, [r3, #19]
 80083e0:	4b88      	ldr	r3, [pc, #544]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80083e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	089b      	lsrs	r3, r3, #2
 80083ec:	4a85      	ldr	r2, [pc, #532]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80083ee:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	4b82      	ldr	r3, [pc, #520]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80083fc:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80083fe:	4b81      	ldr	r3, [pc, #516]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008400:	2204      	movs	r2, #4
 8008402:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	7c9b      	ldrb	r3, [r3, #18]
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	b2da      	uxtb	r2, r3
 800840c:	4b7d      	ldr	r3, [pc, #500]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 800840e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008410:	4b7c      	ldr	r3, [pc, #496]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008412:	2200      	movs	r2, #0
 8008414:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	7d9b      	ldrb	r3, [r3, #22]
 800841a:	2b02      	cmp	r3, #2
 800841c:	d003      	beq.n	8008426 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	7d1b      	ldrb	r3, [r3, #20]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d12b      	bne.n	800847e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	7d5b      	ldrb	r3, [r3, #21]
 800842a:	2bf1      	cmp	r3, #241	; 0xf1
 800842c:	d00a      	beq.n	8008444 <RadioSetTxGenericConfig+0x124>
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	7d5b      	ldrb	r3, [r3, #21]
 8008432:	2bf2      	cmp	r3, #242	; 0xf2
 8008434:	d006      	beq.n	8008444 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	7d5b      	ldrb	r3, [r3, #21]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d002      	beq.n	8008444 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800843e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008442:	e199      	b.n	8008778 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800844e:	4b6e      	ldr	r3, [pc, #440]	; (8008608 <RadioSetTxGenericConfig+0x2e8>)
 8008450:	6819      	ldr	r1, [r3, #0]
 8008452:	f107 0320 	add.w	r3, r7, #32
 8008456:	4a6d      	ldr	r2, [pc, #436]	; (800860c <RadioSetTxGenericConfig+0x2ec>)
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fb9f 	bl	8009b9c <RFW_Init>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8008464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008468:	e186      	b.n	8008778 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800846a:	4b66      	ldr	r3, [pc, #408]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 800846c:	2200      	movs	r2, #0
 800846e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008470:	4b64      	ldr	r3, [pc, #400]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008472:	2201      	movs	r2, #1
 8008474:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008476:	4b63      	ldr	r3, [pc, #396]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008478:	2200      	movs	r2, #0
 800847a:	755a      	strb	r2, [r3, #21]
        {
 800847c:	e00b      	b.n	8008496 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	7d5a      	ldrb	r2, [r3, #21]
 8008482:	4b60      	ldr	r3, [pc, #384]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008484:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	7d9a      	ldrb	r2, [r3, #22]
 800848a:	4b5e      	ldr	r3, [pc, #376]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 800848c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	7d1a      	ldrb	r2, [r3, #20]
 8008492:	4b5c      	ldr	r3, [pc, #368]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008494:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008496:	f7ff f8c8 	bl	800762a <RadioStandby>
        RadioSetModem( radio_modem );
 800849a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe fa62 	bl	8006968 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80084a4:	485a      	ldr	r0, [pc, #360]	; (8008610 <RadioSetTxGenericConfig+0x2f0>)
 80084a6:	f000 fe85 	bl	80091b4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80084aa:	485a      	ldr	r0, [pc, #360]	; (8008614 <RadioSetTxGenericConfig+0x2f4>)
 80084ac:	f000 ff54 	bl	8009358 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80084b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 fa18 	bl	80088ea <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	8a1b      	ldrh	r3, [r3, #16]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fa62 	bl	8008988 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	899b      	ldrh	r3, [r3, #12]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fa3d 	bl	8008948 <SUBGRF_SetCrcPolynomial>
        break;
 80084ce:	e13f      	b.n	8008750 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 80084d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084dc:	e14c      	b.n	8008778 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	7c9b      	ldrb	r3, [r3, #18]
 80084e2:	2b08      	cmp	r3, #8
 80084e4:	d902      	bls.n	80084ec <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 80084e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084ea:	e145      	b.n	8008778 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	6899      	ldr	r1, [r3, #8]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	7c9b      	ldrb	r3, [r3, #18]
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 fcf2 	bl	8009ee4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008500:	4b40      	ldr	r3, [pc, #256]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a3d      	ldr	r2, [pc, #244]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 800850e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	7cda      	ldrb	r2, [r3, #19]
 8008514:	4b3b      	ldr	r3, [pc, #236]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	4a39      	ldr	r2, [pc, #228]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008520:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008522:	4b38      	ldr	r3, [pc, #224]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008524:	2200      	movs	r2, #0
 8008526:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	b29b      	uxth	r3, r3
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	b29a      	uxth	r2, r3
 8008532:	4b34      	ldr	r3, [pc, #208]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008534:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008536:	4b33      	ldr	r3, [pc, #204]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008538:	2204      	movs	r2, #4
 800853a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	7c9b      	ldrb	r3, [r3, #18]
 8008540:	00db      	lsls	r3, r3, #3
 8008542:	b2da      	uxtb	r2, r3
 8008544:	4b2f      	ldr	r3, [pc, #188]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 8008546:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008548:	4b2e      	ldr	r3, [pc, #184]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 800854a:	2200      	movs	r2, #0
 800854c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	7d9b      	ldrb	r3, [r3, #22]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d003      	beq.n	800855e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	7d1b      	ldrb	r3, [r3, #20]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d12a      	bne.n	80085b4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	7d5b      	ldrb	r3, [r3, #21]
 8008562:	2bf1      	cmp	r3, #241	; 0xf1
 8008564:	d00a      	beq.n	800857c <RadioSetTxGenericConfig+0x25c>
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	7d5b      	ldrb	r3, [r3, #21]
 800856a:	2bf2      	cmp	r3, #242	; 0xf2
 800856c:	d006      	beq.n	800857c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	7d5b      	ldrb	r3, [r3, #21]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d002      	beq.n	800857c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8008576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800857a:	e0fd      	b.n	8008778 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800857c:	2301      	movs	r3, #1
 800857e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008584:	4b20      	ldr	r3, [pc, #128]	; (8008608 <RadioSetTxGenericConfig+0x2e8>)
 8008586:	6819      	ldr	r1, [r3, #0]
 8008588:	f107 0314 	add.w	r3, r7, #20
 800858c:	4a1f      	ldr	r2, [pc, #124]	; (800860c <RadioSetTxGenericConfig+0x2ec>)
 800858e:	4618      	mov	r0, r3
 8008590:	f001 fb04 	bl	8009b9c <RFW_Init>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d002      	beq.n	80085a0 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800859a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800859e:	e0eb      	b.n	8008778 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80085a0:	4b18      	ldr	r3, [pc, #96]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80085a6:	4b17      	ldr	r3, [pc, #92]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80085a8:	2201      	movs	r2, #1
 80085aa:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80085ac:	4b15      	ldr	r3, [pc, #84]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	755a      	strb	r2, [r3, #21]
        {
 80085b2:	e00b      	b.n	80085cc <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	7d5a      	ldrb	r2, [r3, #21]
 80085b8:	4b12      	ldr	r3, [pc, #72]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80085ba:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	7d9a      	ldrb	r2, [r3, #22]
 80085c0:	4b10      	ldr	r3, [pc, #64]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80085c2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	7d1a      	ldrb	r2, [r3, #20]
 80085c8:	4b0e      	ldr	r3, [pc, #56]	; (8008604 <RadioSetTxGenericConfig+0x2e4>)
 80085ca:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80085cc:	f7ff f82d 	bl	800762a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80085d0:	2000      	movs	r0, #0
 80085d2:	f7fe f9c9 	bl	8006968 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80085d6:	480e      	ldr	r0, [pc, #56]	; (8008610 <RadioSetTxGenericConfig+0x2f0>)
 80085d8:	f000 fdec 	bl	80091b4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80085dc:	480d      	ldr	r0, [pc, #52]	; (8008614 <RadioSetTxGenericConfig+0x2f4>)
 80085de:	f000 febb 	bl	8009358 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80085e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 f97f 	bl	80088ea <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	8a1b      	ldrh	r3, [r3, #16]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 f9c9 	bl	8008988 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	899b      	ldrh	r3, [r3, #12]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f9a4 	bl	8008948 <SUBGRF_SetCrcPolynomial>
        break;
 8008600:	e0a6      	b.n	8008750 <RadioSetTxGenericConfig+0x430>
 8008602:	bf00      	nop
 8008604:	20000488 	.word	0x20000488
 8008608:	20000484 	.word	0x20000484
 800860c:	200004e4 	.word	0x200004e4
 8008610:	200004c0 	.word	0x200004c0
 8008614:	20000496 	.word	0x20000496
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008618:	4b59      	ldr	r3, [pc, #356]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	781a      	ldrb	r2, [r3, #0]
 8008624:	4b56      	ldr	r3, [pc, #344]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 8008626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	785a      	ldrb	r2, [r3, #1]
 800862e:	4b54      	ldr	r3, [pc, #336]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 8008630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	789a      	ldrb	r2, [r3, #2]
 8008638:	4b51      	ldr	r3, [pc, #324]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 800863a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	78db      	ldrb	r3, [r3, #3]
 8008642:	2b02      	cmp	r3, #2
 8008644:	d010      	beq.n	8008668 <RadioSetTxGenericConfig+0x348>
 8008646:	2b02      	cmp	r3, #2
 8008648:	dc20      	bgt.n	800868c <RadioSetTxGenericConfig+0x36c>
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <RadioSetTxGenericConfig+0x334>
 800864e:	2b01      	cmp	r3, #1
 8008650:	d005      	beq.n	800865e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8008652:	e01b      	b.n	800868c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008654:	4b4a      	ldr	r3, [pc, #296]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800865c:	e017      	b.n	800868e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800865e:	4b48      	ldr	r3, [pc, #288]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008666:	e012      	b.n	800868e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b0b      	cmp	r3, #11
 800866e:	d003      	beq.n	8008678 <RadioSetTxGenericConfig+0x358>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b0c      	cmp	r3, #12
 8008676:	d104      	bne.n	8008682 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008678:	4b41      	ldr	r3, [pc, #260]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008680:	e005      	b.n	800868e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008682:	4b3f      	ldr	r3, [pc, #252]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800868a:	e000      	b.n	800868e <RadioSetTxGenericConfig+0x36e>
            break;
 800868c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800868e:	4b3c      	ldr	r3, [pc, #240]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 8008690:	2201      	movs	r2, #1
 8008692:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	889a      	ldrh	r2, [r3, #4]
 8008698:	4b39      	ldr	r3, [pc, #228]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 800869a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	799a      	ldrb	r2, [r3, #6]
 80086a0:	4b37      	ldr	r3, [pc, #220]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 80086a2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	79da      	ldrb	r2, [r3, #7]
 80086a8:	4b35      	ldr	r3, [pc, #212]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 80086aa:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	7a1a      	ldrb	r2, [r3, #8]
 80086b2:	4b33      	ldr	r3, [pc, #204]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 80086b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 80086b8:	f7fe ffb7 	bl	800762a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80086bc:	2001      	movs	r0, #1
 80086be:	f7fe f953 	bl	8006968 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80086c2:	4830      	ldr	r0, [pc, #192]	; (8008784 <RadioSetTxGenericConfig+0x464>)
 80086c4:	f000 fd76 	bl	80091b4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80086c8:	482f      	ldr	r0, [pc, #188]	; (8008788 <RadioSetTxGenericConfig+0x468>)
 80086ca:	f000 fe45 	bl	8009358 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80086ce:	4b2c      	ldr	r3, [pc, #176]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 80086d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086d4:	2b06      	cmp	r3, #6
 80086d6:	d10d      	bne.n	80086f4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80086d8:	f640 0089 	movw	r0, #2185	; 0x889
 80086dc:	f000 ff98 	bl	8009610 <SUBGRF_ReadRegister>
 80086e0:	4603      	mov	r3, r0
 80086e2:	f023 0304 	bic.w	r3, r3, #4
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	4619      	mov	r1, r3
 80086ea:	f640 0089 	movw	r0, #2185	; 0x889
 80086ee:	f000 ff7b 	bl	80095e8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80086f2:	e02d      	b.n	8008750 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80086f4:	f640 0089 	movw	r0, #2185	; 0x889
 80086f8:	f000 ff8a 	bl	8009610 <SUBGRF_ReadRegister>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f043 0304 	orr.w	r3, r3, #4
 8008702:	b2db      	uxtb	r3, r3
 8008704:	4619      	mov	r1, r3
 8008706:	f640 0089 	movw	r0, #2185	; 0x889
 800870a:	f000 ff6d 	bl	80095e8 <SUBGRF_WriteRegister>
        break;
 800870e:	e01f      	b.n	8008750 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d004      	beq.n	8008722 <RadioSetTxGenericConfig+0x402>
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008720:	d902      	bls.n	8008728 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8008722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008726:	e027      	b.n	8008778 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8008728:	2003      	movs	r0, #3
 800872a:	f7fe f91d 	bl	8006968 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800872e:	4b14      	ldr	r3, [pc, #80]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 8008730:	2202      	movs	r2, #2
 8008732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a11      	ldr	r2, [pc, #68]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 800873c:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800873e:	4b10      	ldr	r3, [pc, #64]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 8008740:	2216      	movs	r2, #22
 8008742:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008746:	480f      	ldr	r0, [pc, #60]	; (8008784 <RadioSetTxGenericConfig+0x464>)
 8008748:	f000 fd34 	bl	80091b4 <SUBGRF_SetModulationParams>
        break;
 800874c:	e000      	b.n	8008750 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800874e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008754:	4618      	mov	r0, r3
 8008756:	f001 f863 	bl	8009820 <SUBGRF_SetRfTxPower>
 800875a:	4603      	mov	r3, r0
 800875c:	461a      	mov	r2, r3
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 8008760:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008764:	4b06      	ldr	r3, [pc, #24]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 8008766:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800876a:	4618      	mov	r0, r3
 800876c:	f001 fa37 	bl	8009bde <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008770:	4a03      	ldr	r2, [pc, #12]	; (8008780 <RadioSetTxGenericConfig+0x460>)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6053      	str	r3, [r2, #4]
    return 0;
 8008776:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008778:	4618      	mov	r0, r3
 800877a:	3738      	adds	r7, #56	; 0x38
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20000488 	.word	0x20000488
 8008784:	200004c0 	.word	0x200004c0
 8008788:	20000496 	.word	0x20000496

0800878c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008794:	2301      	movs	r3, #1
 8008796:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr

080087a4 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 80087ae:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr
	...

080087bc <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d002      	beq.n	80087d0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80087ca:	4a1d      	ldr	r2, [pc, #116]	; (8008840 <SUBGRF_Init+0x84>)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80087d0:	f7f8 f9a2 	bl	8000b18 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80087d4:	2002      	movs	r0, #2
 80087d6:	f001 f8ff 	bl	80099d8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80087da:	4b1a      	ldr	r3, [pc, #104]	; (8008844 <SUBGRF_Init+0x88>)
 80087dc:	2200      	movs	r2, #0
 80087de:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80087e0:	2000      	movs	r0, #0
 80087e2:	f000 f97d 	bl	8008ae0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80087e6:	f001 fb52 	bl	8009e8e <RBI_IsTCXO>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d10e      	bne.n	800880e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80087f0:	2140      	movs	r1, #64	; 0x40
 80087f2:	2001      	movs	r0, #1
 80087f4:	f000 fb82 	bl	8008efc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80087f8:	2100      	movs	r1, #0
 80087fa:	f640 1011 	movw	r0, #2321	; 0x911
 80087fe:	f000 fef3 	bl	80095e8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8008802:	237f      	movs	r3, #127	; 0x7f
 8008804:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8008806:	7b38      	ldrb	r0, [r7, #12]
 8008808:	f000 fa8b 	bl	8008d22 <SUBGRF_Calibrate>
 800880c:	e009      	b.n	8008822 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800880e:	2120      	movs	r1, #32
 8008810:	f640 1011 	movw	r0, #2321	; 0x911
 8008814:	f000 fee8 	bl	80095e8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008818:	2120      	movs	r1, #32
 800881a:	f640 1012 	movw	r0, #2322	; 0x912
 800881e:	f000 fee3 	bl	80095e8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008822:	210e      	movs	r1, #14
 8008824:	f640 101f 	movw	r0, #2335	; 0x91f
 8008828:	f000 fede 	bl	80095e8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800882c:	f001 fa86 	bl	8009d3c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8008830:	4b05      	ldr	r3, [pc, #20]	; (8008848 <SUBGRF_Init+0x8c>)
 8008832:	2201      	movs	r2, #1
 8008834:	701a      	strb	r2, [r3, #0]
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20000520 	.word	0x20000520
 8008844:	2000051c 	.word	0x2000051c
 8008848:	20000514 	.word	0x20000514

0800884c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8008850:	4b02      	ldr	r3, [pc, #8]	; (800885c <SUBGRF_GetOperatingMode+0x10>)
 8008852:	781b      	ldrb	r3, [r3, #0]
}
 8008854:	4618      	mov	r0, r3
 8008856:	46bd      	mov	sp, r7
 8008858:	bc80      	pop	{r7}
 800885a:	4770      	bx	lr
 800885c:	20000514 	.word	0x20000514

08008860 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	461a      	mov	r2, r3
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	2000      	movs	r0, #0
 8008874:	f000 ff24 	bl	80096c0 <SUBGRF_WriteBuffer>
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4613      	mov	r3, r2
 800888c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8008892:	f107 0317 	add.w	r3, r7, #23
 8008896:	4619      	mov	r1, r3
 8008898:	68b8      	ldr	r0, [r7, #8]
 800889a:	f000 fe27 	bl	80094ec <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	79fa      	ldrb	r2, [r7, #7]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d201      	bcs.n	80088ac <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e007      	b.n	80088bc <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80088ac:	7df8      	ldrb	r0, [r7, #23]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	68f9      	ldr	r1, [r7, #12]
 80088b6:	f000 ff25 	bl	8009704 <SUBGRF_ReadBuffer>

    return 0;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	460b      	mov	r3, r1
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80088d2:	7afb      	ldrb	r3, [r7, #11]
 80088d4:	4619      	mov	r1, r3
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f7ff ffc2 	bl	8008860 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f91b 	bl	8008b18 <SUBGRF_SetTx>
}
 80088e2:	bf00      	nop
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80088f2:	2208      	movs	r2, #8
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80088fa:	f000 fe9d 	bl	8009638 <SUBGRF_WriteRegisters>
    return 0;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8008912:	88fb      	ldrh	r3, [r7, #6]
 8008914:	0a1b      	lsrs	r3, r3, #8
 8008916:	b29b      	uxth	r3, r3
 8008918:	b2db      	uxtb	r3, r3
 800891a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	b2db      	uxtb	r3, r3
 8008920:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8008922:	f000 fb6f 	bl	8009004 <SUBGRF_GetPacketType>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d108      	bne.n	800893e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800892c:	f107 030c 	add.w	r3, r7, #12
 8008930:	2202      	movs	r2, #2
 8008932:	4619      	mov	r1, r3
 8008934:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8008938:	f000 fe7e 	bl	8009638 <SUBGRF_WriteRegisters>
            break;
 800893c:	e000      	b.n	8008940 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800893e:	bf00      	nop
    }
}
 8008940:	bf00      	nop
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	4603      	mov	r3, r0
 8008950:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8008952:	88fb      	ldrh	r3, [r7, #6]
 8008954:	0a1b      	lsrs	r3, r3, #8
 8008956:	b29b      	uxth	r3, r3
 8008958:	b2db      	uxtb	r3, r3
 800895a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800895c:	88fb      	ldrh	r3, [r7, #6]
 800895e:	b2db      	uxtb	r3, r3
 8008960:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8008962:	f000 fb4f 	bl	8009004 <SUBGRF_GetPacketType>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d108      	bne.n	800897e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800896c:	f107 030c 	add.w	r3, r7, #12
 8008970:	2202      	movs	r2, #2
 8008972:	4619      	mov	r1, r3
 8008974:	f240 60be 	movw	r0, #1726	; 0x6be
 8008978:	f000 fe5e 	bl	8009638 <SUBGRF_WriteRegisters>
            break;
 800897c:	e000      	b.n	8008980 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800897e:	bf00      	nop
    }
}
 8008980:	bf00      	nop
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8008992:	2300      	movs	r3, #0
 8008994:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8008996:	f000 fb35 	bl	8009004 <SUBGRF_GetPacketType>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d121      	bne.n	80089e4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80089a0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80089a4:	f000 fe34 	bl	8009610 <SUBGRF_ReadRegister>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f023 0301 	bic.w	r3, r3, #1
 80089ae:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	0a1b      	lsrs	r3, r3, #8
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	b25b      	sxtb	r3, r3
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	b25a      	sxtb	r2, r3
 80089be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	b25b      	sxtb	r3, r3
 80089c6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	4619      	mov	r1, r3
 80089cc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80089d0:	f000 fe0a 	bl	80095e8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80089d4:	88fb      	ldrh	r3, [r7, #6]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	4619      	mov	r1, r3
 80089da:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80089de:	f000 fe03 	bl	80095e8 <SUBGRF_WriteRegister>
            break;
 80089e2:	e000      	b.n	80089e6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80089e4:	bf00      	nop
    }
}
 80089e6:	bf00      	nop
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8008a00:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008a04:	f000 fe04 	bl	8009610 <SUBGRF_ReadRegister>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	4619      	mov	r1, r3
 8008a16:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008a1a:	f000 fde5 	bl	80095e8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8008a1e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008a22:	f000 fdf5 	bl	8009610 <SUBGRF_ReadRegister>
 8008a26:	4603      	mov	r3, r0
 8008a28:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8008a2a:	79bb      	ldrb	r3, [r7, #6]
 8008a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	4619      	mov	r1, r3
 8008a34:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008a38:	f000 fdd6 	bl	80095e8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008a3c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008a40:	f000 f88a 	bl	8008b58 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8008a44:	463b      	mov	r3, r7
 8008a46:	2204      	movs	r2, #4
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f640 0019 	movw	r0, #2073	; 0x819
 8008a4e:	f000 fe15 	bl	800967c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8008a52:	2000      	movs	r0, #0
 8008a54:	f000 f844 	bl	8008ae0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008a60:	f000 fdc2 	bl	80095e8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8008a64:	79bb      	ldrb	r3, [r7, #6]
 8008a66:	4619      	mov	r1, r3
 8008a68:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008a6c:	f000 fdbc 	bl	80095e8 <SUBGRF_WriteRegister>

    return number;
 8008a70:	683b      	ldr	r3, [r7, #0]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8008a84:	2000      	movs	r0, #0
 8008a86:	f001 f999 	bl	8009dbc <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008a8a:	2002      	movs	r0, #2
 8008a8c:	f000 ffa4 	bl	80099d8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008a90:	793b      	ldrb	r3, [r7, #4]
 8008a92:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008a9c:	793b      	ldrb	r3, [r7, #4]
 8008a9e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008aa6:	b25b      	sxtb	r3, r3
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8008aac:	793b      	ldrb	r3, [r7, #4]
 8008aae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	b25b      	sxtb	r3, r3
 8008aba:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008abc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8008abe:	f107 030f 	add.w	r3, r7, #15
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	2084      	movs	r0, #132	; 0x84
 8008ac8:	f000 fe3e 	bl	8009748 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8008acc:	4b03      	ldr	r3, [pc, #12]	; (8008adc <SUBGRF_SetSleep+0x60>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	701a      	strb	r2, [r3, #0]
}
 8008ad2:	bf00      	nop
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20000514 	.word	0x20000514

08008ae0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8008aea:	1dfb      	adds	r3, r7, #7
 8008aec:	2201      	movs	r2, #1
 8008aee:	4619      	mov	r1, r3
 8008af0:	2080      	movs	r0, #128	; 0x80
 8008af2:	f000 fe29 	bl	8009748 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d103      	bne.n	8008b04 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8008afc:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <SUBGRF_SetStandby+0x34>)
 8008afe:	2201      	movs	r2, #1
 8008b00:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8008b02:	e002      	b.n	8008b0a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8008b04:	4b03      	ldr	r3, [pc, #12]	; (8008b14 <SUBGRF_SetStandby+0x34>)
 8008b06:	2202      	movs	r2, #2
 8008b08:	701a      	strb	r2, [r3, #0]
}
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20000514 	.word	0x20000514

08008b18 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8008b20:	4b0c      	ldr	r3, [pc, #48]	; (8008b54 <SUBGRF_SetTx+0x3c>)
 8008b22:	2204      	movs	r2, #4
 8008b24:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	0c1b      	lsrs	r3, r3, #16
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	0a1b      	lsrs	r3, r3, #8
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8008b3c:	f107 030c 	add.w	r3, r7, #12
 8008b40:	2203      	movs	r2, #3
 8008b42:	4619      	mov	r1, r3
 8008b44:	2083      	movs	r0, #131	; 0x83
 8008b46:	f000 fdff 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008b4a:	bf00      	nop
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000514 	.word	0x20000514

08008b58 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008b60:	4b0c      	ldr	r3, [pc, #48]	; (8008b94 <SUBGRF_SetRx+0x3c>)
 8008b62:	2205      	movs	r2, #5
 8008b64:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	0c1b      	lsrs	r3, r3, #16
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	0a1b      	lsrs	r3, r3, #8
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008b7c:	f107 030c 	add.w	r3, r7, #12
 8008b80:	2203      	movs	r2, #3
 8008b82:	4619      	mov	r1, r3
 8008b84:	2082      	movs	r0, #130	; 0x82
 8008b86:	f000 fddf 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008b8a:	bf00      	nop
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000514 	.word	0x20000514

08008b98 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008ba0:	4b0e      	ldr	r3, [pc, #56]	; (8008bdc <SUBGRF_SetRxBoosted+0x44>)
 8008ba2:	2205      	movs	r2, #5
 8008ba4:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8008ba6:	2197      	movs	r1, #151	; 0x97
 8008ba8:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8008bac:	f000 fd1c 	bl	80095e8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	0c1b      	lsrs	r3, r3, #16
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	0a1b      	lsrs	r3, r3, #8
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008bc6:	f107 030c 	add.w	r3, r7, #12
 8008bca:	2203      	movs	r2, #3
 8008bcc:	4619      	mov	r1, r3
 8008bce:	2082      	movs	r0, #130	; 0x82
 8008bd0:	f000 fdba 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20000514 	.word	0x20000514

08008be0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	0c1b      	lsrs	r3, r3, #16
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	0a1b      	lsrs	r3, r3, #8
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	0c1b      	lsrs	r3, r3, #16
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	0a1b      	lsrs	r3, r3, #8
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8008c16:	f107 0308 	add.w	r3, r7, #8
 8008c1a:	2206      	movs	r2, #6
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	2094      	movs	r0, #148	; 0x94
 8008c20:	f000 fd92 	bl	8009748 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8008c24:	4b03      	ldr	r3, [pc, #12]	; (8008c34 <SUBGRF_SetRxDutyCycle+0x54>)
 8008c26:	2206      	movs	r2, #6
 8008c28:	701a      	strb	r2, [r3, #0]
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000514 	.word	0x20000514

08008c38 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2100      	movs	r1, #0
 8008c40:	20c5      	movs	r0, #197	; 0xc5
 8008c42:	f000 fd81 	bl	8009748 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8008c46:	4b02      	ldr	r3, [pc, #8]	; (8008c50 <SUBGRF_SetCad+0x18>)
 8008c48:	2207      	movs	r2, #7
 8008c4a:	701a      	strb	r2, [r3, #0]
}
 8008c4c:	bf00      	nop
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	20000514 	.word	0x20000514

08008c54 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	20d1      	movs	r0, #209	; 0xd1
 8008c5e:	f000 fd73 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008c62:	bf00      	nop
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	20d2      	movs	r0, #210	; 0xd2
 8008c70:	f000 fd6a 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008c74:	bf00      	nop
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8008c82:	1dfb      	adds	r3, r7, #7
 8008c84:	2201      	movs	r2, #1
 8008c86:	4619      	mov	r1, r3
 8008c88:	209f      	movs	r0, #159	; 0x9f
 8008c8a:	f000 fd5d 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008c8e:	bf00      	nop
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8008ca0:	1dfb      	adds	r3, r7, #7
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	20a0      	movs	r0, #160	; 0xa0
 8008ca8:	f000 fd4e 	bl	8009748 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	2b3f      	cmp	r3, #63	; 0x3f
 8008cb0:	d91c      	bls.n	8008cec <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8008cb2:	79fb      	ldrb	r3, [r7, #7]
 8008cb4:	085b      	lsrs	r3, r3, #1
 8008cb6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8008cc0:	e005      	b.n	8008cce <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	089b      	lsrs	r3, r3, #2
 8008cc6:	73fb      	strb	r3, [r7, #15]
            exp++;
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	2b1f      	cmp	r3, #31
 8008cd2:	d8f6      	bhi.n	8008cc2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
 8008cdc:	4413      	add	r3, r2
 8008cde:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8008ce0:	7b7b      	ldrb	r3, [r7, #13]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	f240 7006 	movw	r0, #1798	; 0x706
 8008ce8:	f000 fc7e 	bl	80095e8 <SUBGRF_WriteRegister>
    }
}
 8008cec:	bf00      	nop
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8008cfa:	f001 f8d3 	bl	8009ea4 <RBI_IsDCDC>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d102      	bne.n	8008d0a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8008d04:	2301      	movs	r3, #1
 8008d06:	71fb      	strb	r3, [r7, #7]
 8008d08:	e001      	b.n	8008d0e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8008d0e:	1dfb      	adds	r3, r7, #7
 8008d10:	2201      	movs	r2, #1
 8008d12:	4619      	mov	r1, r3
 8008d14:	2096      	movs	r0, #150	; 0x96
 8008d16:	f000 fd17 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008d2a:	793b      	ldrb	r3, [r7, #4]
 8008d2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	019b      	lsls	r3, r3, #6
 8008d34:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8008d36:	793b      	ldrb	r3, [r7, #4]
 8008d38:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008d40:	b25b      	sxtb	r3, r3
 8008d42:	4313      	orrs	r3, r2
 8008d44:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008d46:	793b      	ldrb	r3, [r7, #4]
 8008d48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8008d50:	b25b      	sxtb	r3, r3
 8008d52:	4313      	orrs	r3, r2
 8008d54:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8008d56:	793b      	ldrb	r3, [r7, #4]
 8008d58:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008d60:	b25b      	sxtb	r3, r3
 8008d62:	4313      	orrs	r3, r2
 8008d64:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8008d66:	793b      	ldrb	r3, [r7, #4]
 8008d68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8008d70:	b25b      	sxtb	r3, r3
 8008d72:	4313      	orrs	r3, r2
 8008d74:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8008d76:	793b      	ldrb	r3, [r7, #4]
 8008d78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8008d80:	b25b      	sxtb	r3, r3
 8008d82:	4313      	orrs	r3, r2
 8008d84:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8008d86:	793b      	ldrb	r3, [r7, #4]
 8008d88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8008d90:	4313      	orrs	r3, r2
 8008d92:	b25b      	sxtb	r3, r3
 8008d94:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008d96:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8008d98:	f107 030f 	add.w	r3, r7, #15
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	4619      	mov	r1, r3
 8008da0:	2089      	movs	r0, #137	; 0x89
 8008da2:	f000 fcd1 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008da6:	bf00      	nop
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a1d      	ldr	r2, [pc, #116]	; (8008e30 <SUBGRF_CalibrateImage+0x80>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d904      	bls.n	8008dca <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8008dc0:	23e1      	movs	r3, #225	; 0xe1
 8008dc2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8008dc4:	23e9      	movs	r3, #233	; 0xe9
 8008dc6:	737b      	strb	r3, [r7, #13]
 8008dc8:	e027      	b.n	8008e1a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a19      	ldr	r2, [pc, #100]	; (8008e34 <SUBGRF_CalibrateImage+0x84>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d904      	bls.n	8008ddc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8008dd2:	23d7      	movs	r3, #215	; 0xd7
 8008dd4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8008dd6:	23db      	movs	r3, #219	; 0xdb
 8008dd8:	737b      	strb	r3, [r7, #13]
 8008dda:	e01e      	b.n	8008e1a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a16      	ldr	r2, [pc, #88]	; (8008e38 <SUBGRF_CalibrateImage+0x88>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d904      	bls.n	8008dee <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8008de4:	23c1      	movs	r3, #193	; 0xc1
 8008de6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8008de8:	23c5      	movs	r3, #197	; 0xc5
 8008dea:	737b      	strb	r3, [r7, #13]
 8008dec:	e015      	b.n	8008e1a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a12      	ldr	r2, [pc, #72]	; (8008e3c <SUBGRF_CalibrateImage+0x8c>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d904      	bls.n	8008e00 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8008df6:	2375      	movs	r3, #117	; 0x75
 8008df8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8008dfa:	2381      	movs	r3, #129	; 0x81
 8008dfc:	737b      	strb	r3, [r7, #13]
 8008dfe:	e00c      	b.n	8008e1a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a0f      	ldr	r2, [pc, #60]	; (8008e40 <SUBGRF_CalibrateImage+0x90>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d904      	bls.n	8008e12 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8008e08:	236b      	movs	r3, #107	; 0x6b
 8008e0a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8008e0c:	236f      	movs	r3, #111	; 0x6f
 8008e0e:	737b      	strb	r3, [r7, #13]
 8008e10:	e003      	b.n	8008e1a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8008e12:	2329      	movs	r3, #41	; 0x29
 8008e14:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8008e16:	232b      	movs	r3, #43	; 0x2b
 8008e18:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8008e1a:	f107 030c 	add.w	r3, r7, #12
 8008e1e:	2202      	movs	r2, #2
 8008e20:	4619      	mov	r1, r3
 8008e22:	2098      	movs	r0, #152	; 0x98
 8008e24:	f000 fc90 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008e28:	bf00      	nop
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	35a4e900 	.word	0x35a4e900
 8008e34:	32a9f880 	.word	0x32a9f880
 8008e38:	2de54480 	.word	0x2de54480
 8008e3c:	1b6b0b00 	.word	0x1b6b0b00
 8008e40:	1954fc40 	.word	0x1954fc40

08008e44 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8008e44:	b590      	push	{r4, r7, lr}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	4611      	mov	r1, r2
 8008e50:	461a      	mov	r2, r3
 8008e52:	4623      	mov	r3, r4
 8008e54:	71fb      	strb	r3, [r7, #7]
 8008e56:	4603      	mov	r3, r0
 8008e58:	71bb      	strb	r3, [r7, #6]
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	717b      	strb	r3, [r7, #5]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8008e66:	79bb      	ldrb	r3, [r7, #6]
 8008e68:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8008e6a:	797b      	ldrb	r3, [r7, #5]
 8008e6c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8008e6e:	793b      	ldrb	r3, [r7, #4]
 8008e70:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8008e72:	f107 030c 	add.w	r3, r7, #12
 8008e76:	2204      	movs	r2, #4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	2095      	movs	r0, #149	; 0x95
 8008e7c:	f000 fc64 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008e80:	bf00      	nop
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd90      	pop	{r4, r7, pc}

08008e88 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8008e88:	b590      	push	{r4, r7, lr}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	4604      	mov	r4, r0
 8008e90:	4608      	mov	r0, r1
 8008e92:	4611      	mov	r1, r2
 8008e94:	461a      	mov	r2, r3
 8008e96:	4623      	mov	r3, r4
 8008e98:	80fb      	strh	r3, [r7, #6]
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	80bb      	strh	r3, [r7, #4]
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	807b      	strh	r3, [r7, #2]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	0a1b      	lsrs	r3, r3, #8
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8008eb0:	88fb      	ldrh	r3, [r7, #6]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8008eb6:	88bb      	ldrh	r3, [r7, #4]
 8008eb8:	0a1b      	lsrs	r3, r3, #8
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8008ec0:	88bb      	ldrh	r3, [r7, #4]
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8008ec6:	887b      	ldrh	r3, [r7, #2]
 8008ec8:	0a1b      	lsrs	r3, r3, #8
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8008ed0:	887b      	ldrh	r3, [r7, #2]
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8008ed6:	883b      	ldrh	r3, [r7, #0]
 8008ed8:	0a1b      	lsrs	r3, r3, #8
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8008ee0:	883b      	ldrh	r3, [r7, #0]
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8008ee6:	f107 0308 	add.w	r3, r7, #8
 8008eea:	2208      	movs	r2, #8
 8008eec:	4619      	mov	r1, r3
 8008eee:	2008      	movs	r0, #8
 8008ef0:	f000 fc2a 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008ef4:	bf00      	nop
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd90      	pop	{r4, r7, pc}

08008efc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	6039      	str	r1, [r7, #0]
 8008f06:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	f003 0307 	and.w	r3, r3, #7
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	0c1b      	lsrs	r3, r3, #16
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	0a1b      	lsrs	r3, r3, #8
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8008f28:	f107 030c 	add.w	r3, r7, #12
 8008f2c:	2204      	movs	r2, #4
 8008f2e:	4619      	mov	r1, r3
 8008f30:	2097      	movs	r0, #151	; 0x97
 8008f32:	f000 fc09 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008f36:	bf00      	nop
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
	...

08008f40 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8008f40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8008f4e:	4b1d      	ldr	r3, [pc, #116]	; (8008fc4 <SUBGRF_SetRfFrequency+0x84>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	f083 0301 	eor.w	r3, r3, #1
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d005      	beq.n	8008f68 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff ff27 	bl	8008db0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8008f62:	4b18      	ldr	r3, [pc, #96]	; (8008fc4 <SUBGRF_SetRfFrequency+0x84>)
 8008f64:	2201      	movs	r2, #1
 8008f66:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	461c      	mov	r4, r3
 8008f6e:	4615      	mov	r5, r2
 8008f70:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8008f74:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8008f78:	4a13      	ldr	r2, [pc, #76]	; (8008fc8 <SUBGRF_SetRfFrequency+0x88>)
 8008f7a:	f04f 0300 	mov.w	r3, #0
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4649      	mov	r1, r9
 8008f82:	f7f7 f95d 	bl	8000240 <__aeabi_uldivmod>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	0e1b      	lsrs	r3, r3, #24
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	0c1b      	lsrs	r3, r3, #16
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	0a1b      	lsrs	r3, r3, #8
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8008fac:	f107 0308 	add.w	r3, r7, #8
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	2086      	movs	r0, #134	; 0x86
 8008fb6:	f000 fbc7 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008fba:	bf00      	nop
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008fc4:	2000051c 	.word	0x2000051c
 8008fc8:	01e84800 	.word	0x01e84800

08008fcc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8008fd6:	79fa      	ldrb	r2, [r7, #7]
 8008fd8:	4b09      	ldr	r3, [pc, #36]	; (8009000 <SUBGRF_SetPacketType+0x34>)
 8008fda:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d104      	bne.n	8008fec <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008fe8:	f000 fafe 	bl	80095e8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8008fec:	1dfb      	adds	r3, r7, #7
 8008fee:	2201      	movs	r2, #1
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	208a      	movs	r0, #138	; 0x8a
 8008ff4:	f000 fba8 	bl	8009748 <SUBGRF_WriteCommand>
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20000515 	.word	0x20000515

08009004 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8009004:	b480      	push	{r7}
 8009006:	af00      	add	r7, sp, #0
    return PacketType;
 8009008:	4b02      	ldr	r3, [pc, #8]	; (8009014 <SUBGRF_GetPacketType+0x10>)
 800900a:	781b      	ldrb	r3, [r3, #0]
}
 800900c:	4618      	mov	r0, r3
 800900e:	46bd      	mov	sp, r7
 8009010:	bc80      	pop	{r7}
 8009012:	4770      	bx	lr
 8009014:	20000515 	.word	0x20000515

08009018 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	71fb      	strb	r3, [r7, #7]
 8009022:	460b      	mov	r3, r1
 8009024:	71bb      	strb	r3, [r7, #6]
 8009026:	4613      	mov	r3, r2
 8009028:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d149      	bne.n	80090c4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8009030:	2000      	movs	r0, #0
 8009032:	f000 ff42 	bl	8009eba <RBI_GetRFOMaxPowerConfig>
 8009036:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009038:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	429a      	cmp	r2, r3
 8009040:	da01      	bge.n	8009046 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2b0e      	cmp	r3, #14
 800904a:	d10e      	bne.n	800906a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800904c:	2301      	movs	r3, #1
 800904e:	2201      	movs	r2, #1
 8009050:	2100      	movs	r1, #0
 8009052:	2004      	movs	r0, #4
 8009054:	f7ff fef6 	bl	8008e44 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009058:	79ba      	ldrb	r2, [r7, #6]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	b2db      	uxtb	r3, r3
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	b2db      	uxtb	r3, r3
 8009062:	330e      	adds	r3, #14
 8009064:	b2db      	uxtb	r3, r3
 8009066:	71bb      	strb	r3, [r7, #6]
 8009068:	e01f      	b.n	80090aa <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2b0a      	cmp	r3, #10
 800906e:	d10e      	bne.n	800908e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009070:	2301      	movs	r3, #1
 8009072:	2201      	movs	r2, #1
 8009074:	2100      	movs	r1, #0
 8009076:	2001      	movs	r0, #1
 8009078:	f7ff fee4 	bl	8008e44 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800907c:	79ba      	ldrb	r2, [r7, #6]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	b2db      	uxtb	r3, r3
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	b2db      	uxtb	r3, r3
 8009086:	330d      	adds	r3, #13
 8009088:	b2db      	uxtb	r3, r3
 800908a:	71bb      	strb	r3, [r7, #6]
 800908c:	e00d      	b.n	80090aa <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800908e:	2301      	movs	r3, #1
 8009090:	2201      	movs	r2, #1
 8009092:	2100      	movs	r1, #0
 8009094:	2007      	movs	r0, #7
 8009096:	f7ff fed5 	bl	8008e44 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800909a:	79ba      	ldrb	r2, [r7, #6]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	330e      	adds	r3, #14
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80090aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80090ae:	f113 0f11 	cmn.w	r3, #17
 80090b2:	da01      	bge.n	80090b8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80090b4:	23ef      	movs	r3, #239	; 0xef
 80090b6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80090b8:	2118      	movs	r1, #24
 80090ba:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80090be:	f000 fa93 	bl	80095e8 <SUBGRF_WriteRegister>
 80090c2:	e067      	b.n	8009194 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80090c4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80090c8:	f000 faa2 	bl	8009610 <SUBGRF_ReadRegister>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f043 031e 	orr.w	r3, r3, #30
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	4619      	mov	r1, r3
 80090d6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80090da:	f000 fa85 	bl	80095e8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80090de:	2001      	movs	r0, #1
 80090e0:	f000 feeb 	bl	8009eba <RBI_GetRFOMaxPowerConfig>
 80090e4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80090e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	da01      	bge.n	80090f4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b14      	cmp	r3, #20
 80090f8:	d10e      	bne.n	8009118 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80090fa:	2301      	movs	r3, #1
 80090fc:	2200      	movs	r2, #0
 80090fe:	2105      	movs	r1, #5
 8009100:	2003      	movs	r0, #3
 8009102:	f7ff fe9f 	bl	8008e44 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009106:	79ba      	ldrb	r2, [r7, #6]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	b2db      	uxtb	r3, r3
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	b2db      	uxtb	r3, r3
 8009110:	3316      	adds	r3, #22
 8009112:	b2db      	uxtb	r3, r3
 8009114:	71bb      	strb	r3, [r7, #6]
 8009116:	e031      	b.n	800917c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b11      	cmp	r3, #17
 800911c:	d10e      	bne.n	800913c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800911e:	2301      	movs	r3, #1
 8009120:	2200      	movs	r2, #0
 8009122:	2103      	movs	r1, #3
 8009124:	2002      	movs	r0, #2
 8009126:	f7ff fe8d 	bl	8008e44 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800912a:	79ba      	ldrb	r2, [r7, #6]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	b2db      	uxtb	r3, r3
 8009134:	3316      	adds	r3, #22
 8009136:	b2db      	uxtb	r3, r3
 8009138:	71bb      	strb	r3, [r7, #6]
 800913a:	e01f      	b.n	800917c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b0e      	cmp	r3, #14
 8009140:	d10e      	bne.n	8009160 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009142:	2301      	movs	r3, #1
 8009144:	2200      	movs	r2, #0
 8009146:	2102      	movs	r1, #2
 8009148:	2002      	movs	r0, #2
 800914a:	f7ff fe7b 	bl	8008e44 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800914e:	79ba      	ldrb	r2, [r7, #6]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	b2db      	uxtb	r3, r3
 8009158:	330e      	adds	r3, #14
 800915a:	b2db      	uxtb	r3, r3
 800915c:	71bb      	strb	r3, [r7, #6]
 800915e:	e00d      	b.n	800917c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009160:	2301      	movs	r3, #1
 8009162:	2200      	movs	r2, #0
 8009164:	2107      	movs	r1, #7
 8009166:	2004      	movs	r0, #4
 8009168:	f7ff fe6c 	bl	8008e44 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800916c:	79ba      	ldrb	r2, [r7, #6]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	b2db      	uxtb	r3, r3
 8009176:	3316      	adds	r3, #22
 8009178:	b2db      	uxtb	r3, r3
 800917a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800917c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009180:	f113 0f09 	cmn.w	r3, #9
 8009184:	da01      	bge.n	800918a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009186:	23f7      	movs	r3, #247	; 0xf7
 8009188:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800918a:	2138      	movs	r1, #56	; 0x38
 800918c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009190:	f000 fa2a 	bl	80095e8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009194:	79bb      	ldrb	r3, [r7, #6]
 8009196:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009198:	797b      	ldrb	r3, [r7, #5]
 800919a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800919c:	f107 0308 	add.w	r3, r7, #8
 80091a0:	2202      	movs	r2, #2
 80091a2:	4619      	mov	r1, r3
 80091a4:	208e      	movs	r0, #142	; 0x8e
 80091a6:	f000 facf 	bl	8009748 <SUBGRF_WriteCommand>
}
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
	...

080091b4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80091b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80091b8:	b086      	sub	sp, #24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80091c2:	4a61      	ldr	r2, [pc, #388]	; (8009348 <SUBGRF_SetModulationParams+0x194>)
 80091c4:	f107 0308 	add.w	r3, r7, #8
 80091c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091cc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	781a      	ldrb	r2, [r3, #0]
 80091d4:	4b5d      	ldr	r3, [pc, #372]	; (800934c <SUBGRF_SetModulationParams+0x198>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d004      	beq.n	80091e6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7ff fef3 	bl	8008fcc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	f200 80a5 	bhi.w	800933a <SUBGRF_SetModulationParams+0x186>
 80091f0:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <SUBGRF_SetModulationParams+0x44>)
 80091f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f6:	bf00      	nop
 80091f8:	08009209 	.word	0x08009209
 80091fc:	080092c9 	.word	0x080092c9
 8009200:	0800928b 	.word	0x0800928b
 8009204:	080092f7 	.word	0x080092f7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009208:	2308      	movs	r3, #8
 800920a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	4a4f      	ldr	r2, [pc, #316]	; (8009350 <SUBGRF_SetModulationParams+0x19c>)
 8009212:	fbb2 f3f3 	udiv	r3, r2, r3
 8009216:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	0c1b      	lsrs	r3, r3, #16
 800921c:	b2db      	uxtb	r3, r3
 800921e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	0a1b      	lsrs	r3, r3, #8
 8009224:	b2db      	uxtb	r3, r3
 8009226:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	7b1b      	ldrb	r3, [r3, #12]
 8009232:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	7b5b      	ldrb	r3, [r3, #13]
 8009238:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	2200      	movs	r2, #0
 8009240:	461c      	mov	r4, r3
 8009242:	4615      	mov	r5, r2
 8009244:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009248:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800924c:	4a41      	ldr	r2, [pc, #260]	; (8009354 <SUBGRF_SetModulationParams+0x1a0>)
 800924e:	f04f 0300 	mov.w	r3, #0
 8009252:	4640      	mov	r0, r8
 8009254:	4649      	mov	r1, r9
 8009256:	f7f6 fff3 	bl	8000240 <__aeabi_uldivmod>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	4613      	mov	r3, r2
 8009260:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	0c1b      	lsrs	r3, r3, #16
 8009266:	b2db      	uxtb	r3, r3
 8009268:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	0a1b      	lsrs	r3, r3, #8
 800926e:	b2db      	uxtb	r3, r3
 8009270:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	b2db      	uxtb	r3, r3
 8009276:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009278:	7cfb      	ldrb	r3, [r7, #19]
 800927a:	b29a      	uxth	r2, r3
 800927c:	f107 0308 	add.w	r3, r7, #8
 8009280:	4619      	mov	r1, r3
 8009282:	208b      	movs	r0, #139	; 0x8b
 8009284:	f000 fa60 	bl	8009748 <SUBGRF_WriteCommand>
        break;
 8009288:	e058      	b.n	800933c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800928a:	2304      	movs	r3, #4
 800928c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	4a2f      	ldr	r2, [pc, #188]	; (8009350 <SUBGRF_SetModulationParams+0x19c>)
 8009294:	fbb2 f3f3 	udiv	r3, r2, r3
 8009298:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	0c1b      	lsrs	r3, r3, #16
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	0a1b      	lsrs	r3, r3, #8
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	7d1b      	ldrb	r3, [r3, #20]
 80092b4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80092b6:	7cfb      	ldrb	r3, [r7, #19]
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	f107 0308 	add.w	r3, r7, #8
 80092be:	4619      	mov	r1, r3
 80092c0:	208b      	movs	r0, #139	; 0x8b
 80092c2:	f000 fa41 	bl	8009748 <SUBGRF_WriteCommand>
        break;
 80092c6:	e039      	b.n	800933c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80092c8:	2304      	movs	r3, #4
 80092ca:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	7e1b      	ldrb	r3, [r3, #24]
 80092d0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	7e5b      	ldrb	r3, [r3, #25]
 80092d6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	7e9b      	ldrb	r3, [r3, #26]
 80092dc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	7edb      	ldrb	r3, [r3, #27]
 80092e2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80092e4:	7cfb      	ldrb	r3, [r7, #19]
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	f107 0308 	add.w	r3, r7, #8
 80092ec:	4619      	mov	r1, r3
 80092ee:	208b      	movs	r0, #139	; 0x8b
 80092f0:	f000 fa2a 	bl	8009748 <SUBGRF_WriteCommand>

        break;
 80092f4:	e022      	b.n	800933c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80092f6:	2305      	movs	r3, #5
 80092f8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	4a14      	ldr	r2, [pc, #80]	; (8009350 <SUBGRF_SetModulationParams+0x19c>)
 8009300:	fbb2 f3f3 	udiv	r3, r2, r3
 8009304:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	0c1b      	lsrs	r3, r3, #16
 800930a:	b2db      	uxtb	r3, r3
 800930c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	0a1b      	lsrs	r3, r3, #8
 8009312:	b2db      	uxtb	r3, r3
 8009314:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	b2db      	uxtb	r3, r3
 800931a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	7b1b      	ldrb	r3, [r3, #12]
 8009320:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	7b5b      	ldrb	r3, [r3, #13]
 8009326:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009328:	7cfb      	ldrb	r3, [r7, #19]
 800932a:	b29a      	uxth	r2, r3
 800932c:	f107 0308 	add.w	r3, r7, #8
 8009330:	4619      	mov	r1, r3
 8009332:	208b      	movs	r0, #139	; 0x8b
 8009334:	f000 fa08 	bl	8009748 <SUBGRF_WriteCommand>
        break;
 8009338:	e000      	b.n	800933c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800933a:	bf00      	nop
    }
}
 800933c:	bf00      	nop
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009346:	bf00      	nop
 8009348:	0800b2d0 	.word	0x0800b2d0
 800934c:	20000515 	.word	0x20000515
 8009350:	3d090000 	.word	0x3d090000
 8009354:	01e84800 	.word	0x01e84800

08009358 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009364:	4a48      	ldr	r2, [pc, #288]	; (8009488 <SUBGRF_SetPacketParams+0x130>)
 8009366:	f107 030c 	add.w	r3, r7, #12
 800936a:	ca07      	ldmia	r2, {r0, r1, r2}
 800936c:	c303      	stmia	r3!, {r0, r1}
 800936e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	781a      	ldrb	r2, [r3, #0]
 8009374:	4b45      	ldr	r3, [pc, #276]	; (800948c <SUBGRF_SetPacketParams+0x134>)
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	429a      	cmp	r2, r3
 800937a:	d004      	beq.n	8009386 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff fe23 	bl	8008fcc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	2b03      	cmp	r3, #3
 800938c:	d878      	bhi.n	8009480 <SUBGRF_SetPacketParams+0x128>
 800938e:	a201      	add	r2, pc, #4	; (adr r2, 8009394 <SUBGRF_SetPacketParams+0x3c>)
 8009390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009394:	080093a5 	.word	0x080093a5
 8009398:	08009435 	.word	0x08009435
 800939c:	08009429 	.word	0x08009429
 80093a0:	080093a5 	.word	0x080093a5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	7a5b      	ldrb	r3, [r3, #9]
 80093a8:	2bf1      	cmp	r3, #241	; 0xf1
 80093aa:	d10a      	bne.n	80093c2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80093ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80093b0:	f7ff faaa 	bl	8008908 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80093b4:	f248 0005 	movw	r0, #32773	; 0x8005
 80093b8:	f7ff fac6 	bl	8008948 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80093bc:	2302      	movs	r3, #2
 80093be:	75bb      	strb	r3, [r7, #22]
 80093c0:	e011      	b.n	80093e6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	7a5b      	ldrb	r3, [r3, #9]
 80093c6:	2bf2      	cmp	r3, #242	; 0xf2
 80093c8:	d10a      	bne.n	80093e0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80093ca:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80093ce:	f7ff fa9b 	bl	8008908 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80093d2:	f241 0021 	movw	r0, #4129	; 0x1021
 80093d6:	f7ff fab7 	bl	8008948 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80093da:	2306      	movs	r3, #6
 80093dc:	75bb      	strb	r3, [r7, #22]
 80093de:	e002      	b.n	80093e6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	7a5b      	ldrb	r3, [r3, #9]
 80093e4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80093e6:	2309      	movs	r3, #9
 80093e8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	885b      	ldrh	r3, [r3, #2]
 80093ee:	0a1b      	lsrs	r3, r3, #8
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	885b      	ldrh	r3, [r3, #2]
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	791b      	ldrb	r3, [r3, #4]
 8009402:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	795b      	ldrb	r3, [r3, #5]
 8009408:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	799b      	ldrb	r3, [r3, #6]
 800940e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	79db      	ldrb	r3, [r3, #7]
 8009414:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	7a1b      	ldrb	r3, [r3, #8]
 800941a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800941c:	7dbb      	ldrb	r3, [r7, #22]
 800941e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	7a9b      	ldrb	r3, [r3, #10]
 8009424:	753b      	strb	r3, [r7, #20]
        break;
 8009426:	e022      	b.n	800946e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009428:	2301      	movs	r3, #1
 800942a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	7b1b      	ldrb	r3, [r3, #12]
 8009430:	733b      	strb	r3, [r7, #12]
        break;
 8009432:	e01c      	b.n	800946e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009434:	2306      	movs	r3, #6
 8009436:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	89db      	ldrh	r3, [r3, #14]
 800943c:	0a1b      	lsrs	r3, r3, #8
 800943e:	b29b      	uxth	r3, r3
 8009440:	b2db      	uxtb	r3, r3
 8009442:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	89db      	ldrh	r3, [r3, #14]
 8009448:	b2db      	uxtb	r3, r3
 800944a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	7c1a      	ldrb	r2, [r3, #16]
 8009450:	4b0f      	ldr	r3, [pc, #60]	; (8009490 <SUBGRF_SetPacketParams+0x138>)
 8009452:	4611      	mov	r1, r2
 8009454:	7019      	strb	r1, [r3, #0]
 8009456:	4613      	mov	r3, r2
 8009458:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	7c5b      	ldrb	r3, [r3, #17]
 800945e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	7c9b      	ldrb	r3, [r3, #18]
 8009464:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	7cdb      	ldrb	r3, [r3, #19]
 800946a:	747b      	strb	r3, [r7, #17]
        break;
 800946c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800946e:	7dfb      	ldrb	r3, [r7, #23]
 8009470:	b29a      	uxth	r2, r3
 8009472:	f107 030c 	add.w	r3, r7, #12
 8009476:	4619      	mov	r1, r3
 8009478:	208c      	movs	r0, #140	; 0x8c
 800947a:	f000 f965 	bl	8009748 <SUBGRF_WriteCommand>
 800947e:	e000      	b.n	8009482 <SUBGRF_SetPacketParams+0x12a>
        return;
 8009480:	bf00      	nop
}
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	0800b2d8 	.word	0x0800b2d8
 800948c:	20000515 	.word	0x20000515
 8009490:	20000516 	.word	0x20000516

08009494 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	460a      	mov	r2, r1
 800949e:	71fb      	strb	r3, [r7, #7]
 80094a0:	4613      	mov	r3, r2
 80094a2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80094a4:	79fb      	ldrb	r3, [r7, #7]
 80094a6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80094a8:	79bb      	ldrb	r3, [r7, #6]
 80094aa:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80094ac:	f107 030c 	add.w	r3, r7, #12
 80094b0:	2202      	movs	r2, #2
 80094b2:	4619      	mov	r1, r3
 80094b4:	208f      	movs	r0, #143	; 0x8f
 80094b6:	f000 f947 	bl	8009748 <SUBGRF_WriteCommand>
}
 80094ba:	bf00      	nop
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80094cc:	1d3b      	adds	r3, r7, #4
 80094ce:	2201      	movs	r2, #1
 80094d0:	4619      	mov	r1, r3
 80094d2:	2015      	movs	r0, #21
 80094d4:	f000 f95a 	bl	800978c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80094d8:	793b      	ldrb	r3, [r7, #4]
 80094da:	425b      	negs	r3, r3
 80094dc:	105b      	asrs	r3, r3, #1
 80094de:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80094e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80094f6:	f107 030c 	add.w	r3, r7, #12
 80094fa:	2202      	movs	r2, #2
 80094fc:	4619      	mov	r1, r3
 80094fe:	2013      	movs	r0, #19
 8009500:	f000 f944 	bl	800978c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009504:	f7ff fd7e 	bl	8009004 <SUBGRF_GetPacketType>
 8009508:	4603      	mov	r3, r0
 800950a:	2b01      	cmp	r3, #1
 800950c:	d10d      	bne.n	800952a <SUBGRF_GetRxBufferStatus+0x3e>
 800950e:	4b0c      	ldr	r3, [pc, #48]	; (8009540 <SUBGRF_GetRxBufferStatus+0x54>)
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b01      	cmp	r3, #1
 8009516:	d108      	bne.n	800952a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009518:	f240 7002 	movw	r0, #1794	; 0x702
 800951c:	f000 f878 	bl	8009610 <SUBGRF_ReadRegister>
 8009520:	4603      	mov	r3, r0
 8009522:	461a      	mov	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	701a      	strb	r2, [r3, #0]
 8009528:	e002      	b.n	8009530 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800952a:	7b3a      	ldrb	r2, [r7, #12]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8009530:	7b7a      	ldrb	r2, [r7, #13]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	701a      	strb	r2, [r3, #0]
}
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20000516 	.word	0x20000516

08009544 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800954c:	f107 030c 	add.w	r3, r7, #12
 8009550:	2203      	movs	r2, #3
 8009552:	4619      	mov	r1, r3
 8009554:	2014      	movs	r0, #20
 8009556:	f000 f919 	bl	800978c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800955a:	f7ff fd53 	bl	8009004 <SUBGRF_GetPacketType>
 800955e:	4603      	mov	r3, r0
 8009560:	461a      	mov	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <SUBGRF_GetPacketStatus+0x30>
 800956e:	2b01      	cmp	r3, #1
 8009570:	d013      	beq.n	800959a <SUBGRF_GetPacketStatus+0x56>
 8009572:	e02a      	b.n	80095ca <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8009574:	7b3a      	ldrb	r2, [r7, #12]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800957a:	7b7b      	ldrb	r3, [r7, #13]
 800957c:	425b      	negs	r3, r3
 800957e:	105b      	asrs	r3, r3, #1
 8009580:	b25a      	sxtb	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	425b      	negs	r3, r3
 800958a:	105b      	asrs	r3, r3, #1
 800958c:	b25a      	sxtb	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	609a      	str	r2, [r3, #8]
            break;
 8009598:	e020      	b.n	80095dc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800959a:	7b3b      	ldrb	r3, [r7, #12]
 800959c:	425b      	negs	r3, r3
 800959e:	105b      	asrs	r3, r3, #1
 80095a0:	b25a      	sxtb	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80095a6:	7b7b      	ldrb	r3, [r7, #13]
 80095a8:	b25b      	sxtb	r3, r3
 80095aa:	3302      	adds	r3, #2
 80095ac:	109b      	asrs	r3, r3, #2
 80095ae:	b25a      	sxtb	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	425b      	negs	r3, r3
 80095b8:	105b      	asrs	r3, r3, #1
 80095ba:	b25a      	sxtb	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80095c0:	4b08      	ldr	r3, [pc, #32]	; (80095e4 <SUBGRF_GetPacketStatus+0xa0>)
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	611a      	str	r2, [r3, #16]
            break;
 80095c8:	e008      	b.n	80095dc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80095ca:	2214      	movs	r2, #20
 80095cc:	2100      	movs	r1, #0
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fca7 	bl	8009f22 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	220f      	movs	r2, #15
 80095d8:	701a      	strb	r2, [r3, #0]
            break;
 80095da:	bf00      	nop
    }
}
 80095dc:	bf00      	nop
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20000518 	.word	0x20000518

080095e8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	460a      	mov	r2, r1
 80095f2:	80fb      	strh	r3, [r7, #6]
 80095f4:	4613      	mov	r3, r2
 80095f6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80095f8:	1d7a      	adds	r2, r7, #5
 80095fa:	88f9      	ldrh	r1, [r7, #6]
 80095fc:	2301      	movs	r3, #1
 80095fe:	4803      	ldr	r0, [pc, #12]	; (800960c <SUBGRF_WriteRegister+0x24>)
 8009600:	f7fa f846 	bl	8003690 <HAL_SUBGHZ_WriteRegisters>
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20000110 	.word	0x20000110

08009610 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800961a:	f107 020f 	add.w	r2, r7, #15
 800961e:	88f9      	ldrh	r1, [r7, #6]
 8009620:	2301      	movs	r3, #1
 8009622:	4804      	ldr	r0, [pc, #16]	; (8009634 <SUBGRF_ReadRegister+0x24>)
 8009624:	f7fa f893 	bl	800374e <HAL_SUBGHZ_ReadRegisters>
    return data;
 8009628:	7bfb      	ldrb	r3, [r7, #15]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20000110 	.word	0x20000110

08009638 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	6039      	str	r1, [r7, #0]
 8009642:	80fb      	strh	r3, [r7, #6]
 8009644:	4613      	mov	r3, r2
 8009646:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009648:	f3ef 8310 	mrs	r3, PRIMASK
 800964c:	60fb      	str	r3, [r7, #12]
  return(result);
 800964e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009650:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009652:	b672      	cpsid	i
}
 8009654:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8009656:	88bb      	ldrh	r3, [r7, #4]
 8009658:	88f9      	ldrh	r1, [r7, #6]
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	4806      	ldr	r0, [pc, #24]	; (8009678 <SUBGRF_WriteRegisters+0x40>)
 800965e:	f7fa f817 	bl	8003690 <HAL_SUBGHZ_WriteRegisters>
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	f383 8810 	msr	PRIMASK, r3
}
 800966c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800966e:	bf00      	nop
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20000110 	.word	0x20000110

0800967c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	6039      	str	r1, [r7, #0]
 8009686:	80fb      	strh	r3, [r7, #6]
 8009688:	4613      	mov	r3, r2
 800968a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800968c:	f3ef 8310 	mrs	r3, PRIMASK
 8009690:	60fb      	str	r3, [r7, #12]
  return(result);
 8009692:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009694:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009696:	b672      	cpsid	i
}
 8009698:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800969a:	88bb      	ldrh	r3, [r7, #4]
 800969c:	88f9      	ldrh	r1, [r7, #6]
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	4806      	ldr	r0, [pc, #24]	; (80096bc <SUBGRF_ReadRegisters+0x40>)
 80096a2:	f7fa f854 	bl	800374e <HAL_SUBGHZ_ReadRegisters>
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f383 8810 	msr	PRIMASK, r3
}
 80096b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80096b2:	bf00      	nop
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20000110 	.word	0x20000110

080096c0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4603      	mov	r3, r0
 80096c8:	6039      	str	r1, [r7, #0]
 80096ca:	71fb      	strb	r3, [r7, #7]
 80096cc:	4613      	mov	r3, r2
 80096ce:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096d0:	f3ef 8310 	mrs	r3, PRIMASK
 80096d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80096d6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80096d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096da:	b672      	cpsid	i
}
 80096dc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80096de:	79bb      	ldrb	r3, [r7, #6]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	79f9      	ldrb	r1, [r7, #7]
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	4806      	ldr	r0, [pc, #24]	; (8009700 <SUBGRF_WriteBuffer+0x40>)
 80096e8:	f7fa f945 	bl	8003976 <HAL_SUBGHZ_WriteBuffer>
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	f383 8810 	msr	PRIMASK, r3
}
 80096f6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80096f8:	bf00      	nop
 80096fa:	3718      	adds	r7, #24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	20000110 	.word	0x20000110

08009704 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	6039      	str	r1, [r7, #0]
 800970e:	71fb      	strb	r3, [r7, #7]
 8009710:	4613      	mov	r3, r2
 8009712:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009714:	f3ef 8310 	mrs	r3, PRIMASK
 8009718:	60fb      	str	r3, [r7, #12]
  return(result);
 800971a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800971c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800971e:	b672      	cpsid	i
}
 8009720:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8009722:	79bb      	ldrb	r3, [r7, #6]
 8009724:	b29b      	uxth	r3, r3
 8009726:	79f9      	ldrb	r1, [r7, #7]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	4806      	ldr	r0, [pc, #24]	; (8009744 <SUBGRF_ReadBuffer+0x40>)
 800972c:	f7fa f976 	bl	8003a1c <HAL_SUBGHZ_ReadBuffer>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	f383 8810 	msr	PRIMASK, r3
}
 800973a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800973c:	bf00      	nop
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20000110 	.word	0x20000110

08009748 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	6039      	str	r1, [r7, #0]
 8009752:	71fb      	strb	r3, [r7, #7]
 8009754:	4613      	mov	r3, r2
 8009756:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009758:	f3ef 8310 	mrs	r3, PRIMASK
 800975c:	60fb      	str	r3, [r7, #12]
  return(result);
 800975e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009760:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009762:	b672      	cpsid	i
}
 8009764:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8009766:	88bb      	ldrh	r3, [r7, #4]
 8009768:	79f9      	ldrb	r1, [r7, #7]
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	4806      	ldr	r0, [pc, #24]	; (8009788 <SUBGRF_WriteCommand+0x40>)
 800976e:	f7fa f84f 	bl	8003810 <HAL_SUBGHZ_ExecSetCmd>
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f383 8810 	msr	PRIMASK, r3
}
 800977c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800977e:	bf00      	nop
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20000110 	.word	0x20000110

0800978c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	6039      	str	r1, [r7, #0]
 8009796:	71fb      	strb	r3, [r7, #7]
 8009798:	4613      	mov	r3, r2
 800979a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800979c:	f3ef 8310 	mrs	r3, PRIMASK
 80097a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80097a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80097a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80097a6:	b672      	cpsid	i
}
 80097a8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80097aa:	88bb      	ldrh	r3, [r7, #4]
 80097ac:	79f9      	ldrb	r1, [r7, #7]
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	4806      	ldr	r0, [pc, #24]	; (80097cc <SUBGRF_ReadCommand+0x40>)
 80097b2:	f7fa f88c 	bl	80038ce <HAL_SUBGHZ_ExecGetCmd>
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f383 8810 	msr	PRIMASK, r3
}
 80097c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80097c2:	bf00      	nop
 80097c4:	3718      	adds	r7, #24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20000110 	.word	0x20000110

080097d0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	460a      	mov	r2, r1
 80097da:	71fb      	strb	r3, [r7, #7]
 80097dc:	4613      	mov	r3, r2
 80097de:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80097e0:	2301      	movs	r3, #1
 80097e2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80097e4:	79bb      	ldrb	r3, [r7, #6]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d10d      	bne.n	8009806 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d104      	bne.n	80097fa <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80097f0:	2302      	movs	r3, #2
 80097f2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80097f4:	2004      	movs	r0, #4
 80097f6:	f000 f8ef 	bl	80099d8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80097fa:	79fb      	ldrb	r3, [r7, #7]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d107      	bne.n	8009810 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8009800:	2303      	movs	r3, #3
 8009802:	73fb      	strb	r3, [r7, #15]
 8009804:	e004      	b.n	8009810 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8009806:	79bb      	ldrb	r3, [r7, #6]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800980c:	2301      	movs	r3, #1
 800980e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	4618      	mov	r0, r3
 8009814:	f000 fad2 	bl	8009dbc <RBI_ConfigRFSwitch>
}
 8009818:	bf00      	nop
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800982a:	2301      	movs	r3, #1
 800982c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800982e:	f000 fb23 	bl	8009e78 <RBI_GetTxConfig>
 8009832:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2b02      	cmp	r3, #2
 8009838:	d016      	beq.n	8009868 <SUBGRF_SetRfTxPower+0x48>
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b02      	cmp	r3, #2
 800983e:	dc16      	bgt.n	800986e <SUBGRF_SetRfTxPower+0x4e>
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d003      	beq.n	800984e <SUBGRF_SetRfTxPower+0x2e>
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d00a      	beq.n	8009862 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800984c:	e00f      	b.n	800986e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800984e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009852:	2b0f      	cmp	r3, #15
 8009854:	dd02      	ble.n	800985c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8009856:	2302      	movs	r3, #2
 8009858:	73fb      	strb	r3, [r7, #15]
            break;
 800985a:	e009      	b.n	8009870 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800985c:	2301      	movs	r3, #1
 800985e:	73fb      	strb	r3, [r7, #15]
            break;
 8009860:	e006      	b.n	8009870 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8009862:	2301      	movs	r3, #1
 8009864:	73fb      	strb	r3, [r7, #15]
            break;
 8009866:	e003      	b.n	8009870 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8009868:	2302      	movs	r3, #2
 800986a:	73fb      	strb	r3, [r7, #15]
            break;
 800986c:	e000      	b.n	8009870 <SUBGRF_SetRfTxPower+0x50>
            break;
 800986e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8009870:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	2202      	movs	r2, #2
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff fbcd 	bl	8009018 <SUBGRF_SetTxParams>

    return paSelect;
 800987e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8009888:	b480      	push	{r7}
 800988a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800988c:	2301      	movs	r3, #1
}
 800988e:	4618      	mov	r0, r3
 8009890:	46bd      	mov	sp, r7
 8009892:	bc80      	pop	{r7}
 8009894:	4770      	bx	lr
	...

08009898 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80098a0:	4b03      	ldr	r3, [pc, #12]	; (80098b0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2001      	movs	r0, #1
 80098a6:	4798      	blx	r3
}
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20000520 	.word	0x20000520

080098b4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80098bc:	4b03      	ldr	r3, [pc, #12]	; (80098cc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2002      	movs	r0, #2
 80098c2:	4798      	blx	r3
}
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	20000520 	.word	0x20000520

080098d0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80098d8:	4b03      	ldr	r3, [pc, #12]	; (80098e8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2040      	movs	r0, #64	; 0x40
 80098de:	4798      	blx	r3
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20000520 	.word	0x20000520

080098ec <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d005      	beq.n	800990e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8009902:	e00a      	b.n	800991a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8009904:	4b07      	ldr	r3, [pc, #28]	; (8009924 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2080      	movs	r0, #128	; 0x80
 800990a:	4798      	blx	r3
            break;
 800990c:	e005      	b.n	800991a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009916:	4798      	blx	r3
            break;
 8009918:	bf00      	nop
    }
}
 800991a:	bf00      	nop
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	20000520 	.word	0x20000520

08009928 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8009930:	4b04      	ldr	r3, [pc, #16]	; (8009944 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009938:	4798      	blx	r3
}
 800993a:	bf00      	nop
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	20000520 	.word	0x20000520

08009948 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8009950:	4b03      	ldr	r3, [pc, #12]	; (8009960 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2020      	movs	r0, #32
 8009956:	4798      	blx	r3
}
 8009958:	bf00      	nop
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	20000520 	.word	0x20000520

08009964 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800996c:	4b03      	ldr	r3, [pc, #12]	; (800997c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2004      	movs	r0, #4
 8009972:	4798      	blx	r3
}
 8009974:	bf00      	nop
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	20000520 	.word	0x20000520

08009980 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8009988:	4b03      	ldr	r3, [pc, #12]	; (8009998 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2008      	movs	r0, #8
 800998e:	4798      	blx	r3
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	20000520 	.word	0x20000520

0800999c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80099a4:	4b03      	ldr	r3, [pc, #12]	; (80099b4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2010      	movs	r0, #16
 80099aa:	4798      	blx	r3
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	20000520 	.word	0x20000520

080099b8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80099c0:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80099c8:	4798      	blx	r3
}
 80099ca:	bf00      	nop
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000520 	.word	0x20000520

080099d8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80099e2:	f000 fa5f 	bl	8009ea4 <RBI_IsDCDC>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d112      	bne.n	8009a12 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80099ec:	f640 1023 	movw	r0, #2339	; 0x923
 80099f0:	f7ff fe0e 	bl	8009610 <SUBGRF_ReadRegister>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	f023 0306 	bic.w	r3, r3, #6
 80099fe:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8009a00:	7bfa      	ldrb	r2, [r7, #15]
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	4619      	mov	r1, r3
 8009a0a:	f640 1023 	movw	r0, #2339	; 0x923
 8009a0e:	f7ff fdeb 	bl	80095e8 <SUBGRF_WriteRegister>
  }
}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8009a2a:	231f      	movs	r3, #31
 8009a2c:	e016      	b.n	8009a5c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
 8009a32:	e00f      	b.n	8009a54 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
 8009a36:	4a0c      	ldr	r2, [pc, #48]	; (8009a68 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009a38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d205      	bcs.n	8009a4e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	4a08      	ldr	r2, [pc, #32]	; (8009a68 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009a46:	00db      	lsls	r3, r3, #3
 8009a48:	4413      	add	r3, r2
 8009a4a:	791b      	ldrb	r3, [r3, #4]
 8009a4c:	e006      	b.n	8009a5c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	3301      	adds	r3, #1
 8009a52:	73fb      	strb	r3, [r7, #15]
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	2b15      	cmp	r3, #21
 8009a58:	d9ec      	bls.n	8009a34 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8009a5a:	e7fe      	b.n	8009a5a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bc80      	pop	{r7}
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	0800b468 	.word	0x0800b468

08009a6c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	; 0x28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8009a76:	4b35      	ldr	r3, [pc, #212]	; (8009b4c <SUBGRF_GetCFO+0xe0>)
 8009a78:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8009a7a:	f640 0007 	movw	r0, #2055	; 0x807
 8009a7e:	f7ff fdc7 	bl	8009610 <SUBGRF_ReadRegister>
 8009a82:	4603      	mov	r3, r0
 8009a84:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8009a86:	7ffb      	ldrb	r3, [r7, #31]
 8009a88:	08db      	lsrs	r3, r3, #3
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f003 0303 	and.w	r3, r3, #3
 8009a90:	3328      	adds	r3, #40	; 0x28
 8009a92:	443b      	add	r3, r7
 8009a94:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009a98:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8009a9a:	7ffb      	ldrb	r3, [r7, #31]
 8009a9c:	f003 0307 	and.w	r3, r3, #7
 8009aa0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8009aa2:	7fba      	ldrb	r2, [r7, #30]
 8009aa4:	7f7b      	ldrb	r3, [r7, #29]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aac:	461a      	mov	r2, r3
 8009aae:	4b28      	ldr	r3, [pc, #160]	; (8009b50 <SUBGRF_GetCFO+0xe4>)
 8009ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ab4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8009ab6:	69ba      	ldr	r2, [r7, #24]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009abe:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8009ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	fb02 f303 	mul.w	r3, r2, r3
 8009ad0:	2b07      	cmp	r3, #7
 8009ad2:	d802      	bhi.n	8009ada <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8009ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	fb02 f303 	mul.w	r3, r2, r3
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d802      	bhi.n	8009aee <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8009ae8:	2304      	movs	r3, #4
 8009aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8009aee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	fb02 f303 	mul.w	r3, r2, r3
 8009af8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8009afa:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8009afe:	f7ff fd87 	bl	8009610 <SUBGRF_ReadRegister>
 8009b02:	4603      	mov	r3, r0
 8009b04:	021b      	lsls	r3, r3, #8
 8009b06:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009b0a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8009b0c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8009b10:	f7ff fd7e 	bl	8009610 <SUBGRF_ReadRegister>
 8009b14:	4603      	mov	r3, r0
 8009b16:	461a      	mov	r2, r3
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d005      	beq.n	8009b34 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8009b2e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8009b32:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	095b      	lsrs	r3, r3, #5
 8009b38:	6a3a      	ldr	r2, [r7, #32]
 8009b3a:	fb02 f303 	mul.w	r3, r2, r3
 8009b3e:	11da      	asrs	r2, r3, #7
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	601a      	str	r2, [r3, #0]
}
 8009b44:	bf00      	nop
 8009b46:	3728      	adds	r7, #40	; 0x28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	0c0a0804 	.word	0x0c0a0804
 8009b50:	01e84800 	.word	0x01e84800

08009b54 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b087      	sub	sp, #28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8009b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b6a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009b6c:	697b      	ldr	r3, [r7, #20]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bc80      	pop	{r7}
 8009b76:	4770      	bx	lr

08009b78 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
 8009b84:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8009b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b8e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009b90:	697b      	ldr	r3, [r7, #20]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	371c      	adds	r7, #28
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bc80      	pop	{r7}
 8009b9a:	4770      	bx	lr

08009b9c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8009ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bc80      	pop	{r7}
 8009bb4:	4770      	bx	lr

08009bb6 <RFW_DeInit>:

void RFW_DeInit( void )
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8009bba:	bf00      	nop
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bc80      	pop	{r7}
 8009bc0:	4770      	bx	lr

08009bc2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8009bc6:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bc80      	pop	{r7}
 8009bce:	4770      	bx	lr

08009bd0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8009bd4:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bc80      	pop	{r7}
 8009bdc:	4770      	bx	lr

08009bde <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8009bde:	b480      	push	{r7}
 8009be0:	b083      	sub	sp, #12
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	4603      	mov	r3, r0
 8009be6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bc80      	pop	{r7}
 8009bf0:	4770      	bx	lr

08009bf2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b087      	sub	sp, #28
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	607a      	str	r2, [r7, #4]
 8009bfe:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8009c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c04:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8009c06:	697b      	ldr	r3, [r7, #20]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bc80      	pop	{r7}
 8009c10:	4770      	bx	lr

08009c12 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8009c12:	b480      	push	{r7}
 8009c14:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8009c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bc80      	pop	{r7}
 8009c20:	4770      	bx	lr

08009c22 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8009c22:	b480      	push	{r7}
 8009c24:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8009c26:	bf00      	nop
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bc80      	pop	{r7}
 8009c2c:	4770      	bx	lr

08009c2e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8009c2e:	b480      	push	{r7}
 8009c30:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8009c32:	bf00      	nop
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr

08009c3a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	4603      	mov	r3, r0
 8009c42:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bc80      	pop	{r7}
 8009c4c:	4770      	bx	lr

08009c4e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8009c52:	f7f7 fc41 	bl	80014d8 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8009c56:	f000 f809 	bl	8009c6c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8009c5a:	bf00      	nop
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 8009c62:	bf00      	nop
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bc80      	pop	{r7}
 8009c68:	4770      	bx	lr
	...

08009c6c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8009c70:	4b0a      	ldr	r3, [pc, #40]	; (8009c9c <SubghzApp_Init+0x30>)
 8009c72:	4a0b      	ldr	r2, [pc, #44]	; (8009ca0 <SubghzApp_Init+0x34>)
 8009c74:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8009c76:	4b09      	ldr	r3, [pc, #36]	; (8009c9c <SubghzApp_Init+0x30>)
 8009c78:	4a0a      	ldr	r2, [pc, #40]	; (8009ca4 <SubghzApp_Init+0x38>)
 8009c7a:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8009c7c:	4b07      	ldr	r3, [pc, #28]	; (8009c9c <SubghzApp_Init+0x30>)
 8009c7e:	4a0a      	ldr	r2, [pc, #40]	; (8009ca8 <SubghzApp_Init+0x3c>)
 8009c80:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8009c82:	4b06      	ldr	r3, [pc, #24]	; (8009c9c <SubghzApp_Init+0x30>)
 8009c84:	4a09      	ldr	r2, [pc, #36]	; (8009cac <SubghzApp_Init+0x40>)
 8009c86:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8009c88:	4b04      	ldr	r3, [pc, #16]	; (8009c9c <SubghzApp_Init+0x30>)
 8009c8a:	4a09      	ldr	r2, [pc, #36]	; (8009cb0 <SubghzApp_Init+0x44>)
 8009c8c:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8009c8e:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <SubghzApp_Init+0x48>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4802      	ldr	r0, [pc, #8]	; (8009c9c <SubghzApp_Init+0x30>)
 8009c94:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 8009c96:	bf00      	nop
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000524 	.word	0x20000524
 8009ca0:	08009cb9 	.word	0x08009cb9
 8009ca4:	08009cc5 	.word	0x08009cc5
 8009ca8:	08009ce9 	.word	0x08009ce9
 8009cac:	08009cf5 	.word	0x08009cf5
 8009cb0:	08009d01 	.word	0x08009d01
 8009cb4:	0800b3d8 	.word	0x0800b3d8

08009cb8 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8009cbc:	bf00      	nop
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bc80      	pop	{r7}
 8009cc2:	4770      	bx	lr

08009cc4 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	4608      	mov	r0, r1
 8009cce:	4611      	mov	r1, r2
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	817b      	strh	r3, [r7, #10]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	813b      	strh	r3, [r7, #8]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 8009cde:	bf00      	nop
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bc80      	pop	{r7}
 8009ce6:	4770      	bx	lr

08009ce8 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8009cec:	bf00      	nop
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bc80      	pop	{r7}
 8009cf2:	4770      	bx	lr

08009cf4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 8009cf8:	bf00      	nop
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bc80      	pop	{r7}
 8009cfe:	4770      	bx	lr

08009d00 <OnRxError>:

static void OnRxError(void)
{
 8009d00:	b480      	push	{r7}
 8009d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 8009d04:	bf00      	nop
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bc80      	pop	{r7}
 8009d0a:	4770      	bx	lr

08009d0c <LL_AHB2_GRP1_EnableClock>:
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009d30:	68fb      	ldr	r3, [r7, #12]
}
 8009d32:	bf00      	nop
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bc80      	pop	{r7}
 8009d3a:	4770      	bx	lr

08009d3c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 8009d46:	463b      	mov	r3, r7
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	605a      	str	r2, [r3, #4]
 8009d4e:	609a      	str	r2, [r3, #8]
 8009d50:	60da      	str	r2, [r3, #12]
 8009d52:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8009d54:	2004      	movs	r0, #4
 8009d56:	f7ff ffd9 	bl	8009d0c <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 8009d5a:	2310      	movs	r3, #16
 8009d5c:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d66:	2303      	movs	r3, #3
 8009d68:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8009d6a:	463b      	mov	r3, r7
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4812      	ldr	r0, [pc, #72]	; (8009db8 <RBI_Init+0x7c>)
 8009d70:	f7f7 feea 	bl	8001b48 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8009d74:	2320      	movs	r3, #32
 8009d76:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8009d78:	463b      	mov	r3, r7
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	480e      	ldr	r0, [pc, #56]	; (8009db8 <RBI_Init+0x7c>)
 8009d7e:	f7f7 fee3 	bl	8001b48 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8009d82:	2308      	movs	r3, #8
 8009d84:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8009d86:	463b      	mov	r3, r7
 8009d88:	4619      	mov	r1, r3
 8009d8a:	480b      	ldr	r0, [pc, #44]	; (8009db8 <RBI_Init+0x7c>)
 8009d8c:	f7f7 fedc 	bl	8001b48 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8009d90:	2200      	movs	r2, #0
 8009d92:	2120      	movs	r1, #32
 8009d94:	4808      	ldr	r0, [pc, #32]	; (8009db8 <RBI_Init+0x7c>)
 8009d96:	f7f8 f837 	bl	8001e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2110      	movs	r1, #16
 8009d9e:	4806      	ldr	r0, [pc, #24]	; (8009db8 <RBI_Init+0x7c>)
 8009da0:	f7f8 f832 	bl	8001e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8009da4:	2200      	movs	r2, #0
 8009da6:	2108      	movs	r1, #8
 8009da8:	4803      	ldr	r0, [pc, #12]	; (8009db8 <RBI_Init+0x7c>)
 8009daa:	f7f8 f82d 	bl	8001e08 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8009dae:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	48000800 	.word	0x48000800

08009dbc <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 8009dca:	79fb      	ldrb	r3, [r7, #7]
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d84b      	bhi.n	8009e68 <RBI_ConfigRFSwitch+0xac>
 8009dd0:	a201      	add	r2, pc, #4	; (adr r2, 8009dd8 <RBI_ConfigRFSwitch+0x1c>)
 8009dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd6:	bf00      	nop
 8009dd8:	08009de9 	.word	0x08009de9
 8009ddc:	08009e09 	.word	0x08009e09
 8009de0:	08009e29 	.word	0x08009e29
 8009de4:	08009e49 	.word	0x08009e49
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 8009de8:	2200      	movs	r2, #0
 8009dea:	2108      	movs	r1, #8
 8009dec:	4821      	ldr	r0, [pc, #132]	; (8009e74 <RBI_ConfigRFSwitch+0xb8>)
 8009dee:	f7f8 f80b 	bl	8001e08 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 8009df2:	2200      	movs	r2, #0
 8009df4:	2110      	movs	r1, #16
 8009df6:	481f      	ldr	r0, [pc, #124]	; (8009e74 <RBI_ConfigRFSwitch+0xb8>)
 8009df8:	f7f8 f806 	bl	8001e08 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2120      	movs	r1, #32
 8009e00:	481c      	ldr	r0, [pc, #112]	; (8009e74 <RBI_ConfigRFSwitch+0xb8>)
 8009e02:	f7f8 f801 	bl	8001e08 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 8009e06:	e030      	b.n	8009e6a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009e08:	2201      	movs	r2, #1
 8009e0a:	2108      	movs	r1, #8
 8009e0c:	4819      	ldr	r0, [pc, #100]	; (8009e74 <RBI_ConfigRFSwitch+0xb8>)
 8009e0e:	f7f7 fffb 	bl	8001e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8009e12:	2201      	movs	r2, #1
 8009e14:	2110      	movs	r1, #16
 8009e16:	4817      	ldr	r0, [pc, #92]	; (8009e74 <RBI_ConfigRFSwitch+0xb8>)
 8009e18:	f7f7 fff6 	bl	8001e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2120      	movs	r1, #32
 8009e20:	4814      	ldr	r0, [pc, #80]	; (8009e74 <RBI_ConfigRFSwitch+0xb8>)
 8009e22:	f7f7 fff1 	bl	8001e08 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 8009e26:	e020      	b.n	8009e6a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009e28:	2201      	movs	r2, #1
 8009e2a:	2108      	movs	r1, #8
 8009e2c:	4811      	ldr	r0, [pc, #68]	; (8009e74 <RBI_ConfigRFSwitch+0xb8>)
 8009e2e:	f7f7 ffeb 	bl	8001e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8009e32:	2201      	movs	r2, #1
 8009e34:	2110      	movs	r1, #16
 8009e36:	480f      	ldr	r0, [pc, #60]	; (8009e74 <RBI_ConfigRFSwitch+0xb8>)
 8009e38:	f7f7 ffe6 	bl	8001e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	2120      	movs	r1, #32
 8009e40:	480c      	ldr	r0, [pc, #48]	; (8009e74 <RBI_ConfigRFSwitch+0xb8>)
 8009e42:	f7f7 ffe1 	bl	8001e08 <HAL_GPIO_WritePin>
		break;
 8009e46:	e010      	b.n	8009e6a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009e48:	2201      	movs	r2, #1
 8009e4a:	2108      	movs	r1, #8
 8009e4c:	4809      	ldr	r0, [pc, #36]	; (8009e74 <RBI_ConfigRFSwitch+0xb8>)
 8009e4e:	f7f7 ffdb 	bl	8001e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 8009e52:	2200      	movs	r2, #0
 8009e54:	2110      	movs	r1, #16
 8009e56:	4807      	ldr	r0, [pc, #28]	; (8009e74 <RBI_ConfigRFSwitch+0xb8>)
 8009e58:	f7f7 ffd6 	bl	8001e08 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	2120      	movs	r1, #32
 8009e60:	4804      	ldr	r0, [pc, #16]	; (8009e74 <RBI_ConfigRFSwitch+0xb8>)
 8009e62:	f7f7 ffd1 	bl	8001e08 <HAL_GPIO_WritePin>
		break;
 8009e66:	e000      	b.n	8009e6a <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 8009e68:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	48000800 	.word	0x48000800

08009e78 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 8009e82:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bc80      	pop	{r7}
 8009e8c:	4770      	bx	lr

08009e8e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8009e94:	2301      	movs	r3, #1
 8009e96:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 8009e98:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bc80      	pop	{r7}
 8009ea2:	4770      	bx	lr

08009ea4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 8009eae:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bc80      	pop	{r7}
 8009eb8:	4770      	bx	lr

08009eba <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8009eba:	b480      	push	{r7}
 8009ebc:	b085      	sub	sp, #20
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d102      	bne.n	8009ed4 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 8009ece:	230f      	movs	r3, #15
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	e001      	b.n	8009ed8 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 8009ed4:	2316      	movs	r3, #22
 8009ed6:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bc80      	pop	{r7}
 8009ee2:	4770      	bx	lr

08009ee4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	613b      	str	r3, [r7, #16]

  while( size-- )
 8009efa:	e007      	b.n	8009f0c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	1c53      	adds	r3, r2, #1
 8009f00:	613b      	str	r3, [r7, #16]
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	1c59      	adds	r1, r3, #1
 8009f06:	6179      	str	r1, [r7, #20]
 8009f08:	7812      	ldrb	r2, [r2, #0]
 8009f0a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009f0c:	88fb      	ldrh	r3, [r7, #6]
 8009f0e:	1e5a      	subs	r2, r3, #1
 8009f10:	80fa      	strh	r2, [r7, #6]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1f2      	bne.n	8009efc <UTIL_MEM_cpy_8+0x18>
    }
}
 8009f16:	bf00      	nop
 8009f18:	bf00      	nop
 8009f1a:	371c      	adds	r7, #28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bc80      	pop	{r7}
 8009f20:	4770      	bx	lr

08009f22 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8009f22:	b480      	push	{r7}
 8009f24:	b085      	sub	sp, #20
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	70fb      	strb	r3, [r7, #3]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8009f36:	e004      	b.n	8009f42 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	1c5a      	adds	r2, r3, #1
 8009f3c:	60fa      	str	r2, [r7, #12]
 8009f3e:	78fa      	ldrb	r2, [r7, #3]
 8009f40:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009f42:	883b      	ldrh	r3, [r7, #0]
 8009f44:	1e5a      	subs	r2, r3, #1
 8009f46:	803a      	strh	r2, [r7, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1f5      	bne.n	8009f38 <UTIL_MEM_set_8+0x16>
  }
}
 8009f4c:	bf00      	nop
 8009f4e:	bf00      	nop
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bc80      	pop	{r7}
 8009f56:	4770      	bx	lr

08009f58 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	603b      	str	r3, [r7, #0]
 8009f64:	4613      	mov	r3, r2
 8009f66:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d023      	beq.n	8009fb6 <UTIL_TIMER_Create+0x5e>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d020      	beq.n	8009fb6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8009f7a:	4b11      	ldr	r3, [pc, #68]	; (8009fc0 <UTIL_TIMER_Create+0x68>)
 8009f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7e:	68b8      	ldr	r0, [r7, #8]
 8009f80:	4798      	blx	r3
 8009f82:	4602      	mov	r2, r0
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	69ba      	ldr	r2, [r7, #24]
 8009fa4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	79fa      	ldrb	r2, [r7, #7]
 8009faa:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e000      	b.n	8009fb8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8009fb6:	2301      	movs	r3, #1
  }
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	0800b384 	.word	0x0800b384

08009fc4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08a      	sub	sp, #40	; 0x28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d056      	beq.n	800a086 <UTIL_TIMER_Start+0xc2>
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f929 	bl	800a230 <TimerExists>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	f083 0301 	eor.w	r3, r3, #1
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d04d      	beq.n	800a086 <UTIL_TIMER_Start+0xc2>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	7a5b      	ldrb	r3, [r3, #9]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d149      	bne.n	800a086 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ff6:	613b      	str	r3, [r7, #16]
  return(result);
 8009ff8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8009ffa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ffc:	b672      	cpsid	i
}
 8009ffe:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800a006:	4b24      	ldr	r3, [pc, #144]	; (800a098 <UTIL_TIMER_Start+0xd4>)
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	4798      	blx	r3
 800a00c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800a00e:	6a3a      	ldr	r2, [r7, #32]
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	429a      	cmp	r2, r3
 800a014:	d201      	bcs.n	800a01a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a3a      	ldr	r2, [r7, #32]
 800a01e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800a032:	4b1a      	ldr	r3, [pc, #104]	; (800a09c <UTIL_TIMER_Start+0xd8>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d106      	bne.n	800a048 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800a03a:	4b17      	ldr	r3, [pc, #92]	; (800a098 <UTIL_TIMER_Start+0xd4>)
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f96b 	bl	800a31c <TimerInsertNewHeadTimer>
 800a046:	e017      	b.n	800a078 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800a048:	4b13      	ldr	r3, [pc, #76]	; (800a098 <UTIL_TIMER_Start+0xd4>)
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	4798      	blx	r3
 800a04e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	441a      	add	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	4b0e      	ldr	r3, [pc, #56]	; (800a09c <UTIL_TIMER_Start+0xd8>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d203      	bcs.n	800a072 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f956 	bl	800a31c <TimerInsertNewHeadTimer>
 800a070:	e002      	b.n	800a078 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f922 	bl	800a2bc <TimerInsertTimer>
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f383 8810 	msr	PRIMASK, r3
}
 800a082:	bf00      	nop
  {
 800a084:	e002      	b.n	800a08c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800a086:	2301      	movs	r3, #1
 800a088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800a08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a090:	4618      	mov	r0, r3
 800a092:	3728      	adds	r7, #40	; 0x28
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	0800b384 	.word	0x0800b384
 800a09c:	20000540 	.word	0x20000540

0800a0a0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b088      	sub	sp, #32
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d05b      	beq.n	800a16a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a0b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a0ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0bc:	b672      	cpsid	i
}
 800a0be:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800a0c0:	4b2d      	ldr	r3, [pc, #180]	; (800a178 <UTIL_TIMER_Stop+0xd8>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800a0c6:	4b2c      	ldr	r3, [pc, #176]	; (800a178 <UTIL_TIMER_Stop+0xd8>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800a0d2:	4b29      	ldr	r3, [pc, #164]	; (800a178 <UTIL_TIMER_Stop+0xd8>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d041      	beq.n	800a15e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800a0e0:	4b25      	ldr	r3, [pc, #148]	; (800a178 <UTIL_TIMER_Stop+0xd8>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d134      	bne.n	800a154 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800a0ea:	4b23      	ldr	r3, [pc, #140]	; (800a178 <UTIL_TIMER_Stop+0xd8>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800a0f2:	4b21      	ldr	r3, [pc, #132]	; (800a178 <UTIL_TIMER_Stop+0xd8>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	695b      	ldr	r3, [r3, #20]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00a      	beq.n	800a112 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800a0fc:	4b1e      	ldr	r3, [pc, #120]	; (800a178 <UTIL_TIMER_Stop+0xd8>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	4a1d      	ldr	r2, [pc, #116]	; (800a178 <UTIL_TIMER_Stop+0xd8>)
 800a104:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800a106:	4b1c      	ldr	r3, [pc, #112]	; (800a178 <UTIL_TIMER_Stop+0xd8>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 f8ac 	bl	800a268 <TimerSetTimeout>
 800a110:	e023      	b.n	800a15a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800a112:	4b1a      	ldr	r3, [pc, #104]	; (800a17c <UTIL_TIMER_Stop+0xdc>)
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	4798      	blx	r3
            TimerListHead = NULL;
 800a118:	4b17      	ldr	r3, [pc, #92]	; (800a178 <UTIL_TIMER_Stop+0xd8>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	e01c      	b.n	800a15a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	429a      	cmp	r2, r3
 800a126:	d110      	bne.n	800a14a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d006      	beq.n	800a13e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800a13c:	e00d      	b.n	800a15a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	615a      	str	r2, [r3, #20]
            break;
 800a148:	e007      	b.n	800a15a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1e2      	bne.n	800a120 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	77fb      	strb	r3, [r7, #31]
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	f383 8810 	msr	PRIMASK, r3
}
 800a168:	e001      	b.n	800a16e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800a16a:	2301      	movs	r3, #1
 800a16c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800a16e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3720      	adds	r7, #32
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	20000540 	.word	0x20000540
 800a17c:	0800b384 	.word	0x0800b384

0800a180 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d102      	bne.n	800a19a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800a194:	2301      	movs	r3, #1
 800a196:	73fb      	strb	r3, [r7, #15]
 800a198:	e014      	b.n	800a1c4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800a19a:	4b0d      	ldr	r3, [pc, #52]	; (800a1d0 <UTIL_TIMER_SetPeriod+0x50>)
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	6838      	ldr	r0, [r7, #0]
 800a1a0:	4798      	blx	r3
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f841 	bl	800a230 <TimerExists>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d007      	beq.n	800a1c4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7ff ff73 	bl	800a0a0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff ff02 	bl	8009fc4 <UTIL_TIMER_Start>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	0800b384 	.word	0x0800b384

0800a1d4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800a1da:	4b06      	ldr	r3, [pc, #24]	; (800a1f4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	4798      	blx	r3
 800a1e0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800a1e2:	4b04      	ldr	r3, [pc, #16]	; (800a1f4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800a1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	4798      	blx	r3
 800a1ea:	4603      	mov	r3, r0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	0800b384 	.word	0x0800b384

0800a1f8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800a200:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <UTIL_TIMER_GetElapsedTime+0x34>)
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	4798      	blx	r3
 800a206:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800a208:	4b08      	ldr	r3, [pc, #32]	; (800a22c <UTIL_TIMER_GetElapsedTime+0x34>)
 800a20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	4798      	blx	r3
 800a210:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800a212:	4b06      	ldr	r3, [pc, #24]	; (800a22c <UTIL_TIMER_GetElapsedTime+0x34>)
 800a214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a216:	68f9      	ldr	r1, [r7, #12]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	1a8a      	subs	r2, r1, r2
 800a21c:	4610      	mov	r0, r2
 800a21e:	4798      	blx	r3
 800a220:	4603      	mov	r3, r0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	0800b384 	.word	0x0800b384

0800a230 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a238:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <TimerExists+0x34>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800a23e:	e008      	b.n	800a252 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	429a      	cmp	r2, r3
 800a246:	d101      	bne.n	800a24c <TimerExists+0x1c>
    {
      return true;
 800a248:	2301      	movs	r3, #1
 800a24a:	e006      	b.n	800a25a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1f3      	bne.n	800a240 <TimerExists+0x10>
  }
  return false;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	bc80      	pop	{r7}
 800a262:	4770      	bx	lr
 800a264:	20000540 	.word	0x20000540

0800a268 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800a268:	b590      	push	{r4, r7, lr}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800a270:	4b11      	ldr	r3, [pc, #68]	; (800a2b8 <TimerSetTimeout+0x50>)
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	4798      	blx	r3
 800a276:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681c      	ldr	r4, [r3, #0]
 800a282:	4b0d      	ldr	r3, [pc, #52]	; (800a2b8 <TimerSetTimeout+0x50>)
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	4798      	blx	r3
 800a288:	4602      	mov	r2, r0
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	4413      	add	r3, r2
 800a28e:	429c      	cmp	r4, r3
 800a290:	d207      	bcs.n	800a2a2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800a292:	4b09      	ldr	r3, [pc, #36]	; (800a2b8 <TimerSetTimeout+0x50>)
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	4798      	blx	r3
 800a298:	4602      	mov	r2, r0
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	441a      	add	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800a2a2:	4b05      	ldr	r3, [pc, #20]	; (800a2b8 <TimerSetTimeout+0x50>)
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	6812      	ldr	r2, [r2, #0]
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	4798      	blx	r3
}
 800a2ae:	bf00      	nop
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd90      	pop	{r4, r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0800b384 	.word	0x0800b384

0800a2bc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a2c4:	4b14      	ldr	r3, [pc, #80]	; (800a318 <TimerInsertTimer+0x5c>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800a2ca:	4b13      	ldr	r3, [pc, #76]	; (800a318 <TimerInsertTimer+0x5c>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800a2d2:	e012      	b.n	800a2fa <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d905      	bls.n	800a2ec <TimerInsertTimer+0x30>
    {
        cur = next;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	695b      	ldr	r3, [r3, #20]
 800a2e8:	60bb      	str	r3, [r7, #8]
 800a2ea:	e006      	b.n	800a2fa <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	615a      	str	r2, [r3, #20]
        return;
 800a2f8:	e009      	b.n	800a30e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1e8      	bne.n	800a2d4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	615a      	str	r2, [r3, #20]
}
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	bc80      	pop	{r7}
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	20000540 	.word	0x20000540

0800a31c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a324:	4b0b      	ldr	r3, [pc, #44]	; (800a354 <TimerInsertNewHeadTimer+0x38>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800a33c:	4a05      	ldr	r2, [pc, #20]	; (800a354 <TimerInsertNewHeadTimer+0x38>)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800a342:	4b04      	ldr	r3, [pc, #16]	; (800a354 <TimerInsertNewHeadTimer+0x38>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4618      	mov	r0, r3
 800a348:	f7ff ff8e 	bl	800a268 <TimerSetTimeout>
}
 800a34c:	bf00      	nop
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20000540 	.word	0x20000540

0800a358 <siprintf>:
 800a358:	b40e      	push	{r1, r2, r3}
 800a35a:	b500      	push	{lr}
 800a35c:	b09c      	sub	sp, #112	; 0x70
 800a35e:	ab1d      	add	r3, sp, #116	; 0x74
 800a360:	9002      	str	r0, [sp, #8]
 800a362:	9006      	str	r0, [sp, #24]
 800a364:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a368:	4809      	ldr	r0, [pc, #36]	; (800a390 <siprintf+0x38>)
 800a36a:	9107      	str	r1, [sp, #28]
 800a36c:	9104      	str	r1, [sp, #16]
 800a36e:	4909      	ldr	r1, [pc, #36]	; (800a394 <siprintf+0x3c>)
 800a370:	f853 2b04 	ldr.w	r2, [r3], #4
 800a374:	9105      	str	r1, [sp, #20]
 800a376:	6800      	ldr	r0, [r0, #0]
 800a378:	9301      	str	r3, [sp, #4]
 800a37a:	a902      	add	r1, sp, #8
 800a37c:	f000 f8e2 	bl	800a544 <_svfiprintf_r>
 800a380:	9b02      	ldr	r3, [sp, #8]
 800a382:	2200      	movs	r2, #0
 800a384:	701a      	strb	r2, [r3, #0]
 800a386:	b01c      	add	sp, #112	; 0x70
 800a388:	f85d eb04 	ldr.w	lr, [sp], #4
 800a38c:	b003      	add	sp, #12
 800a38e:	4770      	bx	lr
 800a390:	2000005c 	.word	0x2000005c
 800a394:	ffff0208 	.word	0xffff0208

0800a398 <_vsniprintf_r>:
 800a398:	b530      	push	{r4, r5, lr}
 800a39a:	4614      	mov	r4, r2
 800a39c:	2c00      	cmp	r4, #0
 800a39e:	b09b      	sub	sp, #108	; 0x6c
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	da05      	bge.n	800a3b2 <_vsniprintf_r+0x1a>
 800a3a6:	238b      	movs	r3, #139	; 0x8b
 800a3a8:	6003      	str	r3, [r0, #0]
 800a3aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3ae:	b01b      	add	sp, #108	; 0x6c
 800a3b0:	bd30      	pop	{r4, r5, pc}
 800a3b2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a3b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a3ba:	bf14      	ite	ne
 800a3bc:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a3c0:	4623      	moveq	r3, r4
 800a3c2:	9302      	str	r3, [sp, #8]
 800a3c4:	9305      	str	r3, [sp, #20]
 800a3c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3ca:	9100      	str	r1, [sp, #0]
 800a3cc:	9104      	str	r1, [sp, #16]
 800a3ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a3d2:	4669      	mov	r1, sp
 800a3d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a3d6:	f000 f8b5 	bl	800a544 <_svfiprintf_r>
 800a3da:	1c43      	adds	r3, r0, #1
 800a3dc:	bfbc      	itt	lt
 800a3de:	238b      	movlt	r3, #139	; 0x8b
 800a3e0:	602b      	strlt	r3, [r5, #0]
 800a3e2:	2c00      	cmp	r4, #0
 800a3e4:	d0e3      	beq.n	800a3ae <_vsniprintf_r+0x16>
 800a3e6:	9b00      	ldr	r3, [sp, #0]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	701a      	strb	r2, [r3, #0]
 800a3ec:	e7df      	b.n	800a3ae <_vsniprintf_r+0x16>
	...

0800a3f0 <vsniprintf>:
 800a3f0:	b507      	push	{r0, r1, r2, lr}
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	460a      	mov	r2, r1
 800a3f8:	4601      	mov	r1, r0
 800a3fa:	4803      	ldr	r0, [pc, #12]	; (800a408 <vsniprintf+0x18>)
 800a3fc:	6800      	ldr	r0, [r0, #0]
 800a3fe:	f7ff ffcb 	bl	800a398 <_vsniprintf_r>
 800a402:	b003      	add	sp, #12
 800a404:	f85d fb04 	ldr.w	pc, [sp], #4
 800a408:	2000005c 	.word	0x2000005c

0800a40c <memset>:
 800a40c:	4402      	add	r2, r0
 800a40e:	4603      	mov	r3, r0
 800a410:	4293      	cmp	r3, r2
 800a412:	d100      	bne.n	800a416 <memset+0xa>
 800a414:	4770      	bx	lr
 800a416:	f803 1b01 	strb.w	r1, [r3], #1
 800a41a:	e7f9      	b.n	800a410 <memset+0x4>

0800a41c <__errno>:
 800a41c:	4b01      	ldr	r3, [pc, #4]	; (800a424 <__errno+0x8>)
 800a41e:	6818      	ldr	r0, [r3, #0]
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	2000005c 	.word	0x2000005c

0800a428 <__libc_init_array>:
 800a428:	b570      	push	{r4, r5, r6, lr}
 800a42a:	4d0d      	ldr	r5, [pc, #52]	; (800a460 <__libc_init_array+0x38>)
 800a42c:	4c0d      	ldr	r4, [pc, #52]	; (800a464 <__libc_init_array+0x3c>)
 800a42e:	1b64      	subs	r4, r4, r5
 800a430:	10a4      	asrs	r4, r4, #2
 800a432:	2600      	movs	r6, #0
 800a434:	42a6      	cmp	r6, r4
 800a436:	d109      	bne.n	800a44c <__libc_init_array+0x24>
 800a438:	4d0b      	ldr	r5, [pc, #44]	; (800a468 <__libc_init_array+0x40>)
 800a43a:	4c0c      	ldr	r4, [pc, #48]	; (800a46c <__libc_init_array+0x44>)
 800a43c:	f000 fc68 	bl	800ad10 <_init>
 800a440:	1b64      	subs	r4, r4, r5
 800a442:	10a4      	asrs	r4, r4, #2
 800a444:	2600      	movs	r6, #0
 800a446:	42a6      	cmp	r6, r4
 800a448:	d105      	bne.n	800a456 <__libc_init_array+0x2e>
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a450:	4798      	blx	r3
 800a452:	3601      	adds	r6, #1
 800a454:	e7ee      	b.n	800a434 <__libc_init_array+0xc>
 800a456:	f855 3b04 	ldr.w	r3, [r5], #4
 800a45a:	4798      	blx	r3
 800a45c:	3601      	adds	r6, #1
 800a45e:	e7f2      	b.n	800a446 <__libc_init_array+0x1e>
 800a460:	0800b554 	.word	0x0800b554
 800a464:	0800b554 	.word	0x0800b554
 800a468:	0800b554 	.word	0x0800b554
 800a46c:	0800b558 	.word	0x0800b558

0800a470 <__retarget_lock_acquire_recursive>:
 800a470:	4770      	bx	lr

0800a472 <__retarget_lock_release_recursive>:
 800a472:	4770      	bx	lr

0800a474 <memcpy>:
 800a474:	440a      	add	r2, r1
 800a476:	4291      	cmp	r1, r2
 800a478:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a47c:	d100      	bne.n	800a480 <memcpy+0xc>
 800a47e:	4770      	bx	lr
 800a480:	b510      	push	{r4, lr}
 800a482:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a48a:	4291      	cmp	r1, r2
 800a48c:	d1f9      	bne.n	800a482 <memcpy+0xe>
 800a48e:	bd10      	pop	{r4, pc}

0800a490 <__ssputs_r>:
 800a490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a494:	688e      	ldr	r6, [r1, #8]
 800a496:	461f      	mov	r7, r3
 800a498:	42be      	cmp	r6, r7
 800a49a:	680b      	ldr	r3, [r1, #0]
 800a49c:	4682      	mov	sl, r0
 800a49e:	460c      	mov	r4, r1
 800a4a0:	4690      	mov	r8, r2
 800a4a2:	d82c      	bhi.n	800a4fe <__ssputs_r+0x6e>
 800a4a4:	898a      	ldrh	r2, [r1, #12]
 800a4a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4aa:	d026      	beq.n	800a4fa <__ssputs_r+0x6a>
 800a4ac:	6965      	ldr	r5, [r4, #20]
 800a4ae:	6909      	ldr	r1, [r1, #16]
 800a4b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4b4:	eba3 0901 	sub.w	r9, r3, r1
 800a4b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4bc:	1c7b      	adds	r3, r7, #1
 800a4be:	444b      	add	r3, r9
 800a4c0:	106d      	asrs	r5, r5, #1
 800a4c2:	429d      	cmp	r5, r3
 800a4c4:	bf38      	it	cc
 800a4c6:	461d      	movcc	r5, r3
 800a4c8:	0553      	lsls	r3, r2, #21
 800a4ca:	d527      	bpl.n	800a51c <__ssputs_r+0x8c>
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	f000 f957 	bl	800a780 <_malloc_r>
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	b360      	cbz	r0, 800a530 <__ssputs_r+0xa0>
 800a4d6:	6921      	ldr	r1, [r4, #16]
 800a4d8:	464a      	mov	r2, r9
 800a4da:	f7ff ffcb 	bl	800a474 <memcpy>
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e8:	81a3      	strh	r3, [r4, #12]
 800a4ea:	6126      	str	r6, [r4, #16]
 800a4ec:	6165      	str	r5, [r4, #20]
 800a4ee:	444e      	add	r6, r9
 800a4f0:	eba5 0509 	sub.w	r5, r5, r9
 800a4f4:	6026      	str	r6, [r4, #0]
 800a4f6:	60a5      	str	r5, [r4, #8]
 800a4f8:	463e      	mov	r6, r7
 800a4fa:	42be      	cmp	r6, r7
 800a4fc:	d900      	bls.n	800a500 <__ssputs_r+0x70>
 800a4fe:	463e      	mov	r6, r7
 800a500:	6820      	ldr	r0, [r4, #0]
 800a502:	4632      	mov	r2, r6
 800a504:	4641      	mov	r1, r8
 800a506:	f000 fb86 	bl	800ac16 <memmove>
 800a50a:	68a3      	ldr	r3, [r4, #8]
 800a50c:	1b9b      	subs	r3, r3, r6
 800a50e:	60a3      	str	r3, [r4, #8]
 800a510:	6823      	ldr	r3, [r4, #0]
 800a512:	4433      	add	r3, r6
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	2000      	movs	r0, #0
 800a518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51c:	462a      	mov	r2, r5
 800a51e:	f000 fb4b 	bl	800abb8 <_realloc_r>
 800a522:	4606      	mov	r6, r0
 800a524:	2800      	cmp	r0, #0
 800a526:	d1e0      	bne.n	800a4ea <__ssputs_r+0x5a>
 800a528:	6921      	ldr	r1, [r4, #16]
 800a52a:	4650      	mov	r0, sl
 800a52c:	f000 fb9e 	bl	800ac6c <_free_r>
 800a530:	230c      	movs	r3, #12
 800a532:	f8ca 3000 	str.w	r3, [sl]
 800a536:	89a3      	ldrh	r3, [r4, #12]
 800a538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a53c:	81a3      	strh	r3, [r4, #12]
 800a53e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a542:	e7e9      	b.n	800a518 <__ssputs_r+0x88>

0800a544 <_svfiprintf_r>:
 800a544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a548:	4698      	mov	r8, r3
 800a54a:	898b      	ldrh	r3, [r1, #12]
 800a54c:	061b      	lsls	r3, r3, #24
 800a54e:	b09d      	sub	sp, #116	; 0x74
 800a550:	4607      	mov	r7, r0
 800a552:	460d      	mov	r5, r1
 800a554:	4614      	mov	r4, r2
 800a556:	d50e      	bpl.n	800a576 <_svfiprintf_r+0x32>
 800a558:	690b      	ldr	r3, [r1, #16]
 800a55a:	b963      	cbnz	r3, 800a576 <_svfiprintf_r+0x32>
 800a55c:	2140      	movs	r1, #64	; 0x40
 800a55e:	f000 f90f 	bl	800a780 <_malloc_r>
 800a562:	6028      	str	r0, [r5, #0]
 800a564:	6128      	str	r0, [r5, #16]
 800a566:	b920      	cbnz	r0, 800a572 <_svfiprintf_r+0x2e>
 800a568:	230c      	movs	r3, #12
 800a56a:	603b      	str	r3, [r7, #0]
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a570:	e0d0      	b.n	800a714 <_svfiprintf_r+0x1d0>
 800a572:	2340      	movs	r3, #64	; 0x40
 800a574:	616b      	str	r3, [r5, #20]
 800a576:	2300      	movs	r3, #0
 800a578:	9309      	str	r3, [sp, #36]	; 0x24
 800a57a:	2320      	movs	r3, #32
 800a57c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a580:	f8cd 800c 	str.w	r8, [sp, #12]
 800a584:	2330      	movs	r3, #48	; 0x30
 800a586:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a72c <_svfiprintf_r+0x1e8>
 800a58a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a58e:	f04f 0901 	mov.w	r9, #1
 800a592:	4623      	mov	r3, r4
 800a594:	469a      	mov	sl, r3
 800a596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a59a:	b10a      	cbz	r2, 800a5a0 <_svfiprintf_r+0x5c>
 800a59c:	2a25      	cmp	r2, #37	; 0x25
 800a59e:	d1f9      	bne.n	800a594 <_svfiprintf_r+0x50>
 800a5a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a5a4:	d00b      	beq.n	800a5be <_svfiprintf_r+0x7a>
 800a5a6:	465b      	mov	r3, fp
 800a5a8:	4622      	mov	r2, r4
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	f7ff ff6f 	bl	800a490 <__ssputs_r>
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	f000 80a9 	beq.w	800a70a <_svfiprintf_r+0x1c6>
 800a5b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ba:	445a      	add	r2, fp
 800a5bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a5be:	f89a 3000 	ldrb.w	r3, [sl]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 80a1 	beq.w	800a70a <_svfiprintf_r+0x1c6>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5d2:	f10a 0a01 	add.w	sl, sl, #1
 800a5d6:	9304      	str	r3, [sp, #16]
 800a5d8:	9307      	str	r3, [sp, #28]
 800a5da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5de:	931a      	str	r3, [sp, #104]	; 0x68
 800a5e0:	4654      	mov	r4, sl
 800a5e2:	2205      	movs	r2, #5
 800a5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e8:	4850      	ldr	r0, [pc, #320]	; (800a72c <_svfiprintf_r+0x1e8>)
 800a5ea:	f7f5 fdd9 	bl	80001a0 <memchr>
 800a5ee:	9a04      	ldr	r2, [sp, #16]
 800a5f0:	b9d8      	cbnz	r0, 800a62a <_svfiprintf_r+0xe6>
 800a5f2:	06d0      	lsls	r0, r2, #27
 800a5f4:	bf44      	itt	mi
 800a5f6:	2320      	movmi	r3, #32
 800a5f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5fc:	0711      	lsls	r1, r2, #28
 800a5fe:	bf44      	itt	mi
 800a600:	232b      	movmi	r3, #43	; 0x2b
 800a602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a606:	f89a 3000 	ldrb.w	r3, [sl]
 800a60a:	2b2a      	cmp	r3, #42	; 0x2a
 800a60c:	d015      	beq.n	800a63a <_svfiprintf_r+0xf6>
 800a60e:	9a07      	ldr	r2, [sp, #28]
 800a610:	4654      	mov	r4, sl
 800a612:	2000      	movs	r0, #0
 800a614:	f04f 0c0a 	mov.w	ip, #10
 800a618:	4621      	mov	r1, r4
 800a61a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a61e:	3b30      	subs	r3, #48	; 0x30
 800a620:	2b09      	cmp	r3, #9
 800a622:	d94d      	bls.n	800a6c0 <_svfiprintf_r+0x17c>
 800a624:	b1b0      	cbz	r0, 800a654 <_svfiprintf_r+0x110>
 800a626:	9207      	str	r2, [sp, #28]
 800a628:	e014      	b.n	800a654 <_svfiprintf_r+0x110>
 800a62a:	eba0 0308 	sub.w	r3, r0, r8
 800a62e:	fa09 f303 	lsl.w	r3, r9, r3
 800a632:	4313      	orrs	r3, r2
 800a634:	9304      	str	r3, [sp, #16]
 800a636:	46a2      	mov	sl, r4
 800a638:	e7d2      	b.n	800a5e0 <_svfiprintf_r+0x9c>
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	1d19      	adds	r1, r3, #4
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	9103      	str	r1, [sp, #12]
 800a642:	2b00      	cmp	r3, #0
 800a644:	bfbb      	ittet	lt
 800a646:	425b      	neglt	r3, r3
 800a648:	f042 0202 	orrlt.w	r2, r2, #2
 800a64c:	9307      	strge	r3, [sp, #28]
 800a64e:	9307      	strlt	r3, [sp, #28]
 800a650:	bfb8      	it	lt
 800a652:	9204      	strlt	r2, [sp, #16]
 800a654:	7823      	ldrb	r3, [r4, #0]
 800a656:	2b2e      	cmp	r3, #46	; 0x2e
 800a658:	d10c      	bne.n	800a674 <_svfiprintf_r+0x130>
 800a65a:	7863      	ldrb	r3, [r4, #1]
 800a65c:	2b2a      	cmp	r3, #42	; 0x2a
 800a65e:	d134      	bne.n	800a6ca <_svfiprintf_r+0x186>
 800a660:	9b03      	ldr	r3, [sp, #12]
 800a662:	1d1a      	adds	r2, r3, #4
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	9203      	str	r2, [sp, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	bfb8      	it	lt
 800a66c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a670:	3402      	adds	r4, #2
 800a672:	9305      	str	r3, [sp, #20]
 800a674:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a730 <_svfiprintf_r+0x1ec>
 800a678:	7821      	ldrb	r1, [r4, #0]
 800a67a:	2203      	movs	r2, #3
 800a67c:	4650      	mov	r0, sl
 800a67e:	f7f5 fd8f 	bl	80001a0 <memchr>
 800a682:	b138      	cbz	r0, 800a694 <_svfiprintf_r+0x150>
 800a684:	9b04      	ldr	r3, [sp, #16]
 800a686:	eba0 000a 	sub.w	r0, r0, sl
 800a68a:	2240      	movs	r2, #64	; 0x40
 800a68c:	4082      	lsls	r2, r0
 800a68e:	4313      	orrs	r3, r2
 800a690:	3401      	adds	r4, #1
 800a692:	9304      	str	r3, [sp, #16]
 800a694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a698:	4826      	ldr	r0, [pc, #152]	; (800a734 <_svfiprintf_r+0x1f0>)
 800a69a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a69e:	2206      	movs	r2, #6
 800a6a0:	f7f5 fd7e 	bl	80001a0 <memchr>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d038      	beq.n	800a71a <_svfiprintf_r+0x1d6>
 800a6a8:	4b23      	ldr	r3, [pc, #140]	; (800a738 <_svfiprintf_r+0x1f4>)
 800a6aa:	bb1b      	cbnz	r3, 800a6f4 <_svfiprintf_r+0x1b0>
 800a6ac:	9b03      	ldr	r3, [sp, #12]
 800a6ae:	3307      	adds	r3, #7
 800a6b0:	f023 0307 	bic.w	r3, r3, #7
 800a6b4:	3308      	adds	r3, #8
 800a6b6:	9303      	str	r3, [sp, #12]
 800a6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ba:	4433      	add	r3, r6
 800a6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a6be:	e768      	b.n	800a592 <_svfiprintf_r+0x4e>
 800a6c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	2001      	movs	r0, #1
 800a6c8:	e7a6      	b.n	800a618 <_svfiprintf_r+0xd4>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	3401      	adds	r4, #1
 800a6ce:	9305      	str	r3, [sp, #20]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	f04f 0c0a 	mov.w	ip, #10
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6dc:	3a30      	subs	r2, #48	; 0x30
 800a6de:	2a09      	cmp	r2, #9
 800a6e0:	d903      	bls.n	800a6ea <_svfiprintf_r+0x1a6>
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d0c6      	beq.n	800a674 <_svfiprintf_r+0x130>
 800a6e6:	9105      	str	r1, [sp, #20]
 800a6e8:	e7c4      	b.n	800a674 <_svfiprintf_r+0x130>
 800a6ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e7f0      	b.n	800a6d6 <_svfiprintf_r+0x192>
 800a6f4:	ab03      	add	r3, sp, #12
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	462a      	mov	r2, r5
 800a6fa:	4b10      	ldr	r3, [pc, #64]	; (800a73c <_svfiprintf_r+0x1f8>)
 800a6fc:	a904      	add	r1, sp, #16
 800a6fe:	4638      	mov	r0, r7
 800a700:	f3af 8000 	nop.w
 800a704:	1c42      	adds	r2, r0, #1
 800a706:	4606      	mov	r6, r0
 800a708:	d1d6      	bne.n	800a6b8 <_svfiprintf_r+0x174>
 800a70a:	89ab      	ldrh	r3, [r5, #12]
 800a70c:	065b      	lsls	r3, r3, #25
 800a70e:	f53f af2d 	bmi.w	800a56c <_svfiprintf_r+0x28>
 800a712:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a714:	b01d      	add	sp, #116	; 0x74
 800a716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71a:	ab03      	add	r3, sp, #12
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	462a      	mov	r2, r5
 800a720:	4b06      	ldr	r3, [pc, #24]	; (800a73c <_svfiprintf_r+0x1f8>)
 800a722:	a904      	add	r1, sp, #16
 800a724:	4638      	mov	r0, r7
 800a726:	f000 f919 	bl	800a95c <_printf_i>
 800a72a:	e7eb      	b.n	800a704 <_svfiprintf_r+0x1c0>
 800a72c:	0800b518 	.word	0x0800b518
 800a730:	0800b51e 	.word	0x0800b51e
 800a734:	0800b522 	.word	0x0800b522
 800a738:	00000000 	.word	0x00000000
 800a73c:	0800a491 	.word	0x0800a491

0800a740 <sbrk_aligned>:
 800a740:	b570      	push	{r4, r5, r6, lr}
 800a742:	4e0e      	ldr	r6, [pc, #56]	; (800a77c <sbrk_aligned+0x3c>)
 800a744:	460c      	mov	r4, r1
 800a746:	6831      	ldr	r1, [r6, #0]
 800a748:	4605      	mov	r5, r0
 800a74a:	b911      	cbnz	r1, 800a752 <sbrk_aligned+0x12>
 800a74c:	f000 fa7e 	bl	800ac4c <_sbrk_r>
 800a750:	6030      	str	r0, [r6, #0]
 800a752:	4621      	mov	r1, r4
 800a754:	4628      	mov	r0, r5
 800a756:	f000 fa79 	bl	800ac4c <_sbrk_r>
 800a75a:	1c43      	adds	r3, r0, #1
 800a75c:	d00a      	beq.n	800a774 <sbrk_aligned+0x34>
 800a75e:	1cc4      	adds	r4, r0, #3
 800a760:	f024 0403 	bic.w	r4, r4, #3
 800a764:	42a0      	cmp	r0, r4
 800a766:	d007      	beq.n	800a778 <sbrk_aligned+0x38>
 800a768:	1a21      	subs	r1, r4, r0
 800a76a:	4628      	mov	r0, r5
 800a76c:	f000 fa6e 	bl	800ac4c <_sbrk_r>
 800a770:	3001      	adds	r0, #1
 800a772:	d101      	bne.n	800a778 <sbrk_aligned+0x38>
 800a774:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a778:	4620      	mov	r0, r4
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	20000684 	.word	0x20000684

0800a780 <_malloc_r>:
 800a780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a784:	1ccd      	adds	r5, r1, #3
 800a786:	f025 0503 	bic.w	r5, r5, #3
 800a78a:	3508      	adds	r5, #8
 800a78c:	2d0c      	cmp	r5, #12
 800a78e:	bf38      	it	cc
 800a790:	250c      	movcc	r5, #12
 800a792:	2d00      	cmp	r5, #0
 800a794:	4607      	mov	r7, r0
 800a796:	db01      	blt.n	800a79c <_malloc_r+0x1c>
 800a798:	42a9      	cmp	r1, r5
 800a79a:	d905      	bls.n	800a7a8 <_malloc_r+0x28>
 800a79c:	230c      	movs	r3, #12
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	2600      	movs	r6, #0
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a87c <_malloc_r+0xfc>
 800a7ac:	f000 f9f8 	bl	800aba0 <__malloc_lock>
 800a7b0:	f8d8 3000 	ldr.w	r3, [r8]
 800a7b4:	461c      	mov	r4, r3
 800a7b6:	bb5c      	cbnz	r4, 800a810 <_malloc_r+0x90>
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	f7ff ffc0 	bl	800a740 <sbrk_aligned>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	d155      	bne.n	800a872 <_malloc_r+0xf2>
 800a7c6:	f8d8 4000 	ldr.w	r4, [r8]
 800a7ca:	4626      	mov	r6, r4
 800a7cc:	2e00      	cmp	r6, #0
 800a7ce:	d145      	bne.n	800a85c <_malloc_r+0xdc>
 800a7d0:	2c00      	cmp	r4, #0
 800a7d2:	d048      	beq.n	800a866 <_malloc_r+0xe6>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	4631      	mov	r1, r6
 800a7d8:	4638      	mov	r0, r7
 800a7da:	eb04 0903 	add.w	r9, r4, r3
 800a7de:	f000 fa35 	bl	800ac4c <_sbrk_r>
 800a7e2:	4581      	cmp	r9, r0
 800a7e4:	d13f      	bne.n	800a866 <_malloc_r+0xe6>
 800a7e6:	6821      	ldr	r1, [r4, #0]
 800a7e8:	1a6d      	subs	r5, r5, r1
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	f7ff ffa7 	bl	800a740 <sbrk_aligned>
 800a7f2:	3001      	adds	r0, #1
 800a7f4:	d037      	beq.n	800a866 <_malloc_r+0xe6>
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	442b      	add	r3, r5
 800a7fa:	6023      	str	r3, [r4, #0]
 800a7fc:	f8d8 3000 	ldr.w	r3, [r8]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d038      	beq.n	800a876 <_malloc_r+0xf6>
 800a804:	685a      	ldr	r2, [r3, #4]
 800a806:	42a2      	cmp	r2, r4
 800a808:	d12b      	bne.n	800a862 <_malloc_r+0xe2>
 800a80a:	2200      	movs	r2, #0
 800a80c:	605a      	str	r2, [r3, #4]
 800a80e:	e00f      	b.n	800a830 <_malloc_r+0xb0>
 800a810:	6822      	ldr	r2, [r4, #0]
 800a812:	1b52      	subs	r2, r2, r5
 800a814:	d41f      	bmi.n	800a856 <_malloc_r+0xd6>
 800a816:	2a0b      	cmp	r2, #11
 800a818:	d917      	bls.n	800a84a <_malloc_r+0xca>
 800a81a:	1961      	adds	r1, r4, r5
 800a81c:	42a3      	cmp	r3, r4
 800a81e:	6025      	str	r5, [r4, #0]
 800a820:	bf18      	it	ne
 800a822:	6059      	strne	r1, [r3, #4]
 800a824:	6863      	ldr	r3, [r4, #4]
 800a826:	bf08      	it	eq
 800a828:	f8c8 1000 	streq.w	r1, [r8]
 800a82c:	5162      	str	r2, [r4, r5]
 800a82e:	604b      	str	r3, [r1, #4]
 800a830:	4638      	mov	r0, r7
 800a832:	f104 060b 	add.w	r6, r4, #11
 800a836:	f000 f9b9 	bl	800abac <__malloc_unlock>
 800a83a:	f026 0607 	bic.w	r6, r6, #7
 800a83e:	1d23      	adds	r3, r4, #4
 800a840:	1af2      	subs	r2, r6, r3
 800a842:	d0ae      	beq.n	800a7a2 <_malloc_r+0x22>
 800a844:	1b9b      	subs	r3, r3, r6
 800a846:	50a3      	str	r3, [r4, r2]
 800a848:	e7ab      	b.n	800a7a2 <_malloc_r+0x22>
 800a84a:	42a3      	cmp	r3, r4
 800a84c:	6862      	ldr	r2, [r4, #4]
 800a84e:	d1dd      	bne.n	800a80c <_malloc_r+0x8c>
 800a850:	f8c8 2000 	str.w	r2, [r8]
 800a854:	e7ec      	b.n	800a830 <_malloc_r+0xb0>
 800a856:	4623      	mov	r3, r4
 800a858:	6864      	ldr	r4, [r4, #4]
 800a85a:	e7ac      	b.n	800a7b6 <_malloc_r+0x36>
 800a85c:	4634      	mov	r4, r6
 800a85e:	6876      	ldr	r6, [r6, #4]
 800a860:	e7b4      	b.n	800a7cc <_malloc_r+0x4c>
 800a862:	4613      	mov	r3, r2
 800a864:	e7cc      	b.n	800a800 <_malloc_r+0x80>
 800a866:	230c      	movs	r3, #12
 800a868:	603b      	str	r3, [r7, #0]
 800a86a:	4638      	mov	r0, r7
 800a86c:	f000 f99e 	bl	800abac <__malloc_unlock>
 800a870:	e797      	b.n	800a7a2 <_malloc_r+0x22>
 800a872:	6025      	str	r5, [r4, #0]
 800a874:	e7dc      	b.n	800a830 <_malloc_r+0xb0>
 800a876:	605b      	str	r3, [r3, #4]
 800a878:	deff      	udf	#255	; 0xff
 800a87a:	bf00      	nop
 800a87c:	20000680 	.word	0x20000680

0800a880 <_printf_common>:
 800a880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a884:	4616      	mov	r6, r2
 800a886:	4699      	mov	r9, r3
 800a888:	688a      	ldr	r2, [r1, #8]
 800a88a:	690b      	ldr	r3, [r1, #16]
 800a88c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a890:	4293      	cmp	r3, r2
 800a892:	bfb8      	it	lt
 800a894:	4613      	movlt	r3, r2
 800a896:	6033      	str	r3, [r6, #0]
 800a898:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a89c:	4607      	mov	r7, r0
 800a89e:	460c      	mov	r4, r1
 800a8a0:	b10a      	cbz	r2, 800a8a6 <_printf_common+0x26>
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	6033      	str	r3, [r6, #0]
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	0699      	lsls	r1, r3, #26
 800a8aa:	bf42      	ittt	mi
 800a8ac:	6833      	ldrmi	r3, [r6, #0]
 800a8ae:	3302      	addmi	r3, #2
 800a8b0:	6033      	strmi	r3, [r6, #0]
 800a8b2:	6825      	ldr	r5, [r4, #0]
 800a8b4:	f015 0506 	ands.w	r5, r5, #6
 800a8b8:	d106      	bne.n	800a8c8 <_printf_common+0x48>
 800a8ba:	f104 0a19 	add.w	sl, r4, #25
 800a8be:	68e3      	ldr	r3, [r4, #12]
 800a8c0:	6832      	ldr	r2, [r6, #0]
 800a8c2:	1a9b      	subs	r3, r3, r2
 800a8c4:	42ab      	cmp	r3, r5
 800a8c6:	dc26      	bgt.n	800a916 <_printf_common+0x96>
 800a8c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8cc:	1e13      	subs	r3, r2, #0
 800a8ce:	6822      	ldr	r2, [r4, #0]
 800a8d0:	bf18      	it	ne
 800a8d2:	2301      	movne	r3, #1
 800a8d4:	0692      	lsls	r2, r2, #26
 800a8d6:	d42b      	bmi.n	800a930 <_printf_common+0xb0>
 800a8d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8dc:	4649      	mov	r1, r9
 800a8de:	4638      	mov	r0, r7
 800a8e0:	47c0      	blx	r8
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	d01e      	beq.n	800a924 <_printf_common+0xa4>
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	6922      	ldr	r2, [r4, #16]
 800a8ea:	f003 0306 	and.w	r3, r3, #6
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	bf02      	ittt	eq
 800a8f2:	68e5      	ldreq	r5, [r4, #12]
 800a8f4:	6833      	ldreq	r3, [r6, #0]
 800a8f6:	1aed      	subeq	r5, r5, r3
 800a8f8:	68a3      	ldr	r3, [r4, #8]
 800a8fa:	bf0c      	ite	eq
 800a8fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a900:	2500      	movne	r5, #0
 800a902:	4293      	cmp	r3, r2
 800a904:	bfc4      	itt	gt
 800a906:	1a9b      	subgt	r3, r3, r2
 800a908:	18ed      	addgt	r5, r5, r3
 800a90a:	2600      	movs	r6, #0
 800a90c:	341a      	adds	r4, #26
 800a90e:	42b5      	cmp	r5, r6
 800a910:	d11a      	bne.n	800a948 <_printf_common+0xc8>
 800a912:	2000      	movs	r0, #0
 800a914:	e008      	b.n	800a928 <_printf_common+0xa8>
 800a916:	2301      	movs	r3, #1
 800a918:	4652      	mov	r2, sl
 800a91a:	4649      	mov	r1, r9
 800a91c:	4638      	mov	r0, r7
 800a91e:	47c0      	blx	r8
 800a920:	3001      	adds	r0, #1
 800a922:	d103      	bne.n	800a92c <_printf_common+0xac>
 800a924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92c:	3501      	adds	r5, #1
 800a92e:	e7c6      	b.n	800a8be <_printf_common+0x3e>
 800a930:	18e1      	adds	r1, r4, r3
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	2030      	movs	r0, #48	; 0x30
 800a936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a93a:	4422      	add	r2, r4
 800a93c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a944:	3302      	adds	r3, #2
 800a946:	e7c7      	b.n	800a8d8 <_printf_common+0x58>
 800a948:	2301      	movs	r3, #1
 800a94a:	4622      	mov	r2, r4
 800a94c:	4649      	mov	r1, r9
 800a94e:	4638      	mov	r0, r7
 800a950:	47c0      	blx	r8
 800a952:	3001      	adds	r0, #1
 800a954:	d0e6      	beq.n	800a924 <_printf_common+0xa4>
 800a956:	3601      	adds	r6, #1
 800a958:	e7d9      	b.n	800a90e <_printf_common+0x8e>
	...

0800a95c <_printf_i>:
 800a95c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a960:	7e0f      	ldrb	r7, [r1, #24]
 800a962:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a964:	2f78      	cmp	r7, #120	; 0x78
 800a966:	4691      	mov	r9, r2
 800a968:	4680      	mov	r8, r0
 800a96a:	460c      	mov	r4, r1
 800a96c:	469a      	mov	sl, r3
 800a96e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a972:	d807      	bhi.n	800a984 <_printf_i+0x28>
 800a974:	2f62      	cmp	r7, #98	; 0x62
 800a976:	d80a      	bhi.n	800a98e <_printf_i+0x32>
 800a978:	2f00      	cmp	r7, #0
 800a97a:	f000 80d4 	beq.w	800ab26 <_printf_i+0x1ca>
 800a97e:	2f58      	cmp	r7, #88	; 0x58
 800a980:	f000 80c0 	beq.w	800ab04 <_printf_i+0x1a8>
 800a984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a98c:	e03a      	b.n	800aa04 <_printf_i+0xa8>
 800a98e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a992:	2b15      	cmp	r3, #21
 800a994:	d8f6      	bhi.n	800a984 <_printf_i+0x28>
 800a996:	a101      	add	r1, pc, #4	; (adr r1, 800a99c <_printf_i+0x40>)
 800a998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a99c:	0800a9f5 	.word	0x0800a9f5
 800a9a0:	0800aa09 	.word	0x0800aa09
 800a9a4:	0800a985 	.word	0x0800a985
 800a9a8:	0800a985 	.word	0x0800a985
 800a9ac:	0800a985 	.word	0x0800a985
 800a9b0:	0800a985 	.word	0x0800a985
 800a9b4:	0800aa09 	.word	0x0800aa09
 800a9b8:	0800a985 	.word	0x0800a985
 800a9bc:	0800a985 	.word	0x0800a985
 800a9c0:	0800a985 	.word	0x0800a985
 800a9c4:	0800a985 	.word	0x0800a985
 800a9c8:	0800ab0d 	.word	0x0800ab0d
 800a9cc:	0800aa35 	.word	0x0800aa35
 800a9d0:	0800aac7 	.word	0x0800aac7
 800a9d4:	0800a985 	.word	0x0800a985
 800a9d8:	0800a985 	.word	0x0800a985
 800a9dc:	0800ab2f 	.word	0x0800ab2f
 800a9e0:	0800a985 	.word	0x0800a985
 800a9e4:	0800aa35 	.word	0x0800aa35
 800a9e8:	0800a985 	.word	0x0800a985
 800a9ec:	0800a985 	.word	0x0800a985
 800a9f0:	0800aacf 	.word	0x0800aacf
 800a9f4:	682b      	ldr	r3, [r5, #0]
 800a9f6:	1d1a      	adds	r2, r3, #4
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	602a      	str	r2, [r5, #0]
 800a9fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa04:	2301      	movs	r3, #1
 800aa06:	e09f      	b.n	800ab48 <_printf_i+0x1ec>
 800aa08:	6820      	ldr	r0, [r4, #0]
 800aa0a:	682b      	ldr	r3, [r5, #0]
 800aa0c:	0607      	lsls	r7, r0, #24
 800aa0e:	f103 0104 	add.w	r1, r3, #4
 800aa12:	6029      	str	r1, [r5, #0]
 800aa14:	d501      	bpl.n	800aa1a <_printf_i+0xbe>
 800aa16:	681e      	ldr	r6, [r3, #0]
 800aa18:	e003      	b.n	800aa22 <_printf_i+0xc6>
 800aa1a:	0646      	lsls	r6, r0, #25
 800aa1c:	d5fb      	bpl.n	800aa16 <_printf_i+0xba>
 800aa1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aa22:	2e00      	cmp	r6, #0
 800aa24:	da03      	bge.n	800aa2e <_printf_i+0xd2>
 800aa26:	232d      	movs	r3, #45	; 0x2d
 800aa28:	4276      	negs	r6, r6
 800aa2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa2e:	485a      	ldr	r0, [pc, #360]	; (800ab98 <_printf_i+0x23c>)
 800aa30:	230a      	movs	r3, #10
 800aa32:	e012      	b.n	800aa5a <_printf_i+0xfe>
 800aa34:	682b      	ldr	r3, [r5, #0]
 800aa36:	6820      	ldr	r0, [r4, #0]
 800aa38:	1d19      	adds	r1, r3, #4
 800aa3a:	6029      	str	r1, [r5, #0]
 800aa3c:	0605      	lsls	r5, r0, #24
 800aa3e:	d501      	bpl.n	800aa44 <_printf_i+0xe8>
 800aa40:	681e      	ldr	r6, [r3, #0]
 800aa42:	e002      	b.n	800aa4a <_printf_i+0xee>
 800aa44:	0641      	lsls	r1, r0, #25
 800aa46:	d5fb      	bpl.n	800aa40 <_printf_i+0xe4>
 800aa48:	881e      	ldrh	r6, [r3, #0]
 800aa4a:	4853      	ldr	r0, [pc, #332]	; (800ab98 <_printf_i+0x23c>)
 800aa4c:	2f6f      	cmp	r7, #111	; 0x6f
 800aa4e:	bf0c      	ite	eq
 800aa50:	2308      	moveq	r3, #8
 800aa52:	230a      	movne	r3, #10
 800aa54:	2100      	movs	r1, #0
 800aa56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa5a:	6865      	ldr	r5, [r4, #4]
 800aa5c:	60a5      	str	r5, [r4, #8]
 800aa5e:	2d00      	cmp	r5, #0
 800aa60:	bfa2      	ittt	ge
 800aa62:	6821      	ldrge	r1, [r4, #0]
 800aa64:	f021 0104 	bicge.w	r1, r1, #4
 800aa68:	6021      	strge	r1, [r4, #0]
 800aa6a:	b90e      	cbnz	r6, 800aa70 <_printf_i+0x114>
 800aa6c:	2d00      	cmp	r5, #0
 800aa6e:	d04b      	beq.n	800ab08 <_printf_i+0x1ac>
 800aa70:	4615      	mov	r5, r2
 800aa72:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa76:	fb03 6711 	mls	r7, r3, r1, r6
 800aa7a:	5dc7      	ldrb	r7, [r0, r7]
 800aa7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa80:	4637      	mov	r7, r6
 800aa82:	42bb      	cmp	r3, r7
 800aa84:	460e      	mov	r6, r1
 800aa86:	d9f4      	bls.n	800aa72 <_printf_i+0x116>
 800aa88:	2b08      	cmp	r3, #8
 800aa8a:	d10b      	bne.n	800aaa4 <_printf_i+0x148>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	07de      	lsls	r6, r3, #31
 800aa90:	d508      	bpl.n	800aaa4 <_printf_i+0x148>
 800aa92:	6923      	ldr	r3, [r4, #16]
 800aa94:	6861      	ldr	r1, [r4, #4]
 800aa96:	4299      	cmp	r1, r3
 800aa98:	bfde      	ittt	le
 800aa9a:	2330      	movle	r3, #48	; 0x30
 800aa9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aaa0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aaa4:	1b52      	subs	r2, r2, r5
 800aaa6:	6122      	str	r2, [r4, #16]
 800aaa8:	f8cd a000 	str.w	sl, [sp]
 800aaac:	464b      	mov	r3, r9
 800aaae:	aa03      	add	r2, sp, #12
 800aab0:	4621      	mov	r1, r4
 800aab2:	4640      	mov	r0, r8
 800aab4:	f7ff fee4 	bl	800a880 <_printf_common>
 800aab8:	3001      	adds	r0, #1
 800aaba:	d14a      	bne.n	800ab52 <_printf_i+0x1f6>
 800aabc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aac0:	b004      	add	sp, #16
 800aac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	f043 0320 	orr.w	r3, r3, #32
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	4833      	ldr	r0, [pc, #204]	; (800ab9c <_printf_i+0x240>)
 800aad0:	2778      	movs	r7, #120	; 0x78
 800aad2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	6829      	ldr	r1, [r5, #0]
 800aada:	061f      	lsls	r7, r3, #24
 800aadc:	f851 6b04 	ldr.w	r6, [r1], #4
 800aae0:	d402      	bmi.n	800aae8 <_printf_i+0x18c>
 800aae2:	065f      	lsls	r7, r3, #25
 800aae4:	bf48      	it	mi
 800aae6:	b2b6      	uxthmi	r6, r6
 800aae8:	07df      	lsls	r7, r3, #31
 800aaea:	bf48      	it	mi
 800aaec:	f043 0320 	orrmi.w	r3, r3, #32
 800aaf0:	6029      	str	r1, [r5, #0]
 800aaf2:	bf48      	it	mi
 800aaf4:	6023      	strmi	r3, [r4, #0]
 800aaf6:	b91e      	cbnz	r6, 800ab00 <_printf_i+0x1a4>
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	f023 0320 	bic.w	r3, r3, #32
 800aafe:	6023      	str	r3, [r4, #0]
 800ab00:	2310      	movs	r3, #16
 800ab02:	e7a7      	b.n	800aa54 <_printf_i+0xf8>
 800ab04:	4824      	ldr	r0, [pc, #144]	; (800ab98 <_printf_i+0x23c>)
 800ab06:	e7e4      	b.n	800aad2 <_printf_i+0x176>
 800ab08:	4615      	mov	r5, r2
 800ab0a:	e7bd      	b.n	800aa88 <_printf_i+0x12c>
 800ab0c:	682b      	ldr	r3, [r5, #0]
 800ab0e:	6826      	ldr	r6, [r4, #0]
 800ab10:	6961      	ldr	r1, [r4, #20]
 800ab12:	1d18      	adds	r0, r3, #4
 800ab14:	6028      	str	r0, [r5, #0]
 800ab16:	0635      	lsls	r5, r6, #24
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	d501      	bpl.n	800ab20 <_printf_i+0x1c4>
 800ab1c:	6019      	str	r1, [r3, #0]
 800ab1e:	e002      	b.n	800ab26 <_printf_i+0x1ca>
 800ab20:	0670      	lsls	r0, r6, #25
 800ab22:	d5fb      	bpl.n	800ab1c <_printf_i+0x1c0>
 800ab24:	8019      	strh	r1, [r3, #0]
 800ab26:	2300      	movs	r3, #0
 800ab28:	6123      	str	r3, [r4, #16]
 800ab2a:	4615      	mov	r5, r2
 800ab2c:	e7bc      	b.n	800aaa8 <_printf_i+0x14c>
 800ab2e:	682b      	ldr	r3, [r5, #0]
 800ab30:	1d1a      	adds	r2, r3, #4
 800ab32:	602a      	str	r2, [r5, #0]
 800ab34:	681d      	ldr	r5, [r3, #0]
 800ab36:	6862      	ldr	r2, [r4, #4]
 800ab38:	2100      	movs	r1, #0
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	f7f5 fb30 	bl	80001a0 <memchr>
 800ab40:	b108      	cbz	r0, 800ab46 <_printf_i+0x1ea>
 800ab42:	1b40      	subs	r0, r0, r5
 800ab44:	6060      	str	r0, [r4, #4]
 800ab46:	6863      	ldr	r3, [r4, #4]
 800ab48:	6123      	str	r3, [r4, #16]
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab50:	e7aa      	b.n	800aaa8 <_printf_i+0x14c>
 800ab52:	6923      	ldr	r3, [r4, #16]
 800ab54:	462a      	mov	r2, r5
 800ab56:	4649      	mov	r1, r9
 800ab58:	4640      	mov	r0, r8
 800ab5a:	47d0      	blx	sl
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	d0ad      	beq.n	800aabc <_printf_i+0x160>
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	079b      	lsls	r3, r3, #30
 800ab64:	d413      	bmi.n	800ab8e <_printf_i+0x232>
 800ab66:	68e0      	ldr	r0, [r4, #12]
 800ab68:	9b03      	ldr	r3, [sp, #12]
 800ab6a:	4298      	cmp	r0, r3
 800ab6c:	bfb8      	it	lt
 800ab6e:	4618      	movlt	r0, r3
 800ab70:	e7a6      	b.n	800aac0 <_printf_i+0x164>
 800ab72:	2301      	movs	r3, #1
 800ab74:	4632      	mov	r2, r6
 800ab76:	4649      	mov	r1, r9
 800ab78:	4640      	mov	r0, r8
 800ab7a:	47d0      	blx	sl
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	d09d      	beq.n	800aabc <_printf_i+0x160>
 800ab80:	3501      	adds	r5, #1
 800ab82:	68e3      	ldr	r3, [r4, #12]
 800ab84:	9903      	ldr	r1, [sp, #12]
 800ab86:	1a5b      	subs	r3, r3, r1
 800ab88:	42ab      	cmp	r3, r5
 800ab8a:	dcf2      	bgt.n	800ab72 <_printf_i+0x216>
 800ab8c:	e7eb      	b.n	800ab66 <_printf_i+0x20a>
 800ab8e:	2500      	movs	r5, #0
 800ab90:	f104 0619 	add.w	r6, r4, #25
 800ab94:	e7f5      	b.n	800ab82 <_printf_i+0x226>
 800ab96:	bf00      	nop
 800ab98:	0800b529 	.word	0x0800b529
 800ab9c:	0800b53a 	.word	0x0800b53a

0800aba0 <__malloc_lock>:
 800aba0:	4801      	ldr	r0, [pc, #4]	; (800aba8 <__malloc_lock+0x8>)
 800aba2:	f7ff bc65 	b.w	800a470 <__retarget_lock_acquire_recursive>
 800aba6:	bf00      	nop
 800aba8:	2000067c 	.word	0x2000067c

0800abac <__malloc_unlock>:
 800abac:	4801      	ldr	r0, [pc, #4]	; (800abb4 <__malloc_unlock+0x8>)
 800abae:	f7ff bc60 	b.w	800a472 <__retarget_lock_release_recursive>
 800abb2:	bf00      	nop
 800abb4:	2000067c 	.word	0x2000067c

0800abb8 <_realloc_r>:
 800abb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abbc:	4680      	mov	r8, r0
 800abbe:	4614      	mov	r4, r2
 800abc0:	460e      	mov	r6, r1
 800abc2:	b921      	cbnz	r1, 800abce <_realloc_r+0x16>
 800abc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abc8:	4611      	mov	r1, r2
 800abca:	f7ff bdd9 	b.w	800a780 <_malloc_r>
 800abce:	b92a      	cbnz	r2, 800abdc <_realloc_r+0x24>
 800abd0:	f000 f84c 	bl	800ac6c <_free_r>
 800abd4:	4625      	mov	r5, r4
 800abd6:	4628      	mov	r0, r5
 800abd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abdc:	f000 f890 	bl	800ad00 <_malloc_usable_size_r>
 800abe0:	4284      	cmp	r4, r0
 800abe2:	4607      	mov	r7, r0
 800abe4:	d802      	bhi.n	800abec <_realloc_r+0x34>
 800abe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abea:	d812      	bhi.n	800ac12 <_realloc_r+0x5a>
 800abec:	4621      	mov	r1, r4
 800abee:	4640      	mov	r0, r8
 800abf0:	f7ff fdc6 	bl	800a780 <_malloc_r>
 800abf4:	4605      	mov	r5, r0
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d0ed      	beq.n	800abd6 <_realloc_r+0x1e>
 800abfa:	42bc      	cmp	r4, r7
 800abfc:	4622      	mov	r2, r4
 800abfe:	4631      	mov	r1, r6
 800ac00:	bf28      	it	cs
 800ac02:	463a      	movcs	r2, r7
 800ac04:	f7ff fc36 	bl	800a474 <memcpy>
 800ac08:	4631      	mov	r1, r6
 800ac0a:	4640      	mov	r0, r8
 800ac0c:	f000 f82e 	bl	800ac6c <_free_r>
 800ac10:	e7e1      	b.n	800abd6 <_realloc_r+0x1e>
 800ac12:	4635      	mov	r5, r6
 800ac14:	e7df      	b.n	800abd6 <_realloc_r+0x1e>

0800ac16 <memmove>:
 800ac16:	4288      	cmp	r0, r1
 800ac18:	b510      	push	{r4, lr}
 800ac1a:	eb01 0402 	add.w	r4, r1, r2
 800ac1e:	d902      	bls.n	800ac26 <memmove+0x10>
 800ac20:	4284      	cmp	r4, r0
 800ac22:	4623      	mov	r3, r4
 800ac24:	d807      	bhi.n	800ac36 <memmove+0x20>
 800ac26:	1e43      	subs	r3, r0, #1
 800ac28:	42a1      	cmp	r1, r4
 800ac2a:	d008      	beq.n	800ac3e <memmove+0x28>
 800ac2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac30:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac34:	e7f8      	b.n	800ac28 <memmove+0x12>
 800ac36:	4402      	add	r2, r0
 800ac38:	4601      	mov	r1, r0
 800ac3a:	428a      	cmp	r2, r1
 800ac3c:	d100      	bne.n	800ac40 <memmove+0x2a>
 800ac3e:	bd10      	pop	{r4, pc}
 800ac40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac44:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac48:	e7f7      	b.n	800ac3a <memmove+0x24>
	...

0800ac4c <_sbrk_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d06      	ldr	r5, [pc, #24]	; (800ac68 <_sbrk_r+0x1c>)
 800ac50:	2300      	movs	r3, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	f7f6 fc64 	bl	8001524 <_sbrk>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_sbrk_r+0x1a>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_sbrk_r+0x1a>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	20000688 	.word	0x20000688

0800ac6c <_free_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4605      	mov	r5, r0
 800ac70:	2900      	cmp	r1, #0
 800ac72:	d041      	beq.n	800acf8 <_free_r+0x8c>
 800ac74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac78:	1f0c      	subs	r4, r1, #4
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	bfb8      	it	lt
 800ac7e:	18e4      	addlt	r4, r4, r3
 800ac80:	f7ff ff8e 	bl	800aba0 <__malloc_lock>
 800ac84:	4a1d      	ldr	r2, [pc, #116]	; (800acfc <_free_r+0x90>)
 800ac86:	6813      	ldr	r3, [r2, #0]
 800ac88:	b933      	cbnz	r3, 800ac98 <_free_r+0x2c>
 800ac8a:	6063      	str	r3, [r4, #4]
 800ac8c:	6014      	str	r4, [r2, #0]
 800ac8e:	4628      	mov	r0, r5
 800ac90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac94:	f7ff bf8a 	b.w	800abac <__malloc_unlock>
 800ac98:	42a3      	cmp	r3, r4
 800ac9a:	d908      	bls.n	800acae <_free_r+0x42>
 800ac9c:	6820      	ldr	r0, [r4, #0]
 800ac9e:	1821      	adds	r1, r4, r0
 800aca0:	428b      	cmp	r3, r1
 800aca2:	bf01      	itttt	eq
 800aca4:	6819      	ldreq	r1, [r3, #0]
 800aca6:	685b      	ldreq	r3, [r3, #4]
 800aca8:	1809      	addeq	r1, r1, r0
 800acaa:	6021      	streq	r1, [r4, #0]
 800acac:	e7ed      	b.n	800ac8a <_free_r+0x1e>
 800acae:	461a      	mov	r2, r3
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	b10b      	cbz	r3, 800acb8 <_free_r+0x4c>
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	d9fa      	bls.n	800acae <_free_r+0x42>
 800acb8:	6811      	ldr	r1, [r2, #0]
 800acba:	1850      	adds	r0, r2, r1
 800acbc:	42a0      	cmp	r0, r4
 800acbe:	d10b      	bne.n	800acd8 <_free_r+0x6c>
 800acc0:	6820      	ldr	r0, [r4, #0]
 800acc2:	4401      	add	r1, r0
 800acc4:	1850      	adds	r0, r2, r1
 800acc6:	4283      	cmp	r3, r0
 800acc8:	6011      	str	r1, [r2, #0]
 800acca:	d1e0      	bne.n	800ac8e <_free_r+0x22>
 800accc:	6818      	ldr	r0, [r3, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	6053      	str	r3, [r2, #4]
 800acd2:	4408      	add	r0, r1
 800acd4:	6010      	str	r0, [r2, #0]
 800acd6:	e7da      	b.n	800ac8e <_free_r+0x22>
 800acd8:	d902      	bls.n	800ace0 <_free_r+0x74>
 800acda:	230c      	movs	r3, #12
 800acdc:	602b      	str	r3, [r5, #0]
 800acde:	e7d6      	b.n	800ac8e <_free_r+0x22>
 800ace0:	6820      	ldr	r0, [r4, #0]
 800ace2:	1821      	adds	r1, r4, r0
 800ace4:	428b      	cmp	r3, r1
 800ace6:	bf04      	itt	eq
 800ace8:	6819      	ldreq	r1, [r3, #0]
 800acea:	685b      	ldreq	r3, [r3, #4]
 800acec:	6063      	str	r3, [r4, #4]
 800acee:	bf04      	itt	eq
 800acf0:	1809      	addeq	r1, r1, r0
 800acf2:	6021      	streq	r1, [r4, #0]
 800acf4:	6054      	str	r4, [r2, #4]
 800acf6:	e7ca      	b.n	800ac8e <_free_r+0x22>
 800acf8:	bd38      	pop	{r3, r4, r5, pc}
 800acfa:	bf00      	nop
 800acfc:	20000680 	.word	0x20000680

0800ad00 <_malloc_usable_size_r>:
 800ad00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad04:	1f18      	subs	r0, r3, #4
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	bfbc      	itt	lt
 800ad0a:	580b      	ldrlt	r3, [r1, r0]
 800ad0c:	18c0      	addlt	r0, r0, r3
 800ad0e:	4770      	bx	lr

0800ad10 <_init>:
 800ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad12:	bf00      	nop
 800ad14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad16:	bc08      	pop	{r3}
 800ad18:	469e      	mov	lr, r3
 800ad1a:	4770      	bx	lr

0800ad1c <_fini>:
 800ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1e:	bf00      	nop
 800ad20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad22:	bc08      	pop	{r3}
 800ad24:	469e      	mov	lr, r3
 800ad26:	4770      	bx	lr
